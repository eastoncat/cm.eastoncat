[1mdiff --git a/sites/all/modules/contrib/media/LICENSE.txt b/sites/all/modules/contrib/media/LICENSE.txt[m
[1mdeleted file mode 100644[m
[1mindex d159169..0000000[m
[1m--- a/sites/all/modules/contrib/media/LICENSE.txt[m
[1m+++ /dev/null[m
[36m@@ -1,339 +0,0 @@[m
[31m-                    GNU GENERAL PUBLIC LICENSE[m
[31m-                       Version 2, June 1991[m
[31m-[m
[31m- Copyright (C) 1989, 1991 Free Software Foundation, Inc.,[m
[31m- 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA[m
[31m- Everyone is permitted to copy and distribute verbatim copies[m
[31m- of this license document, but changing it is not allowed.[m
[31m-[m
[31m-                            Preamble[m
[31m-[m
[31m-  The licenses for most software are designed to take away your[m
[31m-freedom to share and change it.  By contrast, the GNU General Public[m
[31m-License is intended to guarantee your freedom to share and change free[m
[31m-software--to make sure the software is free for all its users.  This[m
[31m-General Public License applies to most of the Free Software[m
[31m-Foundation's software and to any other program whose authors commit to[m
[31m-using it.  (Some other Free Software Foundation software is covered by[m
[31m-the GNU Lesser General Public License instead.)  You can apply it to[m
[31m-your programs, too.[m
[31m-[m
[31m-  When we speak of free software, we are referring to freedom, not[m
[31m-price.  Our General Public Licenses are designed to make sure that you[m
[31m-have the freedom to distribute copies of free software (and charge for[m
[31m-this service if you wish), that you receive source code or can get it[m
[31m-if you want it, that you can change the software or use pieces of it[m
[31m-in new free programs; and that you know you can do these things.[m
[31m-[m
[31m-  To protect your rights, we need to make restrictions that forbid[m
[31m-anyone to deny you these rights or to ask you to surrender the rights.[m
[31m-These restrictions translate to certain responsibilities for you if you[m
[31m-distribute copies of the software, or if you modify it.[m
[31m-[m
[31m-  For example, if you distribute copies of such a program, whether[m
[31m-gratis or for a fee, you must give the recipients all the rights that[m
[31m-you have.  You must make sure that they, too, receive or can get the[m
[31m-source code.  And you must show them these terms so they know their[m
[31m-rights.[m
[31m-[m
[31m-  We protect your rights with two steps: (1) copyright the software, and[m
[31m-(2) offer you this license which gives you legal permission to copy,[m
[31m-distribute and/or modify the software.[m
[31m-[m
[31m-  Also, for each author's protection and ours, we want to make certain[m
[31m-that everyone understands that there is no warranty for this free[m
[31m-software.  If the software is modified by someone else and passed on, we[m
[31m-want its recipients to know that what they have is not the original, so[m
[31m-that any problems introduced by others will not reflect on the original[m
[31m-authors' reputations.[m
[31m-[m
[31m-  Finally, any free program is threatened constantly by software[m
[31m-patents.  We wish to avoid the danger that redistributors of a free[m
[31m-program will individually obtain patent licenses, in effect making the[m
[31m-program proprietary.  To prevent this, we have made it clear that any[m
[31m-patent must be licensed for everyone's free use or not licensed at all.[m
[31m-[m
[31m-  The precise terms and conditions for copying, distribution and[m
[31m-modification follow.[m
[31m-[m
[31m-                    GNU GENERAL PUBLIC LICENSE[m
[31m-   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION[m
[31m-[m
[31m-  0. This License applies to any program or other work which contains[m
[31m-a notice placed by the copyright holder saying it may be distributed[m
[31m-under the terms of this General Public License.  The "Program", below,[m
[31m-refers to any such program or work, and a "work based on the Program"[m
[31m-means either the Program or any derivative work under copyright law:[m
[31m-that is to say, a work containing the Program or a portion of it,[m
[31m-either verbatim or with modifications and/or translated into another[m
[31m-language.  (Hereinafter, translation is included without limitation in[m
[31m-the term "modification".)  Each licensee is addressed as "you".[m
[31m-[m
[31m-Activities other than copying, distribution and modification are not[m
[31m-covered by this License; they are outside its scope.  The act of[m
[31m-running the Program is not restricted, and the output from the Program[m
[31m-is covered only if its contents constitute a work based on the[m
[31m-Program (independent of having been made by running the Program).[m
[31m-Whether that is true depends on what the Program does.[m
[31m-[m
[31m-  1. You may copy and distribute verbatim copies of the Program's[m
[31m-source code as you receive it, in any medium, provided that you[m
[31m-conspicuously and appropriately publish on each copy an appropriate[m
[31m-copyright notice and disclaimer of warranty; keep intact all the[m
[31m-notices that refer to this License and to the absence of any warranty;[m
[31m-and give any other recipients of the Program a copy of this License[m
[31m-along with the Program.[m
[31m-[m
[31m-You may charge a fee for the physical act of transferring a copy, and[m
[31m-you may at your option offer warranty protection in exchange for a fee.[m
[31m-[m
[31m-  2. You may modify your copy or copies of the Program or any portion[m
[31m-of it, thus forming a work based on the Program, and copy and[m
[31m-distribute such modifications or work under the terms of Section 1[m
[31m-above, provided that you also meet all of these conditions:[m
[31m-[m
[31m-    a) You must cause the modified files to carry prominent notices[m
[31m-    stating that you changed the files and the date of any change.[m
[31m-[m
[31m-    b) You must cause any work that you distribute or publish, that in[m
[31m-    whole or in part contains or is derived from the Program or any[m
[31m-    part thereof, to be licensed as a whole at no charge to all third[m
[31m-    parties under the terms of this License.[m
[31m-[m
[31m-    c) If the modified program normally reads commands interactively[m
[31m-    when run, you must cause it, when started running for such[m
[31m-    interactive use in the most ordinary way, to print or display an[m
[31m-    announcement including an appropriate copyright notice and a[m
[31m-    notice that there is no warranty (or else, saying that you provide[m
[31m-    a warranty) and that users may redistribute the program under[m
[31m-    these conditions, and telling the user how to view a copy of this[m
[31m-    License.  (Exception: if the Program itself is interactive but[m
[31m-    does not normally print such an announcement, your work based on[m
[31m-    the Program is not required to print an announcement.)[m
[31m-[m
[31m-These requirements apply to the modified work as a whole.  If[m
[31m-identifiable sections of that work are not derived from the Program,[m
[31m-and can be reasonably considered independent and separate works in[m
[31m-themselves, then this License, and its terms, do not apply to those[m
[31m-sections when you distribute them as separate works.  But when you[m
[31m-distribute the same sections as part of a whole which is a work based[m
[31m-on the Program, the distribution of the whole must be on the terms of[m
[31m-this License, whose permissions for other licensees extend to the[m
[31m-entire whole, and thus to each and every part regardless of who wrote it.[m
[31m-[m
[31m-Thus, it is not the intent of this section to claim rights or contest[m
[31m-your rights to work written entirely by you; rather, the intent is to[m
[31m-exercise the right to control the distribution of derivative or[m
[31m-collective works based on the Program.[m
[31m-[m
[31m-In addition, mere aggregation of another work not based on the Program[m
[31m-with the Program (or with a work based on the Program) on a volume of[m
[31m-a storage or distribution medium does not bring the other work under[m
[31m-the scope of this License.[m
[31m-[m
[31m-  3. You may copy and distribute the Program (or a work based on it,[m
[31m-under Section 2) in object code or executable form under the terms of[m
[31m-Sections 1 and 2 above provided that you also do one of the following:[m
[31m-[m
[31m-    a) Accompany it with the complete corresponding machine-readable[m
[31m-    source code, which must be distributed under the terms of Sections[m
[31m-    1 and 2 above on a medium customarily used for software interchange; or,[m
[31m-[m
[31m-    b) Accompany it with a written offer, valid for at least three[m
[31m-    years, to give any third party, for a charge no more than your[m
[31m-    cost of physically performing source distribution, a complete[m
[31m-    machine-readable copy of the corresponding source code, to be[m
[31m-    distributed under the terms of Sections 1 and 2 above on a medium[m
[31m-    customarily used for software interchange; or,[m
[31m-[m
[31m-    c) Accompany it with the information you received as to the offer[m
[31m-    to distribute corresponding source code.  (This alternative is[m
[31m-    allowed only for noncommercial distribution and only if you[m
[31m-    received the program in object code or executable form with such[m
[31m-    an offer, in accord with Subsection b above.)[m
[31m-[m
[31m-The source code for a work means the preferred form of the work for[m
[31m-making modifications to it.  For an executable work, complete source[m
[31m-code means all the source code for all modules it contains, plus any[m
[31m-associated interface definition files, plus the scripts used to[m
[31m-control compilation and installation of the executable.  However, as a[m
[31m-special exception, the source code distributed need not include[m
[31m-anything that is normally distributed (in either source or binary[m
[31m-form) with the major components (compiler, kernel, and so on) of the[m
[31m-operating system on which the executable runs, unless that component[m
[31m-itself accompanies the executable.[m
[31m-[m
[31m-If distribution of executable or object code is made by offering[m
[31m-access to copy from a designated place, then offering equivalent[m
[31m-access to copy the source code from the same place counts as[m
[31m-distribution of the source code, even though third parties are not[m
[31m-compelled to copy the source along with the object code.[m
[31m-[m
[31m-  4. You may not copy, modify, sublicense, or distribute the Program[m
[31m-except as expressly provided under this License.  Any attempt[m
[31m-otherwise to copy, modify, sublicense or distribute the Program is[m
[31m-void, and will automatically terminate your rights under this License.[m
[31m-However, parties who have received copies, or rights, from you under[m
[31m-this License will not have their licenses terminated so long as such[m
[31m-parties remain in full compliance.[m
[31m-[m
[31m-  5. You are not required to accept this License, since you have not[m
[31m-signed it.  However, nothing else grants you permission to modify or[m
[31m-distribute the Program or its derivative works.  These actions are[m
[31m-prohibited by law if you do not accept this License.  Therefore, by[m
[31m-modifying or distributing the Program (or any work based on the[m
[31m-Program), you indicate your acceptance of this License to do so, and[m
[31m-all its terms and conditions for copying, distributing or modifying[m
[31m-the Program or works based on it.[m
[31m-[m
[31m-  6. Each time you redistribute the Program (or any work based on the[m
[31m-Program), the recipient automatically receives a license from the[m
[31m-original licensor to copy, distribute or modify the Program subject to[m
[31m-these terms and conditions.  You may not impose any further[m
[31m-restrictions on the recipients' exercise of the rights granted herein.[m
[31m-You are not responsible for enforcing compliance by third parties to[m
[31m-this License.[m
[31m-[m
[31m-  7. If, as a consequence of a court judgment or allegation of patent[m
[31m-infringement or for any other reason (not limited to patent issues),[m
[31m-conditions are imposed on you (whether by court order, agreement or[m
[31m-otherwise) that contradict the conditions of this License, they do not[m
[31m-excuse you from the conditions of this License.  If you cannot[m
[31m-distribute so as to satisfy simultaneously your obligations under this[m
[31m-License and any other pertinent obligations, then as a consequence you[m
[31m-may not distribute the Program at all.  For example, if a patent[m
[31m-license would not permit royalty-free redistribution of the Program by[m
[31m-all those who receive copies directly or indirectly through you, then[m
[31m-the only way you could satisfy both it and this License would be to[m
[31m-refrain entirely from distribution of the Program.[m
[31m-[m
[31m-If any portion of this section is held invalid or unenforceable under[m
[31m-any particular circumstance, the balance of the section is intended to[m
[31m-apply and the section as a whole is intended to apply in other[m
[31m-circumstances.[m
[31m-[m
[31m-It is not the purpose of this section to induce you to infringe any[m
[31m-patents or other property right claims or to contest validity of any[m
[31m-such claims; this section has the sole purpose of protecting the[m
[31m-integrity of the free software distribution system, which is[m
[31m-implemented by public license practices.  Many people have made[m
[31m-generous contributions to the wide range of software distributed[m
[31m-through that system in reliance on consistent application of that[m
[31m-system; it is up to the author/donor to decide if he or she is willing[m
[31m-to distribute software through any other system and a licensee cannot[m
[31m-impose that choice.[m
[31m-[m
[31m-This section is intended to make thoroughly clear what is believed to[m
[31m-be a consequence of the rest of this License.[m
[31m-[m
[31m-  8. If the distribution and/or use of the Program is restricted in[m
[31m-certain countries either by patents or by copyrighted interfaces, the[m
[31m-original copyright holder who places the Program under this License[m
[31m-may add an explicit geographical distribution limitation excluding[m
[31m-those countries, so that distribution is permitted only in or among[m
[31m-countries not thus excluded.  In such case, this License incorporates[m
[31m-the limitation as if written in the body of this License.[m
[31m-[m
[31m-  9. The Free Software Foundation may publish revised and/or new versions[m
[31m-of the General Public License from time to time.  Such new versions will[m
[31m-be similar in spirit to the present version, but may differ in detail to[m
[31m-address new problems or concerns.[m
[31m-[m
[31m-Each version is given a distinguishing version number.  If the Program[m
[31m-specifies a version number of this License which applies to it and "any[m
[31m-later version", you have the option of following the terms and conditions[m
[31m-either of that version or of any later version published by the Free[m
[31m-Software Foundation.  If the Program does not specify a version number of[m
[31m-this License, you may choose any version ever published by the Free Software[m
[31m-Foundation.[m
[31m-[m
[31m-  10. If you wish to incorporate parts of the Program into other free[m
[31m-programs whose distribution conditions are different, write to the author[m
[31m-to ask for permission.  For software which is copyrighted by the Free[m
[31m-Software Foundation, write to the Free Software Foundation; we sometimes[m
[31m-make exceptions for this.  Our decision will be guided by the two goals[m
[31m-of preserving the free status of all derivatives of our free software and[m
[31m-of promoting the sharing and reuse of software generally.[m
[31m-[m
[31m-                            NO WARRANTY[m
[31m-[m
[31m-  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY[m
[31m-FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN[m
[31m-OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES[m
[31m-PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED[m
[31m-OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF[m
[31m-MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS[m
[31m-TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE[m
[31m-PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,[m
[31m-REPAIR OR CORRECTION.[m
[31m-[m
[31m-  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING[m
[31m-WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR[m
[31m-REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,[m
[31m-INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING[m
[31m-OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED[m
[31m-TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY[m
[31m-YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER[m
[31m-PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE[m
[31m-POSSIBILITY OF SUCH DAMAGES.[m
[31m-[m
[31m-                     END OF TERMS AND CONDITIONS[m
[31m-[m
[31m-            How to Apply These Terms to Your New Programs[m
[31m-[m
[31m-  If you develop a new program, and you want it to be of the greatest[m
[31m-possible use to the public, the best way to achieve this is to make it[m
[31m-free software which everyone can redistribute and change under these terms.[m
[31m-[m
[31m-  To do so, attach the following notices to the program.  It is safest[m
[31m-to attach them to the start of each source file to most effectively[m
[31m-convey the exclusion of warranty; and each file should have at least[m
[31m-the "copyright" line and a pointer to where the full notice is found.[m
[31m-[m
[31m-    <one line to give the program's name and a brief idea of what it does.>[m
[31m-    Copyright (C) <year>  <name of author>[m
[31m-[m
[31m-    This program is free software; you can redistribute it and/or modify[m
[31m-    it under the terms of the GNU General Public License as published by[m
[31m-    the Free Software Foundation; either version 2 of the License, or[m
[31m-    (at your option) any later version.[m
[31m-[m
[31m-    This program is distributed in the hope that it will be useful,[m
[31m-    but WITHOUT ANY WARRANTY; without even the implied warranty of[m
[31m-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the[m
[31m-    GNU General Public License for more details.[m
[31m-[m
[31m-    You should have received a copy of the GNU General Public License along[m
[31m-    with this program; if not, write to the Free Software Foundation, Inc.,[m
[31m-    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.[m
[31m-[m
[31m-Also add information on how to contact you by electronic and paper mail.[m
[31m-[m
[31m-If the program is interactive, make it output a short notice like this[m
[31m-when it starts in an interactive mode:[m
[31m-[m
[31m-    Gnomovision version 69, Copyright (C) year name of author[m
[31m-    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.[m
[31m-    This is free software, and you are welcome to redistribute it[m
[31m-    under certain conditions; type `show c' for details.[m
[31m-[m
[31m-The hypothetical commands `show w' and `show c' should show the appropriate[m
[31m-parts of the General Public License.  Of course, the commands you use may[m
[31m-be called something other than `show w' and `show c'; they could even be[m
[31m-mouse-clicks or menu items--whatever suits your program.[m
[31m-[m
[31m-You should also get your employer (if you work as a programmer) or your[m
[31m-school, if any, to sign a "copyright disclaimer" for the program, if[m
[31m-necessary.  Here is a sample; alter the names:[m
[31m-[m
[31m-  Yoyodyne, Inc., hereby disclaims all copyright interest in the program[m
[31m-  `Gnomovision' (which makes passes at compilers) written by James Hacker.[m
[31m-[m
[31m-  <signature of Ty Coon>, 1 April 1989[m
[31m-  Ty Coon, President of Vice[m
[31m-[m
[31m-This General Public License does not permit incorporating your program into[m
[31m-proprietary programs.  If your program is a subroutine library, you may[m
[31m-consider it more useful to permit linking proprietary applications with the[m
[31m-library.  If this is what you want to do, use the GNU Lesser General[m
[31m-Public License instead of this License.[m
[1mdiff --git a/sites/all/modules/contrib/media/README.txt b/sites/all/modules/contrib/media/README.txt[m
[1mdeleted file mode 100644[m
[1mindex 7c1615b..0000000[m
[1m--- a/sites/all/modules/contrib/media/README.txt[m
[1m+++ /dev/null[m
[36m@@ -1,28 +0,0 @@[m
[31m-[m
[31m-/**[m
[31m- *  @file[m
[31m- *  README for the Media Module.[m
[31m- */[m
[31m-[m
[31m-See -https://www.drupal.org/documentation/modules/media[m
[31m-[m
[31m-Site Building Guide ->[m
[31m- \/ Media and files[m
[31m-    \/ Media [m
[31m-- https://www.drupal.org/documentation/modules/media[m
[31m-     > Media Internet Sources[m
[31m-     . Media and file cleanup[m
[31m-     . Media: YouTube upload[m
[31m-     > Upgrading Media 7.x-1.x to 7.x-2.x[m
[31m-     . Using existing files (FTP uploads etc)[m
[31m-     . Media Installation and distributions[m
[31m-     . Media 2.x Quick Start Guide[m
[31m-     . Displaying Media[m
[31m-     . Media Library[m
[31m-     . Media Roadmap[m
[31m-     > Media Recipes (custom FORM, developer recipes)[m
[31m-     > Media Developer Documentation (Outdated)[m
[31m-     > Media FAQ (Outdated)[m
[31m-     . Media Vimeo Uploader  [m
[31m-[m
[31m-items preceded with a '>' indicate more available media module documentation sub categories[m
[1mdiff --git a/sites/all/modules/contrib/media/css/media.css b/sites/all/modules/contrib/media/css/media.css[m
[1mdeleted file mode 100644[m
[1mindex 38e2e15..0000000[m
[1m--- a/sites/all/modules/contrib/media/css/media.css[m
[1m+++ /dev/null[m
[36m@@ -1,150 +0,0 @@[m
[31m-/**[m
[31m- * @file[m
[31m- * Styles for the media library.[m
[31m- *[m
[31m- * The display and layout of the Media browser assumes Drupal's Seven theme as[m
[31m- * the theme active when this is displayed.[m
[31m- */[m
[31m-[m
[31m-/* jQuery UI Resets */[m
[31m-.ui-tabs {[m
[31m-  padding: 0;[m
[31m-}[m
[31m-[m
[31m-.ui-dialog.media-wrapper .ui-dialog-content {[m
[31m-  padding: 0;[m
[31m-}[m
[31m-[m
[31m-.ui-dialog.media-wrapper .ui-dialog-buttonpane {[m
[31m-  display: none;[m
[31m-}[m
[31m-[m
[31m-#media-browser-tabset .ui-widget-header {[m
[31m-  background: none;[m
[31m-}[m
[31m-[m
[31m-/* Remove the default border */[m
[31m-.ui-widget-content {[m
[31m-  border: none;[m
[31m-}[m
[31m-[m
[31m-/* *********************************************************** */[m
[31m-/* Browser layout themeing */[m
[31m-[m
[31m-/* Size the branding header appropriately */[m
[31m-#media-browser-tabset #branding {[m
[31m-  padding: 10px 10px 0px 10px;[m
[31m-}[m
[31m-[m
[31m-#media-browser-tabset #branding h1 {[m
[31m-  float: left;[m
[31m-  height: 16px;[m
[31m-  margin-top: 0px;[m
[31m-}[m
[31m-[m
[31m-/* Float the tabs right to keep the UI consistent across themes */[m
[31m-#media-tabs-wrapper {[m
[31m-  float: right;[m
[31m-}[m
[31m-[m
[31m-#media-browser-tabset ul.tabs {[m
[31m-  padding: 0;[m
[31m-  border: none;[m
[31m-}[m
[31m-[m
[31m-/* Reset the height to match the browser */[m
[31m-#media-browser-tabset ul.tabs.primary li a:link {[m
[31m-  font-weight: bold;[m
[31m-  margin-right: 0;[m
[31m-}[m
[31m-[m
[31m-/* *********************************************************** */[m
[31m-/* Media item display */[m
[31m-[m
[31m-.media-item {[m
[31m-  background: #eee;[m
[31m-  border: 1px solid #CCCCCC;[m
[31m-  box-shadow: inset 0 0 15px rgba(0,0,0,.1), inset 0 0 0 1px rgba(0,0,0,.05);[m
[31m-  display: inline-block;[m
[31m-  padding: 5px;[m
[31m-  position: relative;[m
[31m-}[m
[31m-[m
[31m-.media-item img {[m
[31m-  display: block;[m
[31m-}[m
[31m-[m
[31m-.media-item .label-wrapper {[m
[31m-  background: rgba(255,255,255,.8);[m
[31m-  bottom: 0;[m
[31m-  box-shadow: inset 0 0 0 1px rgba(0,0,0,.15);[m
[31m-  left: 0;[m
[31m-  max-height: 100%;[m
[31m-  overflow: hidden;[m
[31m-  position: absolute;[m
[31m-  right: 0;[m
[31m-  text-align: center;[m
[31m-  word-wrap: break-word;[m
[31m-}[m
[31m-[m
[31m-.media-item .label-wrapper label {[m
[31m-  font-size: 10px;[m
[31m-  padding: 5px 10px;[m
[31m-}[m
[31m-[m
[31m-/* Media item lists */[m
[31m-[m
[31m-#media-browser-library-list {[m
[31m-  margin: 0;[m
[31m-  padding: 0;[m
[31m-}[m
[31m-[m
[31m-.media-list-thumbnails li {[m
[31m-  float: left;[m
[31m-  list-style: none;[m
[31m-  margin: 0 10px 10px 0;[m
[31m-}[m
[31m-[m
[31m-.media-list-thumbnails li a {[m
[31m-  text-decoration: none;[m
[31m-}[m
[31m-[m
[31m-.media-list-thumbnails .media-item.selected {[m
[31m-  background: #F4ECC7;[m
[31m-  border-color: #058AC5;[m
[31m-}[m
[31m-[m
[31m-.media-list-thumbnails .media-item:hover {[m
[31m-  border-color: #058AC5;[m
[31m-  cursor: pointer;[m
[31m-}[m
[31m-[m
[31m-.media-list-thumbnails .media-item .label-wrapper label {[m
[31m-  color: #058AC5;[m
[31m-}[m
[31m-[m
[31m-.media-list-thumbnails .media-item .label-wrapper label:hover {[m
[31m-  cursor: pointer;[m
[31m-}[m
[31m-[m
[31m-.media-list-thumbnails .form-type-checkbox {[m
[31m-  bottom: 117px;[m
[31m-  left: 6px;[m
[31m-  margin: 0;[m
[31m-  padding: 0;[m
[31m-  position: relative;[m
[31m-}[m
[31m-[m
[31m-/* File field */[m
[31m-[m
[31m-.media-widget .preview {[m
[31m-  display: inline-block;[m
[31m-  margin-right: 10px;[m
[31m-  vertical-align: middle;[m
[31m-}[m
[31m-[m
[31m-/* Exposed filter field */[m
[31m-/* Use similar look and feel of a disabled field */[m
[31m-.media-ajaxing-disabled {[m
[31m-  background-color: #EBEBE4;[m
[31m-}[m
[1mdiff --git a/sites/all/modules/contrib/media/images/icons/default/application-octet-stream.png b/sites/all/modules/contrib/media/images/icons/default/application-octet-stream.png[m
[1mdeleted file mode 100644[m
[1mindex 0e6de2f..0000000[m
Binary files a/sites/all/modules/contrib/media/images/icons/default/application-octet-stream.png and /dev/null differ
[1mdiff --git a/sites/all/modules/contrib/media/images/icons/default/audio-mpeg.png b/sites/all/modules/contrib/media/images/icons/default/audio-mpeg.png[m
[1mdeleted file mode 100644[m
[1mindex b876398..0000000[m
Binary files a/sites/all/modules/contrib/media/images/icons/default/audio-mpeg.png and /dev/null differ
[1mdiff --git a/sites/all/modules/contrib/media/images/icons/default/audio-x-generic.png b/sites/all/modules/contrib/media/images/icons/default/audio-x-generic.png[m
[1mdeleted file mode 100644[m
[1mindex b876398..0000000[m
Binary files a/sites/all/modules/contrib/media/images/icons/default/audio-x-generic.png and /dev/null differ
[1mdiff --git a/sites/all/modules/contrib/media/images/icons/default/file-unknown.png b/sites/all/modules/contrib/media/images/icons/default/file-unknown.png[m
[1mdeleted file mode 100644[m
[1mindex 46125e7..0000000[m
Binary files a/sites/all/modules/contrib/media/images/icons/default/file-unknown.png and /dev/null differ
[1mdiff --git a/sites/all/modules/contrib/media/images/icons/default/image-x-generic.png b/sites/all/modules/contrib/media/images/icons/default/image-x-generic.png[m
[1mdeleted file mode 100644[m
[1mindex c50e3c7..0000000[m
Binary files a/sites/all/modules/contrib/media/images/icons/default/image-x-generic.png and /dev/null differ
[1mdiff --git a/sites/all/modules/contrib/media/images/icons/default/video-x-generic.png b/sites/all/modules/contrib/media/images/icons/default/video-x-generic.png[m
[1mdeleted file mode 100644[m
[1mindex 58add03..0000000[m
Binary files a/sites/all/modules/contrib/media/images/icons/default/video-x-generic.png and /dev/null differ
[1mdiff --git a/sites/all/modules/contrib/media/includes/MediaBrowserPlugin.inc b/sites/all/modules/contrib/media/includes/MediaBrowserPlugin.inc[m
[1mdeleted file mode 100644[m
[1mindex 807a4e4..0000000[m
[1m--- a/sites/all/modules/contrib/media/includes/MediaBrowserPlugin.inc[m
[1m+++ /dev/null[m
[36m@@ -1,86 +0,0 @@[m
[31m-<?php[m
[31m-[m
[31m-/**[m
[31m- * @file[m
[31m- * Definition of MediaBrowserPlugin.[m
[31m- */[m
[31m-[m
[31m-/**[m
[31m- * Defines a Media browser plugin base class.[m
[31m- *[m
[31m- * MediaBrowserPlugin implementations need to implement at least the[m
[31m- * view() method.[m
[31m- */[m
[31m-abstract class MediaBrowserPlugin implements MediaBrowserPluginInterface {[m
[31m-  /**[m
[31m-   * The plugin metadata array from hook_media_browser_plugin_info().[m
[31m-   *[m
[31m-   * @var array[m
[31m-   */[m
[31m-  protected $info;[m
[31m-[m
[31m-  /**[m
[31m-   * The parameters for the current media browser from[m
[31m-   * media_get_browser_params().[m
[31m-   *[m
[31m-   * @var array[m
[31m-   */[m
[31m-  protected $params;[m
[31m-[m
[31m-  /**[m
[31m-   * Implements MediaBrowserPluginInterface::__construct().[m
[31m-   */[m
[31m-  public function __construct($info, $params) {[m
[31m-    $this->info = $info;[m
[31m-    $this->params = $params;[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Implements MediaBrowserPluginInterface::access().[m
[31m-   */[m
[31m-  public function access($account = NULL) {[m
[31m-    // Backwards compatible support for 'access callback' definitions.[m
[31m-    if (isset($this->info['access callback'])) {[m
[31m-      $access_callback = $this->info['access callback'];[m
[31m-      $access_arguments = isset($this->info['access arguments']) ? $this->info['access arguments'] : array();[m
[31m-      return function_exists($access_callback) && call_user_func_array($access_callback, $access_arguments);[m
[31m-    }[m
[31m-[m
[31m-    return TRUE;[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Provide a render array to display the plugin in a media browser.[m
[31m-   *[m
[31m-   * This render array will be a jQuery tab in the media browser.[m
[31m-   *[m
[31m-   * Some elements are special:[m
[31m-   *  - #settings: Drupal.settings.media.browser.$key (where key is the array[m
[31m-   *    key).[m
[31m-   *  - #callback: If provided, will make the tab an "ajax" tab.[m
[31m-   *  - #title: If provided, will be used as the tab's title. Otherwise the[m
[31m-   *    'title' value from the plugin's hook_media_browser_plugin_info() will[m
[31m-   *    be used.[m
[31m-   *  - #weight: If provided, will be used to order the tabs between each other.[m
[31m-   *    A lower weight will be displayed first while a higher weight will be[m
[31m-   *    displayed later. If not provided, and there is a 'weight' value in the[m
[31m-   *    plugin's hook_media_browser_plugin_info() then it will be used,[m
[31m-   *    otherwise a default of 0 will be used.[m
[31m-   *  - form: If the plugin is to display a native Drupal form, then the output[m
[31m-   *    of drupal_get_form should be returned into the 'form' render key. If a[m
[31m-   *    form's callback isn't normally loaded, module_load_include() should be[m
[31m-   *    used to ensure that the form can be displayed.[m
[31m-   *[m
[31m-   * Example usage:[m
[31m-   * @code[m
[31m-   *   module_load_include('inc', 'mymodule', 'mymodule.pages');[m
[31m-   *   $build['#attached']['js'][] = drupal_get_path('module', 'mymodule') . '/js/mymodule.media.browser.js';[m
[31m-   *   $build['form'] = drupal_get_form('mymodule_media_form');[m
[31m-   *   return $build;[m
[31m-   * @endcode[m
[31m-   *[m
[31m-   * @return array[m
[31m-   *   Renderable array.[m
[31m-   */[m
[31m-  abstract public function view();[m
[31m-}[m
[1mdiff --git a/sites/all/modules/contrib/media/includes/MediaBrowserPluginInterface.inc b/sites/all/modules/contrib/media/includes/MediaBrowserPluginInterface.inc[m
[1mdeleted file mode 100644[m
[1mindex 3ff1134..0000000[m
[1m--- a/sites/all/modules/contrib/media/includes/MediaBrowserPluginInterface.inc[m
[1m+++ /dev/null[m
[36m@@ -1,44 +0,0 @@[m
[31m-<?php[m
[31m-[m
[31m-/**[m
[31m- * @file[m
[31m- * Definition of MediaBrowserPluginInterface.[m
[31m- */[m
[31m-[m
[31m-/**[m
[31m- * Defines a Media browser plugin.[m
[31m- *[m
[31m- * Extends the MediaBrowserPluginInterface with methods expected by all[m
[31m- * Media browser classes.[m
[31m- */[m
[31m-interface MediaBrowserPluginInterface {[m
[31m-  /**[m
[31m-   * Set up the plugin class.[m
[31m-   *[m
[31m-   * @param array $info[m
[31m-   *   An array of plugin info from hook_media_browser_plugin_info()[m
[31m-   *   implementations.[m
[31m-   * @param array $params[m
[31m-   *   An array of parameters which came in is $_GET['params']. The expected[m
[31m-   *   parameters are still being defined.[m
[31m-   *   - 'types': array of media types to support[m
[31m-   *   - 'multiselect': boolean; TRUE enables multiselect[m
[31m-   */[m
[31m-  public function __construct($info, $params);[m
[31m-[m
[31m-  /**[m
[31m-   * Check if a user can access this plugin.[m
[31m-   *[m
[31m-   * @param object $account[m
[31m-   *   An optional user account object from user_load(). Defaults to the current[m
[31m-   *   global user.[m
[31m-   *[m
[31m-   * @return bool[m
[31m-   *   TRUE if the user can access this plugin, or FALSE otherwise.[m
[31m-   */[m
[31m-  public function access($account = NULL);[m
[31m-[m
[31m-  // The view() method is an abstract function so it is defined in MediaBrowser[m
[31m-  // Plugin.[m
[31m-  // @todo public function view();[m
[31m-}[m
[1mdiff --git a/sites/all/modules/contrib/media/includes/MediaBrowserUpload.inc b/sites/all/modules/contrib/media/includes/MediaBrowserUpload.inc[m
[1mdeleted file mode 100644[m
[1mindex 57721cb..0000000[m
[1m--- a/sites/all/modules/contrib/media/includes/MediaBrowserUpload.inc[m
[1m+++ /dev/null[m
[36m@@ -1,32 +0,0 @@[m
[31m-<?php[m
[31m-[m
[31m-/**[m
[31m- * @file[m
[31m- * Definition of MediaBrowserUpload.[m
[31m- */[m
[31m-[m
[31m-/**[m
[31m- * Media browser plugin for showing the upload form.[m
[31m- *[m
[31m- * @deprecated[m
[31m- */[m
[31m-class MediaBrowserUpload extends MediaBrowserPlugin {[m
[31m-  /**[m
[31m-   * Implements MediaBrowserPluginInterface::access().[m
[31m-   */[m
[31m-  public function access($account = NULL) {[m
[31m-    return file_entity_access('create', NULL, $account);[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Implements MediaBrowserPlugin::view().[m
[31m-   */[m
[31m-  public function view() {[m
[31m-    module_load_include('inc', 'file_entity', 'file_entity.pages');[m
[31m-[m
[31m-    $build = array();[m
[31m-    $build['form'] = drupal_get_form('file_entity_add_upload', $this->params);[m
[31m-[m
[31m-    return $build;[m
[31m-  }[m
[31m-}[m
[1mdiff --git a/sites/all/modules/contrib/media/includes/MediaBrowserView.inc b/sites/all/modules/contrib/media/includes/MediaBrowserView.inc[m
[1mdeleted file mode 100644[m
[1mindex 0321a11..0000000[m
[1m--- a/sites/all/modules/contrib/media/includes/MediaBrowserView.inc[m
[1m+++ /dev/null[m
[36m@@ -1,56 +0,0 @@[m
[31m-<?php[m
[31m-[m
[31m-/**[m
[31m- * @file[m
[31m- * Definition of MediaBrowserView.[m
[31m- */[m
[31m-[m
[31m-/**[m
[31m- * Media browser plugin for displaying a specific view and display.[m
[31m- */[m
[31m-class MediaBrowserView extends MediaBrowserPlugin {[m
[31m-  /**[m
[31m-   * The view object from views_get_view() for this plugin.[m
[31m-   *[m
[31m-   * @var view[m
[31m-   */[m
[31m-  protected $view;[m
[31m-[m
[31m-  /**[m
[31m-   * Implements MediaBrowserPluginInterface::__construct().[m
[31m-   */[m
[31m-  public function __construct($info, $params) {[m
[31m-    parent::__construct($info, $params);[m
[31m-[m
[31m-    // Set up the view object with the proper display.[m
[31m-    if ($view = views_get_view($info['view_name'])) {[m
[31m-      $display_id = !empty($info['view_display_id']) ? $info['view_display_id'] : NULL;[m
[31m-      if ($view->set_display($display_id)) {[m
[31m-        $this->view = $view;[m
[31m-      }[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Implements MediaBrowserPluginInterface::access().[m
[31m-   */[m
[31m-  public function access($account = NULL) {[m
[31m-    return !empty($this->view) && $this->view->access($this->view->current_display, $account);[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Implements MediaBrowserPlugin::view().[m
[31m-   */[m
[31m-  public function view() {[m
[31m-    if (!empty($this->view)) {[m
[31m-      $build['#markup'] = $this->view->preview();[m
[31m-[m
[31m-      // Allow the View title to override the plugin title.[m
[31m-      if ($title = $this->view->get_title()) {[m
[31m-        $build['#title'] = $title;[m
[31m-      }[m
[31m-[m
[31m-      return $build;[m
[31m-    }[m
[31m-  }[m
[31m-}[m
[1mdiff --git a/sites/all/modules/contrib/media/includes/MediaEntityTranslationHandler.inc b/sites/all/modules/contrib/media/includes/MediaEntityTranslationHandler.inc[m
[1mdeleted file mode 100644[m
[1mindex 7543faa..0000000[m
[1m--- a/sites/all/modules/contrib/media/includes/MediaEntityTranslationHandler.inc[m
[1m+++ /dev/null[m
[36m@@ -1,68 +0,0 @@[m
[31m-<?php[m
[31m-[m
[31m-/**[m
[31m- * @file[m
[31m- * Media translation handler for the entity translation module.[m
[31m- */[m
[31m-[m
[31m-[m
[31m-/**[m
[31m- * Media translation handler.[m
[31m- */[m
[31m-class MediaEntityTranslationHandler extends EntityTranslationDefaultHandler {[m
[31m-[m
[31m-  /**[m
[31m-   * Constructor function.[m
[31m-   */[m
[31m-  public function __construct($entity_type, $entity_info, $entity) {[m
[31m-    parent::__construct('file', $entity_info, $entity);[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Entity form handler.[m
[31m-   *[m
[31m-   * @see EntityTranslationDefaultHandler::entityForm()[m
[31m-   */[m
[31m-  public function entityForm(&$form, &$form_state) {[m
[31m-    parent::entityForm($form, $form_state);[m
[31m-[m
[31m-    if (isset($form['actions']['delete_translation'])) {[m
[31m-      $form['actions']['delete_translation']['#weight'] = 10;[m
[31m-    }[m
[31m-[m
[31m-    // The "Source language" element is unsupported on modal forms.[m
[31m-    if (!empty($form_state['ajax'])) {[m
[31m-      $form['source_language']['#access'] = FALSE;[m
[31m-    }[m
[31m-[m
[31m-    if ($this->getPathScheme() == 'media') {[m
[31m-      $language = $GLOBALS[LANGUAGE_TYPE_CONTENT];[m
[31m-      $form_langcode = $this->getFormLanguage();[m
[31m-      $source_langcode = $this->getSourceLanguage();[m
[31m-      $translations = $this->getTranslations();[m
[31m-[m
[31m-      // If a translation in the current content language is missing we display[m
[31m-      // a link to create it, unless we are not already doing it.[m
[31m-      if ($language->language != $form_langcode && empty($source_langcode) && !isset($translations->data[$language->language])) {[m
[31m-        $link = array([m
[31m-          'title' => t('Add @language translation', array('@language' => $language->name)),[m
[31m-          'href' => $this->getEditPath() . '/add/' . $form_langcode . '/' . $language->language,[m
[31m-          'localized_options' => array('attributes' => array('class' => array('ctools-use-modal'))),[m
[31m-        );[m
[31m-        $form['media_add_translation'] = array([m
[31m-          '#theme' => 'menu_local_action',[m
[31m-          '#link' => $link,[m
[31m-          '#weight' => -110,[m
[31m-          '#prefix' => '<ul class="action-links">',[m
[31m-          '#suffix' => '</ul>',[m
[31m-        );[m
[31m-      }[m
[31m-[m
[31m-      // Hide unsupported elements.[m
[31m-      $form['source_language']['#access'] = FALSE;[m
[31m-      if (isset($form['actions']['delete_translation'])) {[m
[31m-        $form['actions']['delete_translation']['#access'] = FALSE;[m
[31m-      }[m
[31m-    }[m
[31m-  }[m
[31m-}[m
[1mdiff --git a/sites/all/modules/contrib/media/includes/MediaReadOnlyStreamWrapper.inc b/sites/all/modules/contrib/media/includes/MediaReadOnlyStreamWrapper.inc[m
[1mdeleted file mode 100644[m
[1mindex ee051fd..0000000[m
[1m--- a/sites/all/modules/contrib/media/includes/MediaReadOnlyStreamWrapper.inc[m
[1m+++ /dev/null[m
[36m@@ -1,476 +0,0 @@[m
[31m-<?php[m
[31m-[m
[31m-/**[m
[31m- * @file[m
[31m- * Implements a base class for Resource Stream Wrappers.[m
[31m- */[m
[31m-[m
[31m-/**[m
[31m- * A base class for Resource Stream Wrappers.[m
[31m- *[m
[31m- * This class provides a complete stream wrapper implementation. It passes[m
[31m- * incoming  URL's through an interpolation method then recursively calls[m
[31m- * the invoking PHP filesystem function.[m
[31m- *[m
[31m- * MediaReadOnlyStreamWrapper implementations need to override at least the[m
[31m- * interpolateUrl method to rewrite the URL before is it passed back into the[m
[31m- * calling function.[m
[31m- */[m
[31m-abstract class MediaReadOnlyStreamWrapper implements DrupalStreamWrapperInterface {[m
[31m-  protected $parameters = array();[m
[31m-  protected $base_url = NULL;[m
[31m-  private $_DEBUG_MODE = NULL;[m
[31m-[m
[31m-  /**[m
[31m-   * Utility function to return paramenters.[m
[31m-   */[m
[31m-  public function get_parameters() {[m
[31m-    return $this->parameters;[m
[31m-  }[m
[31m-[m
[31m-  // As part of the inode protection mode returned by stat(), identifies the[m
[31m-  // file as a regular file, as opposed to a directory, symbolic link, or other[m
[31m-  // type of "file".[m
[31m-  // @see http://linux.die.net/man/2/stat[m
[31m-  const S_IFREG = 0100000;[m
[31m-[m
[31m-  /**[m
[31m-   * Template for stat calls.[m
[31m-   *[m
[31m-   * All elements must be initialized.[m
[31m-   */[m
[31m-  protected $_stat = array([m
[31m-    0 => 0, // Device number[m
[31m-    'dev' => 0,[m
[31m-    1 => 0, // Inode number[m
[31m-    'ino' => 0,[m
[31m-    // Inode protection mode. file_unmanaged_delete() requires is_file() to[m
[31m-    // return TRUE.[m
[31m-    2 => self::S_IFREG,[m
[31m-    'mode' => self::S_IFREG,[m
[31m-    3 => 0, // Number of links.[m
[31m-    'nlink' => 0,[m
[31m-    4 => 0, // Userid of owner.[m
[31m-    'uid' => 0,[m
[31m-    5 => 0, // Groupid of owner.[m
[31m-    'gid' => 0,[m
[31m-    6 => -1, // Device type, if inode device *[m
[31m-    'rdev' => -1,[m
[31m-    7 => 0, // Size in bytes.[m
[31m-    'size' => 0,[m
[31m-    8 => 0, // Time of last access (Unix timestamp).[m
[31m-    'atime' => 0,[m
[31m-    9 => 0, // Time of last modification (Unix timestamp).[m
[31m-    'mtime' => 0,[m
[31m-    10 => 0, // Time of last inode change (Unix timestamp).[m
[31m-    'ctime' => 0,[m
[31m-    11 => -1, // Blocksize of filesystem IO.[m
[31m-    'blksize' => -1,[m
[31m-    12 => -1, // Number of blocks allocated.[m
[31m-    'blocks' => -1,[m
[31m-  );[m
[31m-[m
[31m-  /**[m
[31m-   * Handles parameters on the URL string.[m
[31m-   */[m
[31m-  public function interpolateUrl() {[m
[31m-    if ($parameters = $this->get_parameters()) {[m
[31m-      return $this->base_url . '?' . http_build_query($parameters);[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Returns a web accessible URL for the resource.[m
[31m-   *[m
[31m-   * This function should return a URL that can be embedded in a web page[m
[31m-   * and accessed from a browser. For example, the external URL of[m
[31m-   * "youtube://xIpLd0WQKCY" might be[m
[31m-   * "http://www.youtube.com/watch?v=xIpLd0WQKCY".[m
[31m-   *[m
[31m-   * @return string[m
[31m-   *   Returns a string containing a web accessible URL for the resource.[m
[31m-   */[m
[31m-  public function getExternalUrl() {[m
[31m-    return $this->interpolateUrl();[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Base implementation of getMimeType().[m
[31m-   */[m
[31m-  public static function getMimeType($uri, $mapping = NULL) {[m
[31m-    return 'application/octet-stream';[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Base implementation of realpath().[m
[31m-   */[m
[31m-  public function realpath() {[m
[31m-    return $this->getExternalUrl();[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Stream context resource.[m
[31m-   *[m
[31m-   * @var Resource[m
[31m-   */[m
[31m-  public $context;[m
[31m-[m
[31m-  /**[m
[31m-   * A generic resource handle.[m
[31m-   *[m
[31m-   * @var Resource[m
[31m-   */[m
[31m-  public $handle = NULL;[m
[31m-[m
[31m-  /**[m
[31m-   * Instance URI (stream).[m
[31m-   *[m
[31m-   * A stream is referenced as "scheme://target".[m
[31m-   *[m
[31m-   * @var String[m
[31m-   */[m
[31m-  protected $uri;[m
[31m-[m
[31m-  /**[m
[31m-   * Base implementation of setUri().[m
[31m-   */[m
[31m-  public function setUri($uri) {[m
[31m-    $this->uri = $uri;[m
[31m-    $this->parameters = $this->_parse_url($uri);[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Base implementation of getUri().[m
[31m-   */[m
[31m-  public function getUri() {[m
[31m-    return $this->uri;[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Report an error.[m
[31m-   *[m
[31m-   * @param string $message[m
[31m-   *   The untranslated string to report.[m
[31m-   * @param array $options[m
[31m-   *   An optional array of options to send to t().[m
[31m-   * @param bool $display[m
[31m-   *   If TRUE, then we display the error to the user.[m
[31m-   *[m
[31m-   * @return bool[m
[31m-   *   We return FALSE, since we sometimes pass that back from the reporting[m
[31m-   *   function.[m
[31m-   */[m
[31m-  private function _report_error($message, $options = array(), $display = FALSE) {[m
[31m-    watchdog('resource', $message, $options, WATCHDOG_ERROR);[m
[31m-    if ($display) {[m
[31m-      drupal_set_message(t($message, $options), 'error');[m
[31m-    }[m
[31m-    return FALSE;[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Sets the debug mode.[m
[31m-   */[m
[31m-  private function _debug($message, $type = 'status') {[m
[31m-    if ($this->_DEBUG_MODE) {[m
[31m-      drupal_set_message($message, $type);[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Returns an array of any parameters stored in the URL's path.[m
[31m-   *[m
[31m-   * @param string $url[m
[31m-   *   The URL to parse, such as youtube://v/[video-code]/t/[tags+more-tags].[m
[31m-   *[m
[31m-   * @return array[m
[31m-   *   An associative array of all the parameters in the path,[m
[31m-   *   or FALSE if the $url is ill-formed.[m
[31m-   */[m
[31m-  protected function _parse_url($url) {[m
[31m-    $path = explode('://', $url);[m
[31m-    $parts = explode('/', $path[1]);[m
[31m-    $params = array();[m
[31m-    $count = 0;[m
[31m-    $total = count($parts);[m
[31m-    if (!$total || ($total % 2)) {[m
[31m-      // If we have no parts, or an odd number of parts, it's malformed.[m
[31m-      return FALSE;[m
[31m-    }[m
[31m-    while ($count < $total) {[m
[31m-      // We iterate count for each step of the assignment to keep us honest.[m
[31m-      $params[$parts[$count++]] = $parts[$count++];[m
[31m-    }[m
[31m-    return $params;[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Support for fopen(), file_get_contents(), file_put_contents() etc.[m
[31m-   *[m
[31m-   * @param string $url[m
[31m-   *   A string containing the path to the file to open.[m
[31m-   * @param string $mode[m
[31m-   *   The file mode ("r", "wb" etc.).[m
[31m-   * @param bitmask $options[m
[31m-   *   A bit mask of STREAM_USE_PATH and STREAM_REPORT_ERRORS.[m
[31m-   * @param string &$opened_url[m
[31m-   *   A string containing the path actually opened.[m
[31m-   *[m
[31m-   * @return bool[m
[31m-   *   TRUE if file was opened successfully.[m
[31m-   */[m
[31m-  public function stream_open($url, $mode, $options, &$opened_url) {[m
[31m-    $this->_debug(t('Stream open: %url', array('%url' => $url)));[m
[31m-[m
[31m-    // We only handle Read-Only mode by default.[m
[31m-    if ($mode != 'r' && $mode != 'rb') {[m
[31m-      return $this->_report_error('Attempted to open %url as mode: %mode.', array('%url' => $url, '%mode' => $mode), ($options & STREAM_REPORT_ERRORS));[m
[31m-    }[m
[31m-[m
[31m-    // We parse a URL as youtube://v/dsyiufo34/t/cats+dogs to store[m
[31m-    // the relevant code(s) in our private array of parameters.[m
[31m-    $this->parameters = $this->_parse_url($url);[m
[31m-[m
[31m-    if ($this->parameters === FALSE) {[m
[31m-      return $this->_report_error('Attempted to parse an ill-formed url: %url.', array('%url' => $url), ($options & STREAM_REPORT_ERRORS));[m
[31m-    }[m
[31m-[m
[31m-    if ((bool) $this->parameters && ($options & STREAM_USE_PATH)) {[m
[31m-      $opened_url = $url;[m
[31m-    }[m
[31m-[m
[31m-    $this->_debug(t('Stream opened: %parameters', array('%parameters' => print_r($this->parameters, TRUE))));[m
[31m-[m
[31m-    return (bool) $this->parameters;[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Undocumented PHP stream wrapper method.[m
[31m-   */[m
[31m-  function stream_lock($operation) {[m
[31m-    return FALSE;[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Support for fread(), file_get_contents() etc.[m
[31m-   *[m
[31m-   * @param int $count[m
[31m-   *   Maximum number of bytes to be read.[m
[31m-   *[m
[31m-   * @return bool[m
[31m-   *   The string that was read, or FALSE in case of an error.[m
[31m-   */[m
[31m-  public function stream_read($count) {[m
[31m-    return FALSE;[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Support for fwrite(), file_put_contents() etc.[m
[31m-   *[m
[31m-   * Since this is a read only stream wrapper this always returns false.[m
[31m-   *[m
[31m-   * @param string $data[m
[31m-   *   The string to be written.[m
[31m-   *[m
[31m-   * @return bool[m
[31m-   *   Returns FALSE.[m
[31m-   */[m
[31m-  public function stream_write($data) {[m
[31m-    return FALSE;[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Support for feof().[m
[31m-   *[m
[31m-   * @return bool[m
[31m-   *   TRUE if end-of-file has been reached.[m
[31m-   */[m
[31m-  public function stream_eof() {[m
[31m-    return FALSE;[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Support for fseek().[m
[31m-   *[m
[31m-   * @todo document why this returns false.[m
[31m-   *[m
[31m-   * @param int $offset[m
[31m-   *   The byte offset to got to.[m
[31m-   * @param string $whence[m
[31m-   *   SEEK_SET, SEEK_CUR, or SEEK_END.[m
[31m-   *[m
[31m-   * @return bool[m
[31m-   *   TRUE on success[m
[31m-   */[m
[31m-  public function stream_seek($offset, $whence) {[m
[31m-    return FALSE;[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Support for fflush().[m
[31m-   *[m
[31m-   * @todo document why this returns false.[m
[31m-   *[m
[31m-   * @return bool[m
[31m-   *   TRUE if data was successfully stored (or there was no data to store).[m
[31m-   */[m
[31m-  public function stream_flush() {[m
[31m-    return FALSE;[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Support for ftell().[m
[31m-   *[m
[31m-   * @todo document why this returns false.[m
[31m-   *[m
[31m-   * @return bool[m
[31m-   *   The current offset in bytes from the beginning of file.[m
[31m-   */[m
[31m-  public function stream_tell() {[m
[31m-    return FALSE;[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Support for fstat().[m
[31m-   *[m
[31m-   * @return array[m
[31m-   *   An array with file status, or FALSE in case of an error - see fstat()[m
[31m-   *   for a description of this array.[m
[31m-   */[m
[31m-  public function stream_stat() {[m
[31m-    return $this->_stat;[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Support for fclose().[m
[31m-   *[m
[31m-   * @todo document why this returns TRUE.[m
[31m-   *[m
[31m-   * @return bool[m
[31m-   *   TRUE if stream was successfully closed.[m
[31m-   */[m
[31m-  public function stream_close() {[m
[31m-    return TRUE;[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Support for stat().[m
[31m-   *[m
[31m-   * @param string $url[m
[31m-   *   A string containing the url to get information about.[m
[31m-   * @param bitmask $flags[m
[31m-   *   A bit mask of STREAM_URL_STAT_LINK and STREAM_URL_STAT_QUIET.[m
[31m-   *[m
[31m-   * @return array[m
[31m-   *   An array with file status, or FALSE in case of an error - see fstat()[m
[31m-   *   for a description of this array.[m
[31m-   */[m
[31m-  public function url_stat($url, $flags) {[m
[31m-    return $this->stream_stat();[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Support for opendir().[m
[31m-   *[m
[31m-   * @param string $url[m
[31m-   *   A string containing the url to the directory to open.[m
[31m-   * @param int $options[m
[31m-   *   Whether or not to enforce safe_mode (0x04).[m
[31m-   *[m
[31m-   * @return bool[m
[31m-   *   TRUE on success.[m
[31m-   */[m
[31m-  public function dir_opendir($url, $options) {[m
[31m-    return FALSE;[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Support for readdir().[m
[31m-   *[m
[31m-   * @return bool[m
[31m-   *   The next filename, or FALSE if there are no more files in the directory.[m
[31m-   */[m
[31m-  public function dir_readdir() {[m
[31m-    return FALSE;[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Support for rewinddir().[m
[31m-   *[m
[31m-   * @return bool[m
[31m-   *   TRUE on success.[m
[31m-   */[m
[31m-  public function dir_rewinddir() {[m
[31m-    return FALSE;[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Support for closedir().[m
[31m-   *[m
[31m-   * @return bool[m
[31m-   *   TRUE on success.[m
[31m-   */[m
[31m-  public function dir_closedir() {[m
[31m-    return FALSE;[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Undocumented.[m
[31m-   *[m
[31m-   * @todo document.[m
[31m-   */[m
[31m-  public function getDirectoryPath() {[m
[31m-    return '';[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * DrupalStreamWrapperInterface requires that these methods be implemented,[m
[31m-   * but none of them apply to a read-only stream wrapper. On failure they[m
[31m-   * are expected to return FALSE.[m
[31m-   */[m
[31m-[m
[31m-  /**[m
[31m-   * Implements DrupalStreamWrapperInterface::unlink().[m
[31m-   */[m
[31m-  public function unlink($uri) {[m
[31m-    // Although the remote file itself can't be deleted, return TRUE so that[m
[31m-    // file_delete() can remove the file record from the Drupal database.[m
[31m-    return TRUE;[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Implements DrupalStreamWrapperInterface::rename().[m
[31m-   */[m
[31m-  public function rename($from_uri, $to_uri) {[m
[31m-    return FALSE;[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Implements DrupalStreamWrapperInterface::mkdir().[m
[31m-   */[m
[31m-  public function mkdir($uri, $mode, $options) {[m
[31m-    return FALSE;[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Implements DrupalStreamWrapperInterface::rmdir().[m
[31m-   */[m
[31m-  public function rmdir($uri, $options) {[m
[31m-    return FALSE;[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Implements DrupalStreamWrapperInterface::chmod().[m
[31m-   */[m
[31m-  public function chmod($mode) {[m
[31m-    return FALSE;[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Implements DrupalStreamWrapperInterface::dirname().[m
[31m-   */[m
[31m-  public function dirname($uri = NULL) {[m
[31m-    return FALSE;[m
[31m-  }[m
[31m-[m
[31m-}[m
[1mdiff --git a/sites/all/modules/contrib/media/includes/media.admin.inc b/sites/all/modules/contrib/media/includes/media.admin.inc[m
[1mdeleted file mode 100644[m
[1mindex 9cc9fa1..0000000[m
[1m--- a/sites/all/modules/contrib/media/includes/media.admin.inc[m
[1m+++ /dev/null[m
[36m@@ -1,136 +0,0 @@[m
[31m-<?php[m
[31m-[m
[31m-/**[m
[31m- * @file[m
[31m- * Administration page callbacks for the Media module.[m
[31m- */[m
[31m-[m
[31m-/**[m
[31m- * Displays the media administration page.[m
[31m- */[m
[31m-function media_admin_config_browser($form, &$form_state) {[m
[31m-  $theme_options = array();[m
[31m-  $theme_options[NULL] = t('Default administration theme');[m
[31m-[m
[31m-  foreach (list_themes() as $key => $theme) {[m
[31m-    if ($theme->status) {[m
[31m-      $theme_options[$key] = $theme->info['name'];[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  $form['media_dialog_theme'] = array([m
[31m-    '#type' => 'select',[m
[31m-    '#title' => t('Media browser theme'),[m
[31m-    '#options' => $theme_options,[m
[31m-    '#description' => t("This theme will be used for all media related dialogs. It can be different from your site's theme because many site themes do not work well in the small windows which media uses."),[m
[31m-    '#default_value' => variable_get('media_dialog_theme', ''),[m
[31m-  );[m
[31m-[m
[31m-  $form['array_filter'] = array([m
[31m-    '#type' => 'value',[m
[31m-    '#value' => TRUE,[m
[31m-  );[m
[31m-[m
[31m-  $form['mediapopup'] = array([m
[31m-    '#type' => 'fieldset',[m
[31m-    '#title' => t('Media Popup'),[m
[31m-    '#collapsible' => TRUE,[m
[31m-    '#collapsed' => TRUE,[m
[31m-  );[m
[31m-  $form['mediapopup']['media_dialogclass'] = array([m
[31m-    '#type' => 'textfield',[m
[31m-    '#title' => t('Dialog Class'),[m
[31m-    '#default_value' => variable_get('media_dialogclass', 'media-wrapper'),[m
[31m-    '#description' => t('The class used to identify the popup wrapper element.'),[m
[31m-  );[m
[31m-  $form['mediapopup']['media_modal'] = array([m
[31m-    '#type' => 'select',[m
[31m-    '#title' => t('Modal'),[m
[31m-    '#options' => array([m
[31m-      FALSE => t('False'),[m
[31m-      TRUE => t('True'),[m
[31m-    ),[m
[31m-    '#default_value' => variable_get('media_modal', TRUE),[m
[31m-    '#description' => t('Open as modal window.'),[m
[31m-  );[m
[31m-  $form['mediapopup']['media_draggable'] = array([m
[31m-    '#type' => 'select',[m
[31m-    '#title' => t('Draggable'),[m
[31m-    '#options' => array([m
[31m-      FALSE => t('False'),[m
[31m-      TRUE => t('True'),[m
[31m-    ),[m
[31m-    '#default_value' => variable_get('media_draggable', FALSE),[m
[31m-    '#description' => t('Draggable modal window.'),[m
[31m-  );[m
[31m-  $form['mediapopup']['media_resizable'] = array([m
[31m-    '#type' => 'select',[m
[31m-    '#title' => t('Resizable'),[m
[31m-    '#options' => array([m
[31m-      FALSE => t('False'),[m
[31m-      TRUE => t('True'),[m
[31m-    ),[m
[31m-    '#default_value' => variable_get('media_resizable', FALSE),[m
[31m-    '#description' => t('Resizable modal window.'),[m
[31m-  );[m
[31m-  $form['mediapopup']['media_minwidth'] = array([m
[31m-    '#type' => 'textfield',[m
[31m-    '#title' => t('Min Width'),[m
[31m-    '#default_value' => variable_get('media_minwidth', 500),[m
[31m-    '#description' => t('CSS property min-width.'),[m
[31m-  );[m
[31m-  $form['mediapopup']['media_width'] = array([m
[31m-    '#type' => 'textfield',[m
[31m-    '#title' => t('Width'),[m
[31m-    '#default_value' => variable_get('media_width', 670),[m
[31m-    '#description' => t('CSS property width.'),[m
[31m-  );[m
[31m-  $form['mediapopup']['media_height'] = array([m
[31m-    '#type' => 'textfield',[m
[31m-    '#title' => t('Height'),[m
[31m-    '#default_value' => variable_get('media_height', 280),[m
[31m-    '#description' => t('CSS property height.'),[m
[31m-  );[m
[31m-  $form['mediapopup']['media_position'] = array([m
[31m-    '#type' => 'textfield',[m
[31m-    '#title' => t('Position'),[m
[31m-    '#default_value' => variable_get('media_position', 'center'),[m
[31m-    '#description' => t('CSS property position.'),[m
[31m-  );[m
[31m-  $form['mediapopup']['media_zindex'] = array([m
[31m-    '#type' => 'textfield',[m
[31m-    '#title' => t('Z-Index'),[m
[31m-    '#default_value' => variable_get('media_zindex', 10000),[m
[31m-    '#description' => t('CSS property z-index.'),[m
[31m-  );[m
[31m-  $form['mediapopup']['overlay'] = array([m
[31m-    '#type' => 'fieldset',[m
[31m-    '#title' => t('Overlay'),[m
[31m-  );[m
[31m-  $form['mediapopup']['overlay']['media_backgroundcolor'] = array([m
[31m-    '#type' => 'textfield',[m
[31m-    '#title' => t('Background Color'),[m
[31m-    '#default_value' => variable_get('media_backgroundcolor', '#000000'),[m
[31m-    '#description' => t('CSS property background-color; used with overlay.'),[m
[31m-  );[m
[31m-  $form['mediapopup']['overlay']['media_opacity'] = array([m
[31m-    '#type' => 'textfield',[m
[31m-    '#title' => t('Opacity'),[m
[31m-    '#default_value' => variable_get('media_opacity', 0.4),[m
[31m-    '#description' => t('CSS property opacity; used with overlay.'),[m
[31m-  );[m
[31m-[m
[31m-  $form['#submit'][] = 'media_admin_config_browser_pre_submit';[m
[31m-[m
[31m-  return system_settings_form($form);[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Form submission handler for media_admin_config_browser().[m
[31m- */[m
[31m-function media_admin_config_browser_pre_submit(&$form, &$form_state) {[m
[31m-  if (!$form_state['values']['media_dialog_theme']) {[m
[31m-    variable_del('media_dialog_theme');[m
[31m-    unset($form_state['values']['media_dialog_theme']);[m
[31m-  }[m
[31m-}[m
[1mdiff --git a/sites/all/modules/contrib/media/includes/media.browser.inc b/sites/all/modules/contrib/media/includes/media.browser.inc[m
[1mdeleted file mode 100644[m
[1mindex f410f9a..0000000[m
[1m--- a/sites/all/modules/contrib/media/includes/media.browser.inc[m
[1m+++ /dev/null[m
[36m@@ -1,254 +0,0 @@[m
[31m-<?php[m
[31m-[m
[31m-/**[m
[31m- * @file[m
[31m- * Summon plugins and render the media browser.[m
[31m- */[m
[31m-[m
[31m-/**[m
[31m- * Media browser page callback.[m
[31m- */[m
[31m-function media_browser($selected = NULL) {[m
[31m-  $output = array();[m
[31m-  $output['#attached']['library'][] = array('media', 'media_browser_page');[m
[31m-[m
[31m-  $params = media_get_browser_params();[m
[31m-[m
[31m-  // If we just did a multiple upload, do the multiform file edit. The flag that[m
[31m-  // tells us that we need to do this is $params['render_multi_edit_form'].[m
[31m-  if (variable_get('media_bulk_upload_edit', TRUE) && isset($params['render_multi_edit_form']) && isset($params['fid']) && module_exists('media_bulk_upload')) {[m
[31m-    module_load_include('inc', 'media_bulk_upload', 'includes/media_bulk_upload.pages');[m
[31m-    $files = file_load_multiple($params['fid']);[m
[31m-    $multi_edit_form = media_bulk_upload_file_page_edit_multiple($files);[m
[31m-    $multi_edit_form['buttons']['cancel']['#access'] = FALSE;[m
[31m-    return $multi_edit_form;[m
[31m-  }[m
[31m-[m
[31m-  // If one or more files have been selected, the browser interaction is now[m
[31m-  // complete. Return empty page content to the dialog which now needs to close,[m
[31m-  // but populate Drupal.settings with information about the selected files.[m
[31m-  if (isset($params['fid'])) {[m
[31m-    $fids = is_array($params['fid']) ? $params['fid'] : array($params['fid']);[m
[31m-    if (!is_numeric($fids[0])) {[m
[31m-      throw new Exception('Error selecting media, fid param is not an fid or an array of fids');[m
[31m-    }[m
[31m-    $files = file_load_multiple($fids);[m
[31m-    foreach ($files as $file) {[m
[31m-      $view_mode = isset($params['view_mode']) ? $params['view_mode'] : 'preview';[m
[31m-      media_browser_build_media_item($file, $view_mode);[m
[31m-    }[m
[31m-    $setting = array('media' => array('selectedMedia' => array_values($files)));[m
[31m-    drupal_add_js($setting, 'setting');[m
[31m-    return $output;[m
[31m-  }[m
[31m-[m
[31m-  $plugins = media_get_browser_plugin_info();[m
[31m-[m
[31m-  // Allow parameters to provide a list of enabled or disabled media browser[m
[31m-  // plugins.[m
[31m-  if (!empty($params['enabledPlugins'])) {[m
[31m-    $plugins = array_intersect_key($plugins, array_fill_keys($params['enabledPlugins'], 1));[m
[31m-  }[m
[31m-  elseif (!empty($params['disabledPlugins'])) {[m
[31m-    $plugins = array_diff_key($plugins, array_fill_keys($params['disabledPlugins'], 1));[m
[31m-  }[m
[31m-[m
[31m-  // Render plugins.[m
[31m-  $plugin_output = array();[m
[31m-  foreach ($plugins as $key => $plugin_info) {[m
[31m-    // Support the old CTools style handler definition.[m
[31m-    if (!isset($plugin_info['class']) && !empty($plugin_info['handler'])) {[m
[31m-      if (is_string($plugin_info['handler'])) {[m
[31m-        $plugin_info['class'] = $plugin_info['handler'];[m
[31m-      }[m
[31m-      elseif (isset($plugin_info['handler']['class'])) {[m
[31m-        $plugin_info['class'] = $plugin_info['handler']['class'];[m
[31m-      }[m
[31m-    }[m
[31m-[m
[31m-    if (empty($plugin_info['class']) || !class_exists($plugin_info['class'])) {[m
[31m-      continue;[m
[31m-    }[m
[31m-[m
[31m-    $plugin = new $plugin_info['class']($plugin_info, $params);[m
[31m-    if ($plugin->access()) {[m
[31m-      $plugin_output[$key] = $plugin->view();[m
[31m-      if (!empty($plugin_output[$key]) && is_array($plugin_output[$key])) {[m
[31m-        $plugin_output[$key] += array([m
[31m-          '#title' => $plugin_info['title'],[m
[31m-          '#weight' => isset($plugin_info['weight']) ? $plugin_info['weight'] : 0,[m
[31m-        );[m
[31m-      }[m
[31m-      else {[m
[31m-        unset($plugin_output[$key]);[m
[31m-        continue;[m
[31m-      }[m
[31m-    }[m
[31m-    else {[m
[31m-      continue;[m
[31m-    }[m
[31m-[m
[31m-    // We need to ensure that a submit button is available on each tab. If the[m
[31m-    // plugin is not returning a form element we need to add a submit button.[m
[31m-    // This is a fairly broad assumption.[m
[31m-    if (empty($plugin_output[$key]['#form']) && !empty($plugin_output[$key]['#markup'])) {[m
[31m-      $fake_buttons = '<div class="form-actions form-wrapper">';[m
[31m-      $fake_buttons .= l(t('Submit'), '', array([m
[31m-        'attributes' => array([m
[31m-          'class' => array('button', 'button-yes', 'fake-submit', $key),[m
[31m-        ),[m
[31m-      ));[m
[31m-      $fake_buttons .= '</div>';[m
[31m-      $plugin_output[$key]['#markup'] .= $fake_buttons;[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  // Allow modules to change the tab names or whatever else they want to change[m
[31m-  // before we render.  Perhaps this should be an alter on the theming function[m
[31m-  // that we should write to be making the tabs.[m
[31m-  drupal_alter('media_browser_plugins', $plugin_output);[m
[31m-[m
[31m-  $tabs = array();[m
[31m-  $settings = array('media' => array('browser' => array()));[m
[31m-[m
[31m-  foreach (element_children($plugin_output, TRUE) as $key) {[m
[31m-    // Add any JavaScript settings from the browser tab.[m
[31m-    if (!empty($plugin_output[$key]['#settings'])) {[m
[31m-      $settings['media']['browser'][$key] = $plugin_output[$key]['#settings'];[m
[31m-    }[m
[31m-[m
[31m-    // If this is a "ajax" style tab, add the href, otherwise an id. jQuery UI[m
[31m-    // will use an href value to load content from that url[m
[31m-    $tabid = 'media-tab-' . check_plain($key);[m
[31m-    if (!empty($plugin_output[$key]['#callback'])) {[m
[31m-      $href = $plugin_output[$key]['#callback'];[m
[31m-    }[m
[31m-    else {[m
[31m-      $attributes = array([m
[31m-        'class' => array('media-browser-tab'),[m
[31m-        'id' => $tabid,[m
[31m-        'data-tabid' => $key,[m
[31m-      );[m
[31m-      // Create a div for each tab's content.[m
[31m-      $plugin_output[$key] += array([m
[31m-        '#prefix' => '<div '. drupal_attributes($attributes) . ">\n",[m
[31m-        '#suffix' => "</div>\n",[m
[31m-      );[m
[31m-    }[m
[31m-[m
[31m-    $attributes = array([m
[31m-      'href' => '#' . $tabid,[m
[31m-      'data-tabid' => $key,[m
[31m-      'title' => $plugin_output[$key]['#title'],[m
[31m-    );[m
[31m-    $tabs[]['element'] = array([m
[31m-      '#markup' => '<li><a' . drupal_attributes($attributes) . '>' . check_plain($plugin_output[$key]['#title']) . "</a></li>\n",[m
[31m-    );[m
[31m-  }[m
[31m-[m
[31m-  drupal_add_js($settings, 'setting');[m
[31m-[m
[31m-  $output['tabset']['tabs'] = array([m
[31m-    '#theme' => 'menu_local_tasks',[m
[31m-    '#attributes' => array('class' => array('tabs', 'primary')),[m
[31m-    '#primary' => $tabs,[m
[31m-  );[m
[31m-[m
[31m-  $output['tabset']['panes'] = $plugin_output;[m
[31m-[m
[31m-  return $output;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Menu callback for testing the media browser.[m
[31m- */[m
[31m-function media_browser_testbed($form) {[m
[31m-  $form['#attached']['library'][] = array('media', 'media_browser');[m
[31m-  $form['#attached']['library'][] = array('media', 'media_browser_settings');[m
[31m-[m
[31m-  $form['test_element'] = array([m
[31m-    '#type' => 'media',[m
[31m-    '#media_options' => array([m
[31m-      'global' => array([m
[31m-        'types' => array('video', 'audio'),[m
[31m-      ),[m
[31m-    ),[m
[31m-  );[m
[31m-[m
[31m-  $launcher = '<a href="#" id="launcher"> Launch Media Browser</a>';[m
[31m-[m
[31m-  $form['options'] = array([m
[31m-    '#type' => 'textarea',[m
[31m-    '#title' => 'Options (JSON)',[m
[31m-    '#rows' => 10,[m
[31m-  );[m
[31m-[m
[31m-  $form['launcher'] = array([m
[31m-    '#markup' => $launcher,[m
[31m-  );[m
[31m-[m
[31m-  $form['result'] = array([m
[31m-    '#type' => 'textarea',[m
[31m-    '#title' => 'Result',[m
[31m-  );[m
[31m-[m
[31m-  $js = <<<EOF[m
[31m-    Drupal.behaviors.mediaTest = {[m
[31m-    attach: function(context, settings) {[m
[31m-      var delim = "---";[m
[31m-      var recentOptions = [];[m
[31m-      var recentOptionsCookie = jQuery.cookie("recentOptions");[m
[31m-      if (recentOptionsCookie) {[m
[31m-        recentOptions = recentOptionsCookie.split("---");[m
[31m-      }[m
[31m-[m
[31m-      var recentSelectBox = jQuery('<select id="recent_options" style="width:100%"></select>').change(function() { jQuery('#edit-options').val(jQuery(this).val())});[m
[31m-[m
[31m-      jQuery('.form-item-options').append('<label for="recent_options">Recent</a>');[m
[31m-      jQuery('.form-item-options').append(recentSelectBox);[m
[31m-      jQuery('.form-item-options').append(jQuery('<a href="#">Reset</a>').click(function() {alert('reset'); jQuery.cookie("recentOptions", null); window.location.reload(); }));[m
[31m-[m
[31m-      jQuery.each(recentOptions, function (idx, val) {[m
[31m-        recentSelectBox.append(jQuery('<option></option>').val(val).html(val));[m
[31m-      });[m
[31m-[m
[31m-[m
[31m-      jQuery('#launcher').click(function () {[m
[31m-        jQuery('#edit-result').val('');[m
[31m-        var options = {};[m
[31m-        var optionsTxt = jQuery('#edit-options').val();[m
[31m-        if (optionsTxt) {[m
[31m-          // Store it in the recent box[m
[31m-          recentOptionsCookie += "---" + optionsTxt[m
[31m-          jQuery.cookie("recentOptions", recentOptionsCookie, { expires: 7 });[m
[31m-          recentSelectBox.append(jQuery('<option></option>').val(optionsTxt).html(optionsTxt));[m
[31m-          options = eval('(' + optionsTxt + ')');[m
[31m-        }[m
[31m-        Drupal.media.popups.mediaBrowser(Drupal.behaviors.mediaTest.mediaSelected, options);[m
[31m-        return false;[m
[31m-      });[m
[31m-    },[m
[31m-[m
[31m-    mediaSelected: function(selectedMedia) {[m
[31m-      var result = JSON.stringify(selectedMedia);[m
[31m-        jQuery('#edit-result').val(result);[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-EOF;[m
[31m-[m
[31m-  drupal_add_js($js, array('type' => 'inline'));[m
[31m-  return $form;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Adds additional properties to a file which are needed by the browser JS code.[m
[31m- *[m
[31m- * @param object $file[m
[31m- *   A Drupal file object.[m
[31m- */[m
[31m-function media_browser_build_media_item($file, $view_mode = 'preview') {[m
[31m-  $preview = media_get_thumbnail_preview($file, NULL, $view_mode);[m
[31m-  $file->preview = drupal_render($preview);[m
[31m-  $file->url = file_create_url($file->uri);[m
[31m-}[m
[1mdiff --git a/sites/all/modules/contrib/media/includes/media.fields.inc b/sites/all/modules/contrib/media/includes/media.fields.inc[m
[1mdeleted file mode 100644[m
[1mindex 9b608af..0000000[m
[1m--- a/sites/all/modules/contrib/media/includes/media.fields.inc[m
[1m+++ /dev/null[m
[36m@@ -1,658 +0,0 @@[m
[31m-<?php[m
[31m-[m
[31m-/**[m
[31m- * @file[m
[31m- * Provide the media selector widget and media field formatters to the Fields[m
[31m- * API.[m
[31m- */[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_field_widget_info().[m
[31m- */[m
[31m-function media_field_widget_info() {[m
[31m-  return array([m
[31m-    'media_generic' => array([m
[31m-      'label' => t('Media browser'),[m
[31m-      'field types' => array('file', 'image'),[m
[31m-      'settings' => array([m
[31m-        'allowed_types' => array([m
[31m-          'image' => 'image',[m
[31m-        ),[m
[31m-        'browser_plugins' => array(),[m
[31m-        'allowed_schemes' => array([m
[31m-          'public' => 'public',[m
[31m-        ),[m
[31m-      ),[m
[31m-      'behaviors' => array([m
[31m-        'multiple values' => FIELD_BEHAVIOR_CUSTOM,[m
[31m-        'default value' => FIELD_BEHAVIOR_NONE,[m
[31m-      ),[m
[31m-    ),[m
[31m-  );[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_field_widget_settings_form().[m
[31m- */[m
[31m-function media_field_widget_settings_form($field, $instance) {[m
[31m-  $widget = $instance['widget'];[m
[31m-  $settings = $widget['settings'];[m
[31m-[m
[31m-  $plugins = media_get_browser_plugin_info();[m
[31m-  $options = array();[m
[31m-  foreach ($plugins as $key => $plugin) {[m
[31m-    $options[$key] = check_plain($plugin['title']);[m
[31m-  }[m
[31m-[m
[31m-  $form['browser_plugins'] = array([m
[31m-    '#type' => 'checkboxes',[m
[31m-    '#title' => t('Enabled browser plugins'),[m
[31m-    '#options' => $options,[m
[31m-    '#default_value' => $settings['browser_plugins'],[m
[31m-    '#description' => t('Media browser plugins which are allowed for this field. If no plugins are selected, they will all be available.'),[m
[31m-  );[m
[31m-[m
[31m-  $form['allowed_types'] = array([m
[31m-    '#type' => 'checkboxes',[m
[31m-    '#title' => t('Allowed file types'),[m
[31m-    '#options' => file_entity_type_get_names(),[m
[31m-    '#default_value' => $settings['allowed_types'],[m
[31m-    '#description' => t('File types which are allowed for this field. If no file types are selected, they will all be available.'),[m
[31m-  );[m
[31m-[m
[31m-  $visible_steam_wrappers = file_get_stream_wrappers(STREAM_WRAPPERS_VISIBLE);[m
[31m-  $options = array();[m
[31m-  foreach ($visible_steam_wrappers as $scheme => $information) {[m
[31m-    $options[$scheme] = check_plain($information['name']);[m
[31m-  }[m
[31m-[m
[31m-  $form['allowed_schemes'] = array([m
[31m-    '#type' => 'checkboxes',[m
[31m-    '#title' => t('Allowed URI schemes'),[m
[31m-    '#options' => $options,[m
[31m-    '#default_value' => $settings['allowed_schemes'],[m
[31m-    '#description' => t('URI schemes which are allowed for this field. If no schemes are selected, they will all be available.'),[m
[31m-  );[m
[31m-[m
[31m-  return $form;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_field_widget_form().[m
[31m- */[m
[31m-function media_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {[m
[31m-  $defaults = array([m
[31m-    'fid' => 0,[m
[31m-    'display' => !empty($field['settings']['display_default']),[m
[31m-    'description' => '',[m
[31m-  );[m
[31m-[m
[31m-  // Load the items for form rebuilds from the field state as they might not be[m
[31m-  // in $form_state['values'] because of validation limitations. Also, they are[m
[31m-  // only passed in as $items when editing existing entities.[m
[31m-  $field_state = field_form_get_state($element['#field_parents'], $field['field_name'], $langcode, $form_state);[m
[31m-  if (isset($field_state['items'])) {[m
[31m-    $items = $field_state['items'];[m
[31m-  }[m
[31m-[m
[31m-  $field_settings = $instance['settings'];[m
[31m-  $widget_settings = $instance['widget']['settings'];[m
[31m-[m
[31m-  // Essentially we use the media type, extended with some enhancements.[m
[31m-  $element_info = element_info('media');[m
[31m-  $multiselect = ($field['cardinality'] > 1 || $field['cardinality'] == FIELD_CARDINALITY_UNLIMITED);[m
[31m-[m
[31m-  $element += array([m
[31m-    '#type' => 'media',[m
[31m-    '#value_callback' => 'media_field_widget_value',[m
[31m-    '#process' => array_merge($element_info['#process'], array('media_field_widget_process')),[m
[31m-    '#media_options' => array([m
[31m-      'global' => array([m
[31m-        'types' => array_filter($widget_settings['allowed_types']),[m
[31m-        'enabledPlugins' => array_filter($instance['widget']['settings']['browser_plugins']),[m
[31m-        'schemes' => array_filter($widget_settings['allowed_schemes']),[m
[31m-        'file_directory' => isset($field_settings['file_directory']) ? $field_settings['file_directory'] : '',[m
[31m-        'file_extensions' => isset($field_settings['file_extensions']) ? $field_settings['file_extensions'] : variable_get('file_entity_default_allowed_extensions', 'jpg jpeg gif png txt doc docx xls xlsx pdf ppt pptx pps ppsx odt ods odp mp3 mov mp4 m4a m4v mpeg avi ogg oga ogv weba webp webm'),[m
[31m-        'max_filesize' => isset($field_settings['max_filesize']) ? $field_settings['max_filesize'] : 0,[m
[31m-        'uri_scheme' => !empty($field['settings']['uri_scheme']) ? $field['settings']['uri_scheme'] : file_default_scheme(),[m
[31m-        'multiselect' => $multiselect,[m
[31m-      ),[m
[31m-    ),[m
[31m-    // Allows this field to return an array instead of a single value.[m
[31m-    '#extended' => TRUE,[m
[31m-  );[m
[31m-[m
[31m-  // If translation is enabled for the entity, store its form/source langcodes[m
[31m-  // on the elements for further usage in media_element_process().[m
[31m-  if (module_invoke('entity_translation', 'enabled', $element['#entity_type'], $element['#entity'])) {[m
[31m-    $translation_handler = entity_translation_get_handler($element['#entity_type'], $element['#entity']);[m
[31m-    $element['#media_parent_entity_form_langcode'] = $translation_handler->getFormLanguage();[m
[31m-    if ($source_langcode = $translation_handler->getSourceLanguage()) {[m
[31m-      $element['#media_parent_entity_source_langcode'] = $source_langcode;[m
[31m-    }[m
[31m-  }[m
[31m-  elseif (module_exists('translation') && $element['#entity_type'] == 'node' && translation_supported_type($element['#entity']->type)) {[m
[31m-    $element['#media_parent_entity_form_langcode'] = $element['#entity']->language;[m
[31m-    $element['#media_parent_entity_source_langcode'] = $element['#entity']->language;[m
[31m-  } elseif ($element['#entity_type'] == 'field_collection_item' && property_exists($form['#entity'], 'language')) {[m
[31m-    $element['#media_parent_entity_form_langcode'] = $form['#entity']->language;[m
[31m-  }[m
[31m-[m
[31m-  // Add image field specific validators.[m
[31m-  if ($field['type'] == 'image') {[m
[31m-    if ($field_settings['min_resolution'] || $field_settings['max_resolution']) {[m
[31m-      $element['#media_options']['global']['min_resolution'] = $field_settings['min_resolution'];[m
[31m-      $element['#media_options']['global']['max_resolution'] = $field_settings['max_resolution'];[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  if ($field['cardinality'] == 1) {[m
[31m-    // Set the default value.[m
[31m-    $element['#default_value'] = !empty($items) ? $items[0] : $defaults;[m
[31m-    // If there's only one field, return it as delta 0.[m
[31m-    if (empty($element['#default_value']['fid'])) {[m
[31m-      $element['#description'] = theme('media_upload_help', array('description' => $element['#description']));[m
[31m-    }[m
[31m-    $elements = array($element);[m
[31m-  }[m
[31m-  else {[m
[31m-    // If there are multiple values, add an element for each existing one.[m
[31m-    foreach ($items as $item) {[m
[31m-      $elements[$delta] = $element;[m
[31m-      $elements[$delta]['#default_value'] = $item;[m
[31m-      $elements[$delta]['#weight'] = $delta;[m
[31m-      $delta++;[m
[31m-    }[m
[31m-    // And then add one more empty row for new uploads except when this is a[m
[31m-    // programmed form as it is not necessary.[m
[31m-    if (($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED || $delta < $field['cardinality']) && empty($form_state['programmed'])) {[m
[31m-      $elements[$delta] = $element;[m
[31m-      $elements[$delta]['#default_value'] = $defaults;[m
[31m-      $elements[$delta]['#weight'] = $delta;[m
[31m-      $elements[$delta]['#required'] = ($element['#required'] && $delta == 0);[m
[31m-    }[m
[31m-    // The group of elements all-together need some extra functionality[m
[31m-    // after building up the full list (like draggable table rows).[m
[31m-    $elements['#file_upload_delta'] = $delta;[m
[31m-    $elements['#theme'] = 'media_widget_multiple';[m
[31m-    $elements['#theme_wrappers'] = array('fieldset');[m
[31m-    $elements['#process'] = array('media_field_widget_process_multiple');[m
[31m-    $elements['#title'] = $element['#title'];[m
[31m-    $elements['#description'] = $element['#description'];[m
[31m-    $elements['#field_name'] = $element['#field_name'];[m
[31m-    $elements['#language'] = $element['#language'];[m
[31m-    $elements['#display_field'] = intval(!empty($field['settings']['display_field']));[m
[31m-[m
[31m-    // Add some properties that will eventually be added to the media upload[m
[31m-    // field. These are added here so that they may be referenced easily through[m
[31m-    // a hook_form_alter().[m
[31m-    $elements['#file_upload_title'] = t('Attach media');[m
[31m-    $elements['#file_upload_description'] = theme('media_upload_help', array('description' => ''));[m
[31m-  }[m
[31m-[m
[31m-  return $elements;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * The #value_callback for the media field element.[m
[31m- */[m
[31m-function media_field_widget_value($element, $input = FALSE, $form_state) {[m
[31m-  if ($input) {[m
[31m-    // Checkboxes lose their value when empty.[m
[31m-    // If the display field is present make sure its unchecked value is saved.[m
[31m-    $field = field_widget_field($element, $form_state);[m
[31m-    if (empty($input['display'])) {[m
[31m-      $input['display'] = intval(empty($field['settings']['display_field']));[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  // We depend on the media element to handle uploads.[m
[31m-  $return = media_file_value($element, $input, $form_state);[m
[31m-[m
[31m-  // Ensure that all the required properties are returned even if empty.[m
[31m-  $return += array([m
[31m-    'fid' => 0,[m
[31m-    'display' => 1,[m
[31m-    'description' => '',[m
[31m-  );[m
[31m-[m
[31m-  return $return;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * An element #process callback for the media field type.[m
[31m- *[m
[31m- * Expands the media type to include the description and display fields.[m
[31m- */[m
[31m-function media_field_widget_process($element, &$form_state, $form) {[m
[31m-  $item = $element['#value'];[m
[31m-  $item['fid'] = $element['fid']['#value'];[m
[31m-[m
[31m-  $field = field_widget_field($element, $form_state);[m
[31m-  $instance = field_widget_instance($element, $form_state);[m
[31m-  $settings = $instance['widget']['settings'];[m
[31m-[m
[31m-  $element['#theme'] = 'media_widget';[m
[31m-[m
[31m-  // Add the display field if enabled.[m
[31m-  if (!empty($field['settings']['display_field']) && $item['fid']) {[m
[31m-    $element['display'] = array([m
[31m-      '#type' => empty($item['fid']) ? 'hidden' : 'checkbox',[m
[31m-      '#title' => t('Include file in display'),[m
[31m-      '#value' => isset($item['display']) ? $item['display'] : $field['settings']['display_default'],[m
[31m-      '#attributes' => array('class' => array('file-display')),[m
[31m-    );[m
[31m-  }[m
[31m-  else {[m
[31m-    $element['display'] = array([m
[31m-      '#type' => 'hidden',[m
[31m-      '#value' => '1',[m
[31m-    );[m
[31m-  }[m
[31m-[m
[31m-  // Add the description field if enabled.[m
[31m-  if (!empty($instance['settings']['description_field']) && $item['fid']) {[m
[31m-    $element['description'] = array([m
[31m-      '#type' => variable_get('file_description_type', 'textfield'),[m
[31m-      '#title' => t('Description'),[m
[31m-      '#value' => isset($item['description']) ? $item['description'] : '',[m
[31m-      '#maxlength' => variable_get('file_description_length', 128),[m
[31m-      '#description' => t('The description may be used as the label of the link to the file.'),[m
[31m-    );[m
[31m-  }[m
[31m-[m
[31m-  // Adjust the Ajax settings so that on upload and remove of any individual[m
[31m-  // file, the entire group of file fields is updated together.[m
[31m-  if ($field['cardinality'] != 1) {[m
[31m-    $parents = array_slice($element['#array_parents'], 0, -1);[m
[31m-    $new_path = 'media/ajax/' . implode('/', $parents) . '/' . $form['form_build_id']['#value'];[m
[31m-    $field_element = drupal_array_get_nested_value($form, $parents);[m
[31m-    $new_wrapper = $field_element['#id'] . '-ajax-wrapper';[m
[31m-    foreach (element_children($element) as $key) {[m
[31m-      if (isset($element[$key]['#ajax'])) {[m
[31m-        $element[$key]['#ajax']['path'] = $new_path;[m
[31m-        $element[$key]['#ajax']['wrapper'] = $new_wrapper;[m
[31m-      }[m
[31m-    }[m
[31m-    unset($element['#prefix'], $element['#suffix']);[m
[31m-  }[m
[31m-[m
[31m-  // Add another submit handler to the upload and remove buttons, to implement[m
[31m-  // functionality needed by the field widget. This submit handler, along with[m
[31m-  // the rebuild logic in media_field_widget_form() requires the entire field,[m
[31m-  // not just the individual item, to be valid.[m
[31m-  foreach (array('attach_button', 'remove_button') as $key) {[m
[31m-    $element[$key]['#submit'][] = 'media_field_widget_submit';[m
[31m-    $element[$key]['#limit_validation_errors'] = array(array_slice($element['#parents'], 0, -1));[m
[31m-  }[m
[31m-[m
[31m-  return $element;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * An element #process callback for a group of media fields.[m
[31m- *[m
[31m- * Adds the weight field to each row so it can be ordered and adds a new Ajax[m
[31m- * wrapper around the entire group so it can be replaced all at once.[m
[31m- */[m
[31m-function media_field_widget_process_multiple($element, &$form_state, $form) {[m
[31m-    // In order to support multiple selection, we need to reconstruct the _POST[m
[31m-  // data that is checked in media_attach_file(). We need to reconstruct the[m
[31m-  // field's _POST key name, for example: field_mediafield_und_0.[m
[31m-  $upload_name_prefix = implode('_', $element['#parents']) . '_';[m
[31m-  $upload_name = $upload_name_prefix . $element['#file_upload_delta'];[m
[31m-  if (!empty($_POST['media'][$upload_name])) {[m
[31m-    $files = explode(',', $_POST['media'][$upload_name]);[m
[31m-    $count = count($files);[m
[31m-    // Supposing #file_upload_delta is always the last delta this will work[m
[31m-    for ($i = 0; $i < $count; $i++) {[m
[31m-      // For each file selected, increment the field key to be processed.[m
[31m-      // field_mediafield_und_0 becomes field_mediafield_und_1, etc.[m
[31m-      $_POST['media'][$upload_name_prefix . ($element['#file_upload_delta'] + $i)] = $files[$i];[m
[31m-      $element[] = $element[$element['#file_upload_delta']];[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  $element_children = element_children($element, TRUE);[m
[31m-  $count = count($element_children);[m
[31m-[m
[31m-  foreach ($element_children as $delta => $key) {[m
[31m-    if ($key != $element['#file_upload_delta']) {[m
[31m-      $description = _media_field_get_description_from_element($element[$key]);[m
[31m-      $element[$key]['_weight'] = array([m
[31m-        '#type' => 'weight',[m
[31m-        '#title' => $description ? t('Weight for @title', array('@title' => $description)) : t('Weight for new file'),[m
[31m-        '#title_display' => 'invisible',[m
[31m-        '#delta' => $count,[m
[31m-        '#default_value' => $delta,[m
[31m-      );[m
[31m-    }[m
[31m-    else {[m
[31m-      // The title needs to be assigned to the attach field so that validation[m
[31m-      // errors include the correct widget label.[m
[31m-      $element[$key]['#title'] = $element['#title'];[m
[31m-      $element[$key]['_weight'] = array([m
[31m-        '#type' => 'hidden',[m
[31m-        '#default_value' => $delta,[m
[31m-      );[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  // Add a new wrapper around all the elements for Ajax replacement.[m
[31m-  $element['#prefix'] = '<div id="' . $element['#id'] . '-ajax-wrapper">';[m
[31m-  $element['#suffix'] = '</div>';[m
[31m-[m
[31m-  return $element;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Retrieves the file description from a media field element.[m
[31m- *[m
[31m- * This helper function is used by media_field_widget_process_multiple().[m
[31m- *[m
[31m- * @param $element[m
[31m- *   The element being processed.[m
[31m- *[m
[31m- * @return[m
[31m- *   A description of the file suitable for use in the administrative interface.[m
[31m- */[m
[31m-function _media_field_get_description_from_element($element) {[m
[31m-  // Use the actual file description, if it's available.[m
[31m-  if (!empty($element['#default_value']['description'])) {[m
[31m-    return $element['#default_value']['description'];[m
[31m-  }[m
[31m-  // Otherwise, fall back to the filename.[m
[31m-  if (!empty($element['#default_value']['filename'])) {[m
[31m-    return $element['#default_value']['filename'];[m
[31m-  }[m
[31m-  // This is probably a newly uploaded file; no description is available.[m
[31m-  return FALSE;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Form submission handler for attach/remove button of media_field_widget_form().[m
[31m- *[m
[31m- * This runs in addition to and after media_field_widget_submit().[m
[31m- *[m
[31m- * @see media_field_widget_submit()[m
[31m- * @see media_field_widget_form()[m
[31m- * @see media_field_widget_process()[m
[31m- */[m
[31m-function media_field_widget_submit($form, &$form_state) {[m
[31m-  // During the form rebuild, media_field_widget_form() will create field item[m
[31m-  // widget elements using re-indexed deltas, so clear out $form_state['input'][m
[31m-  // to avoid a mismatch between old and new deltas. The rebuilt elements will[m
[31m-  // have #default_value set appropriately for the current state of the field,[m
[31m-  // so nothing is lost in doing this.[m
[31m-  $parents = array_slice($form_state['triggering_element']['#parents'], 0, -2);[m
[31m-  drupal_array_set_nested_value($form_state['input'], $parents, NULL);[m
[31m-[m
[31m-  $button = $form_state['triggering_element'];[m
[31m-[m
[31m-  // Go one level up in the form, to the widgets container.[m
[31m-  $element = drupal_array_get_nested_value($form, array_slice($button['#array_parents'], 0, -1));[m
[31m-  $field_name = $element['#field_name'];[m
[31m-  $langcode = $element['#language'];[m
[31m-  $parents = $element['#field_parents'];[m
[31m-[m
[31m-  $submitted_values = drupal_array_get_nested_value($form_state['values'], array_slice($button['#parents'], 0, -2));[m
[31m-  foreach ($submitted_values as $delta => $submitted_value) {[m
[31m-    if (!$submitted_value['fid']) {[m
[31m-      unset($submitted_values[$delta]);[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  // Re-index deltas after removing empty items.[m
[31m-  $submitted_values = array_values($submitted_values);[m
[31m-[m
[31m-  // Update form_state values.[m
[31m-  drupal_array_set_nested_value($form_state['values'], array_slice($button['#parents'], 0, -2), $submitted_values);[m
[31m-[m
[31m-  // Update items.[m
[31m-  $field_state = field_form_get_state($parents, $field_name, $langcode, $form_state);[m
[31m-  $field_state['items'] = $submitted_values;[m
[31m-  field_form_set_state($parents, $field_name, $langcode, $form_state, $field_state);[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Returns HTML for an individual media widget.[m
[31m- *[m
[31m- * @param $variables[m
[31m- *   An associative array containing:[m
[31m- *   - element: A render element representing the widget.[m
[31m- *[m
[31m- * @ingroup themeable[m
[31m- */[m
[31m-function theme_media_widget($variables) {[m
[31m-  $element = $variables['element'];[m
[31m-  $output = '';[m
[31m-[m
[31m-  // The "form-media" class is required for proper Ajax functionality.[m
[31m-  $output .= '<div class="media-widget form-media clearfix">';[m
[31m-  $output .= drupal_render_children($element);[m
[31m-  $output .= '</div>';[m
[31m-[m
[31m-  return $output;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Returns HTML for a group of media widgets.[m
[31m- *[m
[31m- * @param $variables[m
[31m- *   An associative array containing:[m
[31m- *   - element: A render element representing the widgets.[m
[31m- *[m
[31m- * @ingroup themeable[m
[31m- */[m
[31m-function theme_media_widget_multiple($variables) {[m
[31m-  $element = $variables['element'];[m
[31m-[m
[31m-  // Special ID and classes for draggable tables.[m
[31m-  $weight_class = $element['#id'] . '-weight';[m
[31m-  $table_id = $element['#id'] . '-table';[m
[31m-[m
[31m-  // Build up a table of applicable fields.[m
[31m-  $headers = array();[m
[31m-  $headers[] = t('File information');[m
[31m-  if ($element['#display_field']) {[m
[31m-    $headers[] = array([m
[31m-      'data' => t('Display'),[m
[31m-      'class' => array('checkbox'),[m
[31m-    );[m
[31m-  }[m
[31m-  $headers[] = t('Weight');[m
[31m-  $headers[] = t('Operations');[m
[31m-[m
[31m-  // Get our list of widgets in order (needed when the form comes back after[m
[31m-  // preview or failed validation).[m
[31m-  $widgets = array();[m
[31m-  foreach (element_children($element) as $key) {[m
[31m-    $widgets[] = &$element[$key];[m
[31m-  }[m
[31m-  usort($widgets, '_field_sort_items_value_helper');[m
[31m-[m
[31m-  $rows = array();[m
[31m-  foreach ($widgets as $key => &$widget) {[m
[31m-    // Save the uploading row for last.[m
[31m-    if ($widget['#file'] == FALSE) {[m
[31m-      $widget['#title'] = $element['#file_upload_title'];[m
[31m-      $widget['#description'] = $element['#file_upload_description'];[m
[31m-      continue;[m
[31m-    }[m
[31m-[m
[31m-    // Delay rendering of the buttons, so that they can be rendered later in the[m
[31m-    // "operations" column.[m
[31m-    $operations_elements = array();[m
[31m-    foreach (element_children($widget) as $sub_key) {[m
[31m-      if (isset($widget[$sub_key]['#type']) && ($widget[$sub_key]['#type'] == 'submit' || $widget[$sub_key]['#type'] == 'link')) {[m
[31m-        hide($widget[$sub_key]);[m
[31m-        $operations_elements[] = &$widget[$sub_key];[m
[31m-      }[m
[31m-    }[m
[31m-[m
[31m-    // Delay rendering of the "Display" option and the weight selector, so that[m
[31m-    // each can be rendered later in its own column.[m
[31m-    if ($element['#display_field']) {[m
[31m-      hide($widget['display']);[m
[31m-    }[m
[31m-    hide($widget['_weight']);[m
[31m-[m
[31m-    // Render everything else together in a column, without the normal wrappers.[m
[31m-    $widget['#theme_wrappers'] = array();[m
[31m-    $information = drupal_render($widget);[m
[31m-[m
[31m-    // Render the previously hidden elements, using render() instead of[m
[31m-    // drupal_render(), to undo the earlier hide().[m
[31m-    $operations = '';[m
[31m-    foreach ($operations_elements as $operation_element) {[m
[31m-      $operations .= render($operation_element);[m
[31m-    }[m
[31m-    $display = '';[m
[31m-    if ($element['#display_field']) {[m
[31m-      unset($widget['display']['#title']);[m
[31m-      $display = array([m
[31m-        'data' => render($widget['display']),[m
[31m-        'class' => array('checkbox'),[m
[31m-      );[m
[31m-    }[m
[31m-    $widget['_weight']['#attributes']['class'] = array($weight_class);[m
[31m-    $weight = render($widget['_weight']);[m
[31m-[m
[31m-    // Arrange the row with all of the rendered columns.[m
[31m-    $row = array();[m
[31m-    $row[] = $information;[m
[31m-    if ($element['#display_field']) {[m
[31m-      $row[] = $display;[m
[31m-    }[m
[31m-    $row[] = $weight;[m
[31m-    $row[] = $operations;[m
[31m-    $rows[] = array([m
[31m-      'data' => $row,[m
[31m-      'class' => isset($widget['#attributes']['class']) ? array_merge($widget['#attributes']['class'], array('draggable')) : array('draggable'),[m
[31m-    );[m
[31m-  }[m
[31m-[m
[31m-  drupal_add_tabledrag($table_id, 'order', 'sibling', $weight_class);[m
[31m-[m
[31m-  $output = '';[m
[31m-  $output = empty($rows) ? '' : theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => array('id' => $table_id)));[m
[31m-  $output .= drupal_render_children($element);[m
[31m-  return $output;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Returns HTML for help text.[m
[31m- *[m
[31m- * @param $variables[m
[31m- *   An associative array containing:[m
[31m- *   - description: The normal description for this field, specified by the[m
[31m- *     user.[m
[31m- *[m
[31m- * @ingroup themeable[m
[31m- */[m
[31m-function theme_media_upload_help($variables) {[m
[31m-  $description = $variables['description'];[m
[31m-[m
[31m-  $descriptions = array();[m
[31m-[m
[31m-  if (strlen($description)) {[m
[31m-    $descriptions[] = $description;[m
[31m-  }[m
[31m-[m
[31m-  return implode('<br />', $descriptions);[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_field_formatter_info().[m
[31m- *[m
[31m- * Provides legacy support for the "Large filetype icon" file field formatter.[m
[31m- * This was originally used when media entities contained file fields. The[m
[31m- * current file entity architecture no longer needs this, but people may[m
[31m- * have used this formatter for other file fields on their website.[m
[31m- *[m
[31m- * @todo Some day, remove this.[m
[31m- */[m
[31m-function media_field_formatter_info() {[m
[31m-  $formatters = array([m
[31m-    'media_large_icon' => array([m
[31m-      'label' => t('Large filetype icon'),[m
[31m-      'field types' => array('file'),[m
[31m-      'settings' => array([m
[31m-        'image_style' => '',[m
[31m-      ),[m
[31m-    ),[m
[31m-  );[m
[31m-[m
[31m-  return $formatters;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_field_formatter_settings_form().[m
[31m- *[m
[31m- * Legacy support for the "Large filetype icon" file field formatter.[m
[31m- * @see media_field_formatter_info()[m
[31m- */[m
[31m-function media_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {[m
[31m-  $display = $instance['display'][$view_mode];[m
[31m-  $settings = $display['settings'];[m
[31m-[m
[31m-  $image_styles = image_style_options(FALSE, PASS_THROUGH);[m
[31m-  $element['image_style'] = array([m
[31m-    '#title' => t('Image style'),[m
[31m-    '#type' => 'select',[m
[31m-    '#default_value' => $settings['image_style'],[m
[31m-    '#empty_option' => t('None (original image)'),[m
[31m-    '#options' => $image_styles,[m
[31m-  );[m
[31m-[m
[31m-  return $element;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_field_formatter_settings_summary().[m
[31m- *[m
[31m- * Legacy support for the "Large filetype icon" file field formatter.[m
[31m- * @see media_field_formatter_info()[m
[31m- */[m
[31m-function media_field_formatter_settings_summary($field, $instance, $view_mode) {[m
[31m-  $display = $instance['display'][$view_mode];[m
[31m-  $settings = $display['settings'];[m
[31m-[m
[31m-  $summary = array();[m
[31m-[m
[31m-  $image_styles = image_style_options(FALSE, PASS_THROUGH);[m
[31m-  // Unset possible 'No defined styles' option.[m
[31m-  unset($image_styles['']);[m
[31m-  // Styles could be lost because of enabled/disabled modules that defines[m
[31m-  // their styles in code.[m
[31m-  if (isset($image_styles[$settings['image_style']])) {[m
[31m-    $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));[m
[31m-  }[m
[31m-  else {[m
[31m-    $summary[] = t('Original image');[m
[31m-  }[m
[31m-[m
[31m-  return implode('<br />', $summary);[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_field_formatter_view().[m
[31m- *[m
[31m- * Legacy support for the "Large filetype icon" file field formatter.[m
[31m- * @see media_field_formatter_info()[m
[31m- */[m
[31m-function media_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {[m
[31m-  $element = array();[m
[31m-[m
[31m-  if ($display['type'] == 'media_large_icon') {[m
[31m-    foreach ($items as $delta => $item) {[m
[31m-      $element[$delta] = array([m
[31m-        '#theme' => 'media_formatter_large_icon',[m
[31m-        '#file' => (object) $item,[m
[31m-        '#style_name' => $display['settings']['image_style'],[m
[31m-      );[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  return $element;[m
[31m-}[m
[1mdiff --git a/sites/all/modules/contrib/media/includes/media.pages.inc b/sites/all/modules/contrib/media/includes/media.pages.inc[m
[1mdeleted file mode 100644[m
[1mindex 9bef54a..0000000[m
[1m--- a/sites/all/modules/contrib/media/includes/media.pages.inc[m
[1m+++ /dev/null[m
[36m@@ -1,56 +0,0 @@[m
[31m-<?php[m
[31m-[m
[31m-/**[m
[31m- * @file[m
[31m- * Common pages for the Media module.[m
[31m- */[m
[31m-[m
[31m-/**[m
[31m- * CTools modal callback for editing a file.[m
[31m- */[m
[31m-function media_file_edit_modal($form, &$form_state, $file, $js) {[m
[31m-  ctools_include('modal');[m
[31m-  ctools_include('ajax');[m
[31m-[m
[31m-  // If entity translation is enabled for the file entities and we have parent[m
[31m-  // entity form/source langcodes, use them for the currently edited file.[m
[31m-  if (!empty($_GET['media_parent_entity_form_langcode']) && is_string($_GET['media_parent_entity_form_langcode']) && module_invoke('entity_translation', 'enabled', 'file', $file)) {[m
[31m-    $languages = language_list();[m
[31m-    if (isset($languages[$_GET['media_parent_entity_form_langcode']])) {[m
[31m-      $langcode = $_GET['media_parent_entity_form_langcode'];[m
[31m-      $translation_handler = entity_translation_get_handler('file', $file);[m
[31m-      $translation_handler->setFormLanguage($langcode);[m
[31m-      $translations = $translation_handler->getTranslations();[m
[31m-      if (!isset($translations->data[$langcode])) {[m
[31m-        if (!empty($_GET['media_parent_entity_source_langcode']) && is_string($_GET['media_parent_entity_source_langcode']) && isset($translations->data[$_GET['media_parent_entity_source_langcode']])) {[m
[31m-          $source_langcode = $_GET['media_parent_entity_source_langcode'];[m
[31m-        }[m
[31m-        else {[m
[31m-          $source_langcode = $translation_handler->getLanguage();[m
[31m-        }[m
[31m-        $translation_handler->setSourceLanguage($source_langcode);[m
[31m-      }[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  $form_state['ajax'] = $js;[m
[31m-  form_load_include($form_state, 'inc', 'file_entity', 'file_entity.pages');[m
[31m-[m
[31m-  $output = ctools_modal_form_wrapper('file_entity_edit', $form_state);[m
[31m-[m
[31m-  if ($js) {[m
[31m-    $commands = $output;[m
[31m-[m
[31m-    if ($form_state['executed']) {[m
[31m-      $commands = array(ctools_modal_command_dismiss(t('File saved')));[m
[31m-      $preview = media_get_thumbnail_preview($file);[m
[31m-      $commands[] = ajax_command_replace('.media-item[data-fid=' . $file->fid . ']', render($preview));[m
[31m-    }[m
[31m-[m
[31m-    print ajax_render($commands);[m
[31m-    exit();[m
[31m-  }[m
[31m-[m
[31m-  // Otherwise, just return the output.[m
[31m-  return $output;[m
[31m-}[m
[1mdiff --git a/sites/all/modules/contrib/media/includes/media.theme.inc b/sites/all/modules/contrib/media/includes/media.theme.inc[m
[1mdeleted file mode 100644[m
[1mindex 2b57782..0000000[m
[1m--- a/sites/all/modules/contrib/media/includes/media.theme.inc[m
[1m+++ /dev/null[m
[36m@@ -1,102 +0,0 @@[m
[31m-<?php[m
[31m-[m
[31m-/**[m
[31m- * @file[m
[31m- * Media Theming[m
[31m- *[m
[31m- * Theming functions for the Media module.[m
[31m- */[m
[31m-[m
[31m-/**[m
[31m- * Adds a wrapper around a preview of a media file.[m
[31m- */[m
[31m-function theme_media_thumbnail($variables) {[m
[31m-  $label = '';[m
[31m-  $element = $variables['element'];[m
[31m-[m
[31m- // Wrappers to go around the thumbnail.[m
[31m-  $attributes = array([m
[31m-    'title' => $element['#name'],[m
[31m-    'class' => 'media-item',[m
[31m-    'data-fid' => $element['#file']->fid,[m
[31m-  );[m
[31m-  $prefix = '<div ' . drupal_attributes($attributes) . '><div class="media-thumbnail">';[m
[31m-  $suffix = '</div></div>';[m
[31m-[m
[31m-  // Arguments for the thumbnail link.[m
[31m-  $thumb = $element['#children'];[m
[31m-  if (file_entity_access('update', $element['#file'])) {[m
[31m-    $target = 'file/' . $element['#file']->fid . '/edit';[m
[31m-    $title = t('Click to edit details');[m
[31m-  }[m
[31m-  else {[m
[31m-    $target = 'file/' . $element['#file']->fid;[m
[31m-    $title = t('Click to view details');[m
[31m-  }[m
[31m-  $options = array([m
[31m-    'query' => drupal_get_destination(),[m
[31m-    'html' => TRUE,[m
[31m-    'attributes' => array('title' => $title),[m
[31m-  );[m
[31m-[m
[31m-  // Element should be a field renderable array. This should be improved.[m
[31m-  if (!empty($element['#show_names']) && $element['#name']) {[m
[31m-    $label = '<div class="label-wrapper"><label class="media-filename">' . $element['#name'] . '</label></div>';[m
[31m-  }[m
[31m-[m
[31m-  $output = $prefix;[m
[31m-  if (!empty($element['#add_link'])) {[m
[31m-    $output .= l($thumb, $target, $options);[m
[31m-  }[m
[31m-  else {[m
[31m-    $output .= $thumb;[m
[31m-  }[m
[31m-  $output .= $label . $suffix;[m
[31m-  return $output;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Preprocess the media thumbnail.[m
[31m- */[m
[31m-function template_preprocess_media_thumbnail(&$variables) {[m
[31m-  // Set the name for the thumbnail to be the filename.  This is done here so[m
[31m-  // that other modules can hijack the name displayed if it should not be the[m
[31m-  // filename.[m
[31m-  $variables['element']['#name'] = isset($variables['element']['#file']->filename) ? check_plain($variables['element']['#file']->filename) : NULL;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Field formatter for displaying a file as a large icon.[m
[31m- */[m
[31m-function theme_media_formatter_large_icon($variables) {[m
[31m-  $file = $variables['file'];[m
[31m-  $icon_dir = variable_get('media_icon_base_directory', 'public://media-icons') . '/' . variable_get('media_icon_set', 'default');[m
[31m-  $icon = file_icon_path($file, $icon_dir);[m
[31m-  $variables['path'] = $icon;[m
[31m-[m
[31m-  // theme_image() requires the 'alt' attribute passed as its own variable.[m
[31m-  // @see http://drupal.org/node/999338[m
[31m-  if (!isset($variables['alt']) && isset($variables['attributes']['alt'])) {[m
[31m-    $variables['alt'] = $variables['attributes']['alt'];[m
[31m-  }[m
[31m-[m
[31m-  // Add image height and width for the image theme functions.[m
[31m-  if ($info = image_get_info($icon)) {[m
[31m-    $variables += $info;[m
[31m-  }[m
[31m-[m
[31m-  if ($variables['style_name']) {[m
[31m-    $output = theme('image_style', $variables);[m
[31m-  }[m
[31m-  else {[m
[31m-    $output = theme('image', $variables);[m
[31m-  }[m
[31m-  return $output;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Add messages to the page.[m
[31m- */[m
[31m-function template_preprocess_media_dialog_page(&$variables) {[m
[31m-  $variables['messages'] = theme('status_messages');[m
[31m-}[m
[1mdiff --git a/sites/all/modules/contrib/media/includes/media_views_plugin_display_media_browser.inc b/sites/all/modules/contrib/media/includes/media_views_plugin_display_media_browser.inc[m
[1mdeleted file mode 100644[m
[1mindex eba27ba..0000000[m
[1m--- a/sites/all/modules/contrib/media/includes/media_views_plugin_display_media_browser.inc[m
[1m+++ /dev/null[m
[36m@@ -1,19 +0,0 @@[m
[31m-<?php[m
[31m-/**[m
[31m- * @file[m
[31m- * Contains the media browser tab display plugin.[m
[31m- */[m
[31m-[m
[31m-/**[m
[31m- * Display plugin to provide a view as a tab in the media browser.[m
[31m- *[m
[31m- * This is currently just a stub--there's nothing special we need to set up for[m
[31m- * rendering a view as a tab in the media browser. It would be possible to[m
[31m- * provide a special method that returns the plugin info for[m
[31m- * media_media_browser_plugin_info() and the render array for[m
[31m- * media_media_browser_plugin_view().[m
[31m- *[m
[31m- * @ingroup views_display_plugins[m
[31m- */[m
[31m-class media_views_plugin_display_media_browser extends views_plugin_display {[m
[31m-}[m
[1mdiff --git a/sites/all/modules/contrib/media/includes/media_views_plugin_style_media_browser.inc b/sites/all/modules/contrib/media/includes/media_views_plugin_style_media_browser.inc[m
[1mdeleted file mode 100644[m
[1mindex 4131116..0000000[m
[1m--- a/sites/all/modules/contrib/media/includes/media_views_plugin_style_media_browser.inc[m
[1m+++ /dev/null[m
[36m@@ -1,55 +0,0 @@[m
[31m-<?php[m
[31m-[m
[31m-/**[m
[31m- * @file[m
[31m- * The media browser style plugin.[m
[31m- */[m
[31m-[m
[31m-/**[m
[31m- * Media Views style plugin.[m
[31m- *[m
[31m- * Style plugin to render media items as an interactive grid for the media[m
[31m- * browser.[m
[31m- *[m
[31m- * @ingroup views_style_plugins[m
[31m- */[m
[31m-class media_views_plugin_style_media_browser extends views_plugin_style_list {[m
[31m-[m
[31m-  // Stores the files loaded with pre_render.[m
[31m-  public $files = array();[m
[31m-[m
[31m-  /**[m
[31m-   * Set default options.[m
[31m-   */[m
[31m-  function option_definition() {[m
[31m-    $options = parent::option_definition();[m
[31m-[m
[31m-    $options['type'] = array('default' => 'ul');[m
[31m-    $options['class'] = array('default' => 'media-list-thumbnails');[m
[31m-    $options['wrapper_class'] = array('default' => '');[m
[31m-[m
[31m-    return $options;[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Prevents a problem with views when get_row_class() is not set.[m
[31m-   */[m
[31m-  public function get_row_class($row_index) {[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Add the base field (fid) to the query.[m
[31m-   */[m
[31m-  public function query() {[m
[31m-    if (method_exists($this->view->query, 'add_field')) {[m
[31m-      // Normal file_managed based view.[m
[31m-      $this->view->query->add_field($this->view->base_table, $this->view->base_field);[m
[31m-    }[m
[31m-    if (method_exists($this->view->query, 'addField')) {[m
[31m-      // Search API based view.[m
[31m-      $this->view->query->addField('fid');[m
[31m-    }[m
[31m-    parent::query();[m
[31m-  }[m
[31m-[m
[31m-}[m
[1mdiff --git a/sites/all/modules/contrib/media/js/media.admin.js b/sites/all/modules/contrib/media/js/media.admin.js[m
[1mdeleted file mode 100644[m
[1mindex b82eb29..0000000[m
[1m--- a/sites/all/modules/contrib/media/js/media.admin.js[m
[1m+++ /dev/null[m
[36m@@ -1,77 +0,0 @@[m
[31m-/**[m
[31m- * @file[m
[31m- * Javascript for the interface at admin/content/media and also for interfaces[m
[31m- * related to setting up media fields and for media type administration.[m
[31m- *[m
[31m- * Basically, if it's on the /admin path, it's probably here.[m
[31m- */[m
[31m-[m
[31m-(function ($) {[m
[31m-[m
[31m-/**[m
[31m- * Functionality for the administrative file listings.[m
[31m- */[m
[31m-Drupal.behaviors.mediaAdmin = {[m
[31m-  attach: function (context) {[m
[31m-    // Show a JavaScript confirmation dialog if a user has files selected and[m
[31m-    // they try to switch between the "Thumbnail" and "List" local tasks.[m
[31m-    $('.tabs.secondary a').once('media-admin').bind('click', function () {[m
[31m-      if ($(':checkbox:checked', $('.file-entity-admin-file-form')).length != 0) {[m
[31m-        return confirm(Drupal.t('If you switch views, you will lose your selection.'));[m
[31m-      }[m
[31m-    });[m
[31m-[m
[31m-    if ($('.media-display-thumbnails').length && !$('.media-thumbnails-select').length) {[m
[31m-      // Implements 'select all/none' for thumbnail view.[m
[31m-      // @TODO: Support grabbing more than one page of thumbnails.[m
[31m-      var allLink = $('<a href="#">' + Drupal.t('all') + '</a>')[m
[31m-        .click(function () {[m
[31m-          $('.media-display-thumbnails', $(this).parents('form')).find(':checkbox').attr('checked', true).change();[m
[31m-          return false;[m
[31m-        });[m
[31m-      var noneLink = $('<a href="#">' + Drupal.t('none') + '</a>')[m
[31m-        .click(function () {[m
[31m-          $('.media-display-thumbnails', $(this).parents('form')).find(':checkbox').attr('checked', false).change();[m
[31m-          return false;[m
[31m-        });[m
[31m-      $('<div class="media-thumbnails-select" />')[m
[31m-        .append('<strong>' + Drupal.t('Select') + ':</strong> ')[m
[31m-        .append(allLink)[m
[31m-        .append(', ')[m
[31m-        .append(noneLink)[m
[31m-        .prependTo('.media-display-thumbnails')[m
[31m-      // If the media item is clicked anywhere other than on the image itself[m
[31m-      // check the checkbox. For the record, JS thinks this is wonky.[m
[31m-      $('.media-item').bind('click', function (e) {[m
[31m-        if ($(e.target).is('img, a')) {[m
[31m-          return;[m
[31m-        }[m
[31m-        var checkbox = $(this).parent().find(':checkbox');[m
[31m-        if (checkbox.is(':checked')) {[m
[31m-          checkbox.attr('checked', false).change();[m
[31m-        } else {[m
[31m-          checkbox.attr('checked', true).change();[m
[31m-        }[m
[31m-      });[m
[31m-[m
[31m-      // Add an extra class to selected thumbnails.[m
[31m-      $('.media-display-thumbnails :checkbox').each(function () {[m
[31m-        var checkbox = $(this);[m
[31m-        if (checkbox.is(':checked')) {[m
[31m-          $(checkbox.parents('li').find('.media-item')).addClass('selected');[m
[31m-        }[m
[31m-[m
[31m-        checkbox.bind('change.media', function () {[m
[31m-          if (checkbox.is(':checked')) {[m
[31m-            $(checkbox.parents('li').find('.media-item')).addClass('selected');[m
[31m-          }[m
[31m-          else {[m
[31m-            $(checkbox.parents('li').find('.media-item')).removeClass('selected');[m
[31m-          }[m
[31m-        });[m
[31m-      });[m
[31m-    }[m
[31m-  }[m
[31m-};[m
[31m-[m
[31m-})(jQuery);[m
[1mdiff --git a/sites/all/modules/contrib/media/js/media.browser.js b/sites/all/modules/contrib/media/js/media.browser.js[m
[1mdeleted file mode 100644[m
[1mindex bfd2fe0..0000000[m
[1m--- a/sites/all/modules/contrib/media/js/media.browser.js[m
[1m+++ /dev/null[m
[36m@@ -1,128 +0,0 @@[m
[31m-/**[m
[31m- * @file[m
[31m- * Provides default functions for the media browser[m
[31m- */[m
[31m-[m
[31m-(function ($) {[m
[31m-namespace('Drupal.media.browser');[m
[31m-[m
[31m-Drupal.media.browser.selectedMedia = [];[m
[31m-Drupal.media.browser.mediaAdded = function () {};[m
[31m-Drupal.media.browser.selectionFinalized = function (selectedMedia) {[m
[31m-  // This is intended to be overridden if a callee wants to be triggered[m
[31m-  // when the media selection is finalized from inside the browser.[m
[31m-  // This is used for the file upload form for instance.[m
[31m-};[m
[31m-[m
[31m-Drupal.behaviors.MediaBrowser = {[m
[31m-  attach: function (context) {[m
[31m-    if (Drupal.settings.media && Drupal.settings.media.selectedMedia) {[m
[31m-      Drupal.media.browser.selectMedia(Drupal.settings.media.selectedMedia);[m
[31m-      // Fire a confirmation of some sort.[m
[31m-      Drupal.media.browser.finalizeSelection();[m
[31m-    }[m
[31m-[m
[31m-    // Instantiate the tabs.[m
[31m-    var showFunc = function(event, ui) {[m
[31m-      // Store index of the tab being activated.[m
[31m-      if (parent_iframe = Drupal.media.browser.getParentIframe(window)) {[m
[31m-        $(parent_iframe).attr('current_tab', $('#media-tabs-wrapper > ul > li.ui-state-active').index());[m
[31m-      }[m
[31m-    };[m
[31m-[m
[31m-    var activeTab = Drupal.media.browser.tabFromHash();[m
[31m-[m
[31m-    $('#media-browser-tabset').once('MediaBrowser').tabs({[m
[31m-      selected: activeTab, // jquery < 1.9[m
[31m-      active: activeTab, // jquery >= 1.9[m
[31m-      show: showFunc, // jquery ui < 1.8[m
[31m-      activate: showFunc // jquery ui >= 1.8[m
[31m-    });[m
[31m-[m
[31m-    $('.media-browser-tab').each( Drupal.media.browser.validateButtons );[m
[31m-  }[m
[31m-  // Wait for additional params to be passed in.[m
[31m-};[m
[31m-[m
[31m-Drupal.media.browser.getParentIframe = function (window) {[m
[31m-  var arrFrames = parent.document.getElementsByTagName("IFRAME");[m
[31m-[m
[31m-  for (var i = 0; i < arrFrames.length; i++) {[m
[31m-    if (arrFrames[i].contentWindow === window) {[m
[31m-      return arrFrames[i];[m
[31m-    }[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Get index of the active tab from window.location.hash[m
[31m- */[m
[31m-Drupal.media.browser.tabFromHash = function () {[m
[31m-  if (parent_iframe = Drupal.media.browser.getParentIframe(window)) {[m
[31m-    return $(parent_iframe).attr('current_tab');[m
[31m-  }[m
[31m-[m
[31m-  return 0;[m
[31m-};[m
[31m-[m
[31m-Drupal.media.browser.launch = function () {[m
[31m-[m
[31m-};[m
[31m-[m
[31m-Drupal.media.browser.validateButtons = function() {[m
[31m-  // The media browser runs in an IFRAME. The Drupal.media.popups.mediaBrowser()[m
[31m-  // function sets up the IFRAME and an "OK" button that is outside of the[m
[31m-  // IFRAME, so that its click handlers can destroy the IFRAME while retaining[m
[31m-  // information about what media items were selected. However, Drupal UI[m
[31m-  // convention is to place all action buttons on the same "line" at the bottom[m
[31m-  // of the form, so if the form within the IFRAME contains a "Submit" button or[m
[31m-  // other action buttons, then the "OK" button will appear below the IFRAME[m
[31m-  // which breaks this convention and is confusing to the user. Therefore, we[m
[31m-  // add a "Submit" button inside the IFRAME, and have its click action trigger[m
[31m-  // the click action of the corresponding "OK" button that is outside the[m
[31m-  // IFRAME. media.css contains CSS rules that hide the outside buttons.[m
[31m-[m
[31m-  // If a submit button is present, another round-trip to the server is needed[m
[31m-  // before the user's selection is finalized. For these cases, when the form's[m
[31m-  // real Submit button is clicked, the server either returns another form for[m
[31m-  // the user to fill out, or else a completion page that contains or sets the[m
[31m-  // Drupal.media.browser.selectedMedia variable. If the latter, then[m
[31m-  // Drupal.media.popups.mediaBrowser.mediaBrowserOnLoad() auto-triggers the[m
[31m-  // "OK" button action to finalize the selection and remove the IFRAME.[m
[31m-[m
[31m-  // We need to check for the fake submit button that is used on non-form based[m
[31m-  // pane content. On these items we need to bind the clicks so that media can[m
[31m-  // be selected or the window can be closed. This is still a hacky approach,[m
[31m-  // but it is a step in the right direction.[m
[31m-[m
[31m-  $('a.button.fake-submit', this).once().bind('click', Drupal.media.browser.submit);[m
[31m-};[m
[31m-[m
[31m-Drupal.media.browser.submit = function () {[m
[31m-  // @see Drupal.media.browser.validateButtons().[m
[31m-  var buttons = $(parent.window.document.body).find('#mediaBrowser').parent('.ui-dialog').find('.ui-dialog-buttonpane button');[m
[31m-  buttons[0].click();[m
[31m-[m
[31m-  // Return false to prevent the fake link "click" from continuing.[m
[31m-  return false;[m
[31m-}[m
[31m-[m
[31m-Drupal.media.browser.selectMedia = function (selectedMedia) {[m
[31m-  Drupal.media.browser.selectedMedia = selectedMedia;[m
[31m-};[m
[31m-[m
[31m-Drupal.media.browser.selectMediaAndSubmit = function (selectedMedia) {[m
[31m-  Drupal.media.browser.selectedMedia = selectedMedia;[m
[31m-  Drupal.media.browser.submit();[m
[31m-};[m
[31m-[m
[31m-Drupal.media.browser.finalizeSelection = function () {[m
[31m-  if (!Drupal.media.browser.selectedMedia) {[m
[31m-    throw new exception(Drupal.t('Cannot continue, nothing selected'));[m
[31m-  }[m
[31m-  else {[m
[31m-    Drupal.media.browser.selectionFinalized(Drupal.media.browser.selectedMedia);[m
[31m-  }[m
[31m-};[m
[31m-[m
[31m-}(jQuery));[m
[1mdiff --git a/sites/all/modules/contrib/media/js/media.core.js b/sites/all/modules/contrib/media/js/media.core.js[m
[1mdeleted file mode 100644[m
[1mindex f22f1b7..0000000[m
[1m--- a/sites/all/modules/contrib/media/js/media.core.js[m
[1m+++ /dev/null[m
[36m@@ -1,21 +0,0 @@[m
[31m-/**[m
[31m- * Creates a namespace.[m
[31m- *[m
[31m- * @return[m
[31m- *   The created namespace object.[m
[31m- */[m
[31m-function namespace () {[m
[31m-  var a=arguments, o=null, i, j, d;[m
[31m-[m
[31m-  for (i=0; i<a.length; i=i+1) {[m
[31m-    d=a[i].split(".");[m
[31m-    o=window;[m
[31m-[m
[31m-    for (j=0; j<d.length; j=j+1) {[m
[31m-      o[d[j]]=o[d[j]] || {};[m
[31m-      o=o[d[j]];[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  return o;[m
[31m-};[m
[1mdiff --git a/sites/all/modules/contrib/media/js/media.js b/sites/all/modules/contrib/media/js/media.js[m
[1mdeleted file mode 100644[m
[1mindex 607cd3a..0000000[m
[1m--- a/sites/all/modules/contrib/media/js/media.js[m
[1m+++ /dev/null[m
[36m@@ -1,156 +0,0 @@[m
[31m-/**[m
[31m- * @file[m
[31m- * Provides JavaScript additions to the media field widget.[m
[31m- *[m
[31m- * This file provides support for launching the media browser to select existing[m
[31m- * files and disabling of other media fields during Ajax uploads (which prevents[m
[31m- * separate media fields from accidentally attaching files).[m
[31m- */[m
[31m-[m
[31m-(function ($) {[m
[31m-[m
[31m-/**[m
[31m- * Attach behaviors to media element upload fields.[m
[31m- */[m
[31m-Drupal.behaviors.mediaElement = {[m
[31m-  attach: function (context, settings) {[m
[31m-    var $context = $(context);[m
[31m-    var elements;[m
[31m-[m
[31m-    function initMediaBrowser(selector) {[m
[31m-      $context.find(selector)[m
[31m-        .once('media-browser-launch')[m
[31m-        .siblings('.browse').show()[m
[31m-        .siblings('.upload').hide()[m
[31m-        .siblings('.attach').hide()[m
[31m-        .siblings('.browse').bind('click', {configuration: settings.media.elements[selector]}, Drupal.media.openBrowser);[m
[31m-    }[m
[31m-[m
[31m-    if (settings.media && settings.media.elements) {[m
[31m-      elements = settings.media.elements;[m
[31m-      Object.keys(elements).forEach(initMediaBrowser);[m
[31m-    }[m
[31m-  },[m
[31m-  detach: function (context, settings, trigger) {[m
[31m-    var $context = $(context);[m
[31m-    var elements;[m
[31m-[m
[31m-    function removeMediaBrowser(selector) {[m
[31m-      $context.find(selector)[m
[31m-        .removeOnce('media-browser-launch')[m
[31m-        .siblings('.browse').hide()[m
[31m-        .siblings('.upload').show()[m
[31m-        .siblings('.attach').show()[m
[31m-        .siblings('.browse').unbind('click', Drupal.media.openBrowser);[m
[31m-    }[m
[31m-[m
[31m-    if (trigger === 'unload' && settings.media && settings.media.elements) {[m
[31m-      elements = settings.media.elements;[m
[31m-      Object.keys(elements).forEach(removeMediaBrowser);[m
[31m-    }[m
[31m-  }[m
[31m-};[m
[31m-[m
[31m-/**[m
[31m- * Attach behaviors to the media attach and remove buttons.[m
[31m- */[m
[31m-Drupal.behaviors.mediaButtons = {[m
[31m-  attach: function (context) {[m
[31m-    $('input.form-submit', context).bind('mousedown', Drupal.media.disableFields);[m
[31m-  },[m
[31m-  detach: function (context) {[m
[31m-    $('input.form-submit', context).unbind('mousedown', Drupal.media.disableFields);[m
[31m-  }[m
[31m-};[m
[31m-[m
[31m-/**[m
[31m- * Media attach utility functions.[m
[31m- */[m
[31m-Drupal.media = Drupal.media || {};[m
[31m-[m
[31m-/**[m
[31m- * Opens the media browser with the element's configuration settings.[m
[31m- */[m
[31m-Drupal.media.openBrowser = function (event) {[m
[31m-  var clickedButton = this;[m
[31m-  var configuration = event.data.configuration.global;[m
[31m-[m
[31m-  // Find the file ID, preview and upload fields.[m
[31m-  var fidField = $(this).siblings('.fid');[m
[31m-  var previewField = $(this).siblings('.preview');[m
[31m-  var uploadField = $(this).siblings('.upload');[m
[31m-[m
[31m-  // Find the edit and remove buttons.[m
[31m-  var editButton = $(this).siblings('.edit');[m
[31m-  var removeButton = $(this).siblings('.remove');[m
[31m-[m
[31m-  // Launch the media browser.[m
[31m-  Drupal.media.popups.mediaBrowser(function (mediaFiles) {[m
[31m-    // Ensure that there was at least one media file selected.[m
[31m-    if (mediaFiles.length < 0) {[m
[31m-      return;[m
[31m-    }[m
[31m-[m
[31m-    var mediaFileValue;[m
[31m-    // Process the value based on multiselect.[m
[31m-    if (mediaFiles.length > 1) {[m
[31m-      // Reverse array to have files in correct order[m
[31m-      mediaFiles.reverse();[m
[31m-      // Concatenate the array into a comma separated string.[m
[31m-      mediaFileValue = mediaFiles.map(function(file) {[m
[31m-        return file.fid;[m
[31m-      }).join(',');[m
[31m-    }[m
[31m-    else {[m
[31m-      // Grab the first of the selected media files.[m
[31m-      mediaFileValue = mediaFiles[0].fid;[m
[31m-[m
[31m-      // Display a preview of the file using the selected media file's display.[m
[31m-      previewField.html(mediaFileValue.preview);[m
[31m-    }[m
[31m-[m
[31m-    // Set the value of the hidden file ID field and trigger a change.[m
[31m-    uploadField.val(mediaFileValue);[m
[31m-    uploadField.trigger('change');[m
[31m-[m
[31m-    // Find the attach button and automatically trigger it.[m
[31m-    var attachButton = uploadField.siblings('.attach');[m
[31m-    attachButton.trigger('mousedown');[m
[31m-  }, configuration);[m
[31m-[m
[31m-  return false;[m
[31m-};[m
[31m-[m
[31m-/**[m
[31m- * Prevent media browsing when using buttons not intended to browse.[m
[31m- */[m
[31m-Drupal.media.disableFields = function (event) {[m
[31m-  var clickedButton = this;[m
[31m-[m
[31m-  // Only disable browse fields for Ajax buttons.[m
[31m-  if (!$(clickedButton).hasClass('ajax-processed')) {[m
[31m-    return;[m
[31m-  }[m
[31m-[m
[31m-  // Check if we're working with an "Attach" button.[m
[31m-  var $enabledFields = [];[m
[31m-  if ($(this).closest('div.media-widget').length > 0) {[m
[31m-    $enabledFields = $(this).closest('div.media-widget').find('input.attach');[m
[31m-  }[m
[31m-[m
[31m-  // Temporarily disable attach fields other than the one we're currently[m
[31m-  // working with. Filter out fields that are already disabled so that they[m
[31m-  // do not get enabled when we re-enable these fields at the end of behavior[m
[31m-  // processing. Re-enable in a setTimeout set to a relatively short amount[m
[31m-  // of time (1 second). All the other mousedown handlers (like Drupal's Ajax[m
[31m-  // behaviors) are excuted before any timeout functions are called, so we[m
[31m-  // don't have to worry about the fields being re-enabled too soon.[m
[31m-  // @todo If the previous sentence is true, why not set the timeout to 0?[m
[31m-  var $fieldsToTemporarilyDisable = $('div.media-widget input.attach').not($enabledFields).not(':disabled');[m
[31m-  $fieldsToTemporarilyDisable.attr('disabled', 'disabled');[m
[31m-  setTimeout(function (){[m
[31m-    $fieldsToTemporarilyDisable.attr('disabled', false);[m
[31m-  }, 1000);[m
[31m-};[m
[31m-[m
[31m-})(jQuery);[m
[1mdiff --git a/sites/all/modules/contrib/media/js/media.popups.js b/sites/all/modules/contrib/media/js/media.popups.js[m
[1mdeleted file mode 100644[m
[1mindex 2c8c775..0000000[m
[1m--- a/sites/all/modules/contrib/media/js/media.popups.js[m
[1m+++ /dev/null[m
[36m@@ -1,444 +0,0 @@[m
[31m-[m
[31m-/**[m
[31m- * @file: Popup dialog interfaces for the media project.[m
[31m- *[m
[31m- * Drupal.media.popups.mediaBrowser[m
[31m- *   Launches the media browser which allows users to pick a piece of media.[m
[31m- *[m
[31m- * Drupal.media.popups.mediaStyleSelector[m
[31m- *  Launches the style selection form where the user can choose what[m
[31m- *  format/style they want their media in.[m
[31m- */[m
[31m-[m
[31m-(function ($) {[m
[31m-namespace('Drupal.media.popups');[m
[31m-[m
[31m-/**[m
[31m- * Media browser popup. Creates a media browser dialog.[m
[31m- *[m
[31m- * @param {function}[m
[31m- *   onSelect Callback for when dialog is closed, received (Array media, Object[m
[31m- *   extra);[m
[31m- * @param {Object}[m
[31m- *   globalOptions Global options that will get passed upon initialization of[m
[31m- *   the browser. @see Drupal.media.popups.mediaBrowser.getDefaults();[m
[31m- * @param {Object}[m
[31m- *   pluginOptions Options for specific plugins. These are passed to the plugin[m
[31m- *   upon initialization.  If a function is passed here as a callback, it is[m
[31m- *   obviously not passed, but is accessible to the plugin in[m
[31m- *   Drupal.settings.variables. Example:[m
[31m- *   pluginOptions = {library: {url_include_patterns:'/foo/bar'}};[m
[31m- * @param {Object}[m
[31m- *   widgetOptions Options controlling the appearance and behavior of the modal[m
[31m- *   dialog. @see Drupal.media.popups.mediaBrowser.getDefaults();[m
[31m- */[m
[31m-Drupal.media.popups.mediaBrowser = function (onSelect, globalOptions, pluginOptions, widgetOptions) {[m
[31m-  // Get default dialog options.[m
[31m-  var options = Drupal.media.popups.mediaBrowser.getDefaults();[m
[31m-[m
[31m-  // Add global, plugin and widget options.[m
[31m-  options.global = $.extend({}, options.global, globalOptions);[m
[31m-  options.plugins = pluginOptions;[m
[31m-  options.widget = $.extend({}, options.widget, widgetOptions);[m
[31m-[m
[31m-  // Find the URL of the modal iFrame.[m
[31m-  var browserSrc = options.widget.src;[m
[31m-[m
[31m-  if ($.isArray(browserSrc) && browserSrc.length) {[m
[31m-    browserSrc = browserSrc[browserSrc.length - 1];[m
[31m-  }[m
[31m-[m
[31m-  // Create an array of parameters to send along to the iFrame.[m
[31m-  var params = {};[m
[31m-[m
[31m-  // Add global field widget settings and plugin information.[m
[31m-  $.extend(params, options.global);[m
[31m-  params.plugins = options.plugins;[m
[31m-[m
[31m-  // Append the list of parameters to the iFrame URL as query parameters.[m
[31m-  browserSrc += '&' + $.param(params);[m
[31m-[m
[31m-  // Create an iFrame with the iFrame URL.[m
[31m-  var mediaIframe = Drupal.media.popups.getPopupIframe(browserSrc, 'mediaBrowser');[m
[31m-[m
[31m-  // Attach an onLoad event.[m
[31m-  mediaIframe.bind('load', options, options.widget.onLoad);[m
[31m-[m
[31m-  // Create an array of Dialog options.[m
[31m-  var dialogOptions = options.dialog;[m
[31m-[m
[31m-  // Setup the dialog buttons.[m
[31m-  var ok = Drupal.t('OK');[m
[31m-  var notSelected = Drupal.t('You have not selected anything!');[m
[31m-[m
[31m-  dialogOptions.buttons[ok] = function () {[m
[31m-    // Find the current file selection.[m
[31m-    var selected = this.contentWindow.Drupal.media.browser.selectedMedia;[m
[31m-[m
[31m-    // Alert the user if a selection has yet to be made.[m
[31m-    if (selected.length < 1) {[m
[31m-      alert(notSelected);[m
[31m-[m
[31m-      return;[m
[31m-    }[m
[31m-[m
[31m-    // Select the file.[m
[31m-    onSelect(selected);[m
[31m-[m
[31m-    // Close the dialog.[m
[31m-    $(this).dialog('close');[m
[31m-  };[m
[31m-[m
[31m-  // Create a jQuery UI dialog with the given options.[m
[31m-  var dialog = mediaIframe.dialog(dialogOptions);[m
[31m-[m
[31m-  // Allow the dialog to react to re-sizing, scrolling, etc.[m
[31m-  Drupal.media.popups.sizeDialog(dialog);[m
[31m-  Drupal.media.popups.resizeDialog(dialog);[m
[31m-  Drupal.media.popups.scrollDialog(dialog);[m
[31m-  Drupal.media.popups.overlayDisplace(dialog.parents(".ui-dialog"));[m
[31m-[m
[31m-  return mediaIframe;[m
[31m-};[m
[31m-[m
[31m-/**[m
[31m- * Retrieves a list of default settings for the media browser.[m
[31m- *[m
[31m- * @return[m
[31m- *   An array of default settings.[m
[31m- */[m
[31m-Drupal.media.popups.mediaBrowser.getDefaults = function () {[m
[31m-  return {[m
[31m-    global: {[m
[31m-      types: [], // Types to allow, defaults to all.[m
[31m-      activePlugins: [] // If provided, a list of plugins which should be enabled.[m
[31m-    },[m
[31m-    widget: { // Settings for the actual iFrame which is launched.[m
[31m-      src: Drupal.settings.media.browserUrl, // Src of the media browser (if you want to totally override it)[m
[31m-      onLoad: Drupal.media.popups.mediaBrowser.mediaBrowserOnLoad // Onload function when iFrame loads.[m
[31m-    },[m
[31m-    dialog: Drupal.media.popups.getDialogOptions()[m
[31m-  };[m
[31m-};[m
[31m-[m
[31m-/**[m
[31m- * Sets up the iFrame buttons.[m
[31m- */[m
[31m-Drupal.media.popups.mediaBrowser.mediaBrowserOnLoad = function (e) {[m
[31m-  var options = e.data;[m
[31m-[m
[31m-  // Ensure that the iFrame is defined.[m
[31m-  if (this.contentWindow.Drupal.media == undefined) {[m
[31m-    return;[m
[31m-  }[m
[31m-[m
[31m-  // Check if a selection has been made and press the 'ok' button.[m
[31m-  if (this.contentWindow.Drupal.media.browser.selectedMedia.length > 0) {[m
[31m-    var ok = Drupal.t('OK');[m
[31m-    var ok_func = $(this).dialog('option', 'buttons')[ok];[m
[31m-[m
[31m-    ok_func.call(this);[m
[31m-[m
[31m-    return;[m
[31m-  }[m
[31m-};[m
[31m-[m
[31m-/**[m
[31m- * Finalizes the selection of a file.[m
[31m- *[m
[31m- * Alerts the user if a selection has yet to be made, triggers the file[m
[31m- * selection and closes the modal dialog.[m
[31m- */[m
[31m-Drupal.media.popups.mediaBrowser.finalizeSelection = function () {[m
[31m-  // Find the current file selection.[m
[31m-  var selected = this.contentWindow.Drupal.media.browser.selectedMedia;[m
[31m-[m
[31m-  // Alert the user if a selection has yet to be made.[m
[31m-  if (selected.length < 1) {[m
[31m-    alert(notSelected);[m
[31m-[m
[31m-    return;[m
[31m-  }[m
[31m-[m
[31m-  // Select the file.[m
[31m-  onSelect(selected);[m
[31m-[m
[31m-  // Close the dialog.[m
[31m-  $(this).dialog('close');[m
[31m-};[m
[31m-[m
[31m-/**[m
[31m- * Style chooser Popup. Creates a dialog for a user to choose a media style.[m
[31m- *[m
[31m- * @param mediaFile[m
[31m- *   The mediaFile you are requesting this formatting form for.[m
[31m- *   @todo: should this be fid? That's actually all we need now.[m
[31m- *[m
[31m- * @param Function[m
[31m- *   onSubmit Function to be called when the user chooses a media style. Takes[m
[31m- *   one parameter (Object formattedMedia).[m
[31m- *[m
[31m- * @param Object[m
[31m- *   options Options for the mediaStyleChooser dialog.[m
[31m- */[m
[31m-Drupal.media.popups.mediaStyleSelector = function (mediaFile, onSelect, options) {[m
[31m-  var defaults = Drupal.media.popups.mediaStyleSelector.getDefaults();[m
[31m-[m
[31m-  // @todo: remove this awful hack :([m
[31m-  if (typeof defaults.src === 'string' ) {[m
[31m-    defaults.src = defaults.src.replace('-media_id-', mediaFile.fid) + '&fields=' + encodeURIComponent(JSON.stringify(mediaFile.fields));[m
[31m-  }[m
[31m-  else {[m
[31m-    var src = defaults.src.shift();[m
[31m-[m
[31m-    defaults.src.unshift(src);[m
[31m-    defaults.src = src.replace('-media_id-', mediaFile.fid) + '&fields=' + encodeURIComponent(JSON.stringify(mediaFile.fields));[m
[31m-  }[m
[31m-[m
[31m-  options = $.extend({}, defaults, options);[m
[31m-[m
[31m-  // Create an iFrame with the iFrame URL.[m
[31m-  var mediaIframe = Drupal.media.popups.getPopupIframe(options.src, 'mediaStyleSelector');[m
[31m-[m
[31m-  // Attach an onLoad event.[m
[31m-  mediaIframe.bind('load', options, options.onLoad);[m
[31m-[m
[31m-  // Create an array of Dialog options.[m
[31m-  var dialogOptions = Drupal.media.popups.getDialogOptions();[m
[31m-[m
[31m-  // Setup the dialog buttons.[m
[31m-  var ok = Drupal.t('OK');[m
[31m-  var notSelected = Drupal.t('Very sorry, there was an unknown error embedding media.');[m
[31m-[m
[31m-  dialogOptions.buttons[ok] = function () {[m
[31m-    // Find the current file selection.[m
[31m-    var formattedMedia = this.contentWindow.Drupal.media.formatForm.getFormattedMedia();[m
[31m-[m
[31m-    // Alert the user if a selection has yet to be made.[m
[31m-    if (!formattedMedia) {[m
[31m-      alert(notSelected);[m
[31m-[m
[31m-      return;[m
[31m-    }[m
[31m-[m
[31m-    // Select the file.[m
[31m-    onSelect(formattedMedia);[m
[31m-[m
[31m-    // Close the dialog.[m
[31m-    $(this).dialog('close');[m
[31m-  };[m
[31m-[m
[31m-  // Create a jQuery UI dialog with the given options.[m
[31m-  var dialog = mediaIframe.dialog(dialogOptions);[m
[31m-[m
[31m-  // Allow the dialog to react to re-sizing, scrolling, etc.[m
[31m-  Drupal.media.popups.sizeDialog(dialog);[m
[31m-  Drupal.media.popups.resizeDialog(dialog);[m
[31m-  Drupal.media.popups.scrollDialog(dialog);[m
[31m-  Drupal.media.popups.overlayDisplace(dialog.parents(".ui-dialog"));[m
[31m-[m
[31m-  return mediaIframe;[m
[31m-};[m
[31m-[m
[31m-Drupal.media.popups.mediaStyleSelector.mediaBrowserOnLoad = function (e) {[m
[31m-};[m
[31m-[m
[31m-Drupal.media.popups.mediaStyleSelector.getDefaults = function () {[m
[31m-  return {[m
[31m-    src: Drupal.settings.media.styleSelectorUrl,[m
[31m-    onLoad: Drupal.media.popups.mediaStyleSelector.mediaBrowserOnLoad[m
[31m-  };[m
[31m-};[m
[31m-[m
[31m-/**[m
[31m- * Style chooser Popup. Creates a dialog for a user to choose a media style.[m
[31m- *[m
[31m- * @param mediaFile[m
[31m- *   The mediaFile you are requesting this formatting form for.[m
[31m- *   @todo: should this be fid? That's actually all we need now.[m
[31m- *[m
[31m- * @param Function[m
[31m- *   onSubmit Function to be called when the user chooses a media style. Takes[m
[31m- *   one parameter (Object formattedMedia).[m
[31m- *[m
[31m- * @param Object[m
[31m- *   options Options for the mediaStyleChooser dialog.[m
[31m- */[m
[31m-Drupal.media.popups.mediaFieldEditor = function (fid, onSelect, options) {[m
[31m-  var defaults = Drupal.media.popups.mediaFieldEditor.getDefaults();[m
[31m-[m
[31m-  // @todo: remove this awful hack :([m
[31m-  defaults.src = defaults.src.replace('-media_id-', fid);[m
[31m-  options = $.extend({}, defaults, options);[m
[31m-[m
[31m-  // Create an iFrame with the iFrame URL.[m
[31m-  var mediaIframe = Drupal.media.popups.getPopupIframe(options.src, 'mediaFieldEditor');[m
[31m-[m
[31m-  // Attach an onLoad event.[m
[31m-  mediaIframe.bind('load', options, options.onLoad);[m
[31m-[m
[31m-  // Create an array of Dialog options.[m
[31m-  var dialogOptions = Drupal.media.popups.getDialogOptions();[m
[31m-[m
[31m-  // Setup the dialog buttons.[m
[31m-  var ok = Drupal.t('OK');[m
[31m-  var notSelected = Drupal.t('Very sorry, there was an unknown error embedding media.');[m
[31m-[m
[31m-  dialogOptions.buttons[ok] = function () {[m
[31m-    // Find the current file selection.[m
[31m-    var formattedMedia = this.contentWindow.Drupal.media.formatForm.getFormattedMedia();[m
[31m-[m
[31m-    // Alert the user if a selection has yet to be made.[m
[31m-    if (!formattedMedia) {[m
[31m-      alert(notSelected);[m
[31m-[m
[31m-      return;[m
[31m-    }[m
[31m-[m
[31m-    // Select the file.[m
[31m-    onSelect(formattedMedia);[m
[31m-[m
[31m-    // Close the dialog.[m
[31m-    $(this).dialog('close');[m
[31m-  };[m
[31m-[m
[31m-  // Create a jQuery UI dialog with the given options.[m
[31m-  var dialog = mediaIframe.dialog(dialogOptions);[m
[31m-[m
[31m-  // Allow the dialog to react to re-sizing, scrolling, etc.[m
[31m-  Drupal.media.popups.sizeDialog(dialog);[m
[31m-  Drupal.media.popups.resizeDialog(dialog);[m
[31m-  Drupal.media.popups.scrollDialog(dialog);[m
[31m-  Drupal.media.popups.overlayDisplace(dialog);[m
[31m-[m
[31m-  return mediaIframe;[m
[31m-};[m
[31m-[m
[31m-Drupal.media.popups.mediaFieldEditor.mediaBrowserOnLoad = function (e) {[m
[31m-[m
[31m-};[m
[31m-[m
[31m-Drupal.media.popups.mediaFieldEditor.getDefaults = function () {[m
[31m-  return {[m
[31m-    // @todo: do this for real[m
[31m-    src: '/media/-media_id-/edit?render=media-popup',[m
[31m-    onLoad: Drupal.media.popups.mediaFieldEditor.mediaBrowserOnLoad[m
[31m-  };[m
[31m-};[m
[31m-[m
[31m-/**[m
[31m- * Generic functions to both the media-browser and style selector.[m
[31m- */[m
[31m-[m
[31m-/**[m
[31m- * Returns the commonly used options for the dialog.[m
[31m- */[m
[31m-Drupal.media.popups.getDialogOptions = function () {[m
[31m-  return {[m
[31m-    title: Drupal.t('Media browser'),[m
[31m-    buttons: {},[m
[31m-    dialogClass: Drupal.settings.media.dialogOptions.dialogclass,[m
[31m-    modal: Drupal.settings.media.dialogOptions.modal,[m
[31m-    draggable: Drupal.settings.media.dialogOptions.draggable,[m
[31m-    resizable: Drupal.settings.media.dialogOptions.resizable,[m
[31m-    minWidth: Drupal.settings.media.dialogOptions.minwidth,[m
[31m-    width: Drupal.settings.media.dialogOptions.width,[m
[31m-    height: Drupal.settings.media.dialogOptions.height,[m
[31m-    position: Drupal.settings.media.dialogOptions.position,[m
[31m-    overlay: {[m
[31m-      backgroundColor: Drupal.settings.media.dialogOptions.overlay.backgroundcolor,[m
[31m-      opacity: Drupal.settings.media.dialogOptions.overlay.opacity[m
[31m-    },[m
[31m-    zIndex: Drupal.settings.media.dialogOptions.zindex,[m
[31m-    close: function (event, ui) {[m
[31m-      var elem = $(event.target);[m
[31m-      var id = elem.attr('id');[m
[31m-      if(id == 'mediaStyleSelector') {[m
[31m-        $(this).dialog("destroy");[m
[31m-        $('#mediaStyleSelector').remove();[m
[31m-      }[m
[31m-      else {[m
[31m-        $(this).dialog("destroy");[m
[31m-        $('#mediaBrowser').remove();[m
[31m-      }[m
[31m-    }[m
[31m-  };[m
[31m-};[m
[31m-[m
[31m-/**[m
[31m- * Get an iframe to serve as the dialog's contents. Common to both plugins.[m
[31m- */[m
[31m-Drupal.media.popups.getPopupIframe = function (src, id, options) {[m
[31m-  var defaults = {width: '100%', scrolling: 'auto'};[m
[31m-  var options = $.extend({}, defaults, options);[m
[31m-[m
[31m-  return $('<iframe class="media-modal-frame"/>')[m
[31m-  .attr('src', src)[m
[31m-  .attr('width', options.width)[m
[31m-  .attr('id', id)[m
[31m-  .attr('scrolling', options.scrolling);[m
[31m-};[m
[31m-[m
[31m-Drupal.media.popups.overlayDisplace = function (dialog) {[m
[31m-  if (parent.window.Drupal.overlay && jQuery.isFunction(parent.window.Drupal.overlay.getDisplacement)) {[m
[31m-    var overlayDisplace = parent.window.Drupal.overlay.getDisplacement('top');[m
[31m-[m
[31m-    if (dialog.offset().top < overlayDisplace) {[m
[31m-      dialog.css('top', overlayDisplace);[m
[31m-    }[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Size the dialog when it is first loaded and keep it centered when scrolling.[m
[31m- *[m
[31m- * @param jQuery dialogElement[m
[31m- *  The element which has .dialog() attached to it.[m
[31m- */[m
[31m-Drupal.media.popups.sizeDialog = function (dialogElement) {[m
[31m-  if (!dialogElement.is(':visible')) {[m
[31m-    return;[m
[31m-  }[m
[31m-[m
[31m-  var windowWidth = $(window).width();[m
[31m-  var dialogWidth = windowWidth * 0.8;[m
[31m-  var windowHeight = $(window).height();[m
[31m-  var dialogHeight = windowHeight * 0.8;[m
[31m-[m
[31m-  dialogElement.dialog("option", "width", dialogWidth);[m
[31m-  dialogElement.dialog("option", "height", dialogHeight);[m
[31m-  dialogElement.dialog("option", "position", 'center');[m
[31m-[m
[31m-  $('.media-modal-frame').width('100%');[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Resize the dialog when the window changes.[m
[31m- *[m
[31m- * @param jQuery dialogElement[m
[31m- *  The element which has .dialog() attached to it.[m
[31m- */[m
[31m-Drupal.media.popups.resizeDialog = function (dialogElement) {[m
[31m-  $(window).resize(function() {[m
[31m-    Drupal.media.popups.sizeDialog(dialogElement);[m
[31m-  });[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Keeps the dialog centered when the window is scrolled.[m
[31m- *[m
[31m- * @param jQuery dialogElement[m
[31m- *  The element which has .dialog() attached to it.[m
[31m- */[m
[31m-Drupal.media.popups.scrollDialog = function (dialogElement) {[m
[31m-  // Keep the dialog window centered when scrolling.[m
[31m-  $(window).scroll(function() {[m
[31m-    if (!dialogElement.is(':visible')) {[m
[31m-      return;[m
[31m-    }[m
[31m-[m
[31m-    dialogElement.dialog("option", "position", 'center');[m
[31m-  });[m
[31m-}[m
[31m-[m
[31m-})(jQuery);[m
[1mdiff --git a/sites/all/modules/contrib/media/js/plugins/media.views.js b/sites/all/modules/contrib/media/js/plugins/media.views.js[m
[1mdeleted file mode 100644[m
[1mindex 1ea4440..0000000[m
[1m--- a/sites/all/modules/contrib/media/js/plugins/media.views.js[m
[1m+++ /dev/null[m
[36m@@ -1,213 +0,0 @@[m
[31m-/**[m
[31m- * @file[m
[31m- * Handles the JS for the views file browser.[m
[31m- *[m
[31m- * Note that this does not currently support multiple file selection[m
[31m- */[m
[31m-[m
[31m-(function ($) {[m
[31m-[m
[31m-namespace('Drupal.media.browser.views');[m
[31m-Drupal.behaviors.mediaViews = {[m
[31m-  attach: function (context, settings) {[m
[31m-[m
[31m-    // Make sure when pressing enter on text inputs, the form isn't submitted[m
[31m-    $('.ctools-auto-submit-full-form .views-exposed-form input:text, input:text.ctools-auto-submit', context)[m
[31m-      .filter(':not(.ctools-auto-submit-exclude)')[m
[31m-      .bind('keydown keyup', function (e) {[m
[31m-        if(e.keyCode === 13) {[m
[31m-          e.stopImmediatePropagation();[m
[31m-          e.preventDefault();[m
[31m-        }[m
[31m-      });[m
[31m-    // Disable the links on media items list[m
[31m-    $('.view-content ul.media-list-thumbnails a').click(function() {[m
[31m-      return false;[m
[31m-    });[m
[31m-[m
[31m-    // Return focus to the correct part of the form.[m
[31m-    $('.ctools-auto-submit-full-form .ctools-auto-submit-click', context).click(function () {[m
[31m-      settings.lastFocus = document.activeElement.id;[m
[31m-[m
[31m-      // Add custom class to allow customize look and feel of the field while processing ajax[m
[31m-      // This way user can have a better user expierence using the exposed filters[m
[31m-      $(document.activeElement).addClass('media-ajaxing-disabled');[m
[31m-      // Remove focus to the active element[m
[31m-      $(document.activeElement).blur();[m
[31m-[m
[31m-      // Before go with ajax, suppress key events[m
[31m-      $('body').bind('keydown keyup', suppressKeyEvents);[m
[31m-    });[m
[31m-    if (settings.lastFocus) {[m
[31m-      // Note, we just use each() so we can declare variables in a new scope.[m
[31m-      $('#' + settings.lastFocus, context).each(function () {[m
[31m-        var $this = $(this),[m
[31m-            val = $this.val();[m
[31m-[m
[31m-        $this.focus();[m
[31m-[m
[31m-        // Clear and reset the value to put the cursor at the end.[m
[31m-        $this.val('');[m
[31m-        $this.val(val);[m
[31m-[m
[31m-        // After input recover focus, remove suppression of key events[m
[31m-        $('body').unbind('keydown keyup', suppressKeyEvents);[m
[31m-      });[m
[31m-    }[m
[31m-[m
[31m-    // We loop through the views listed in Drupal.settings.media.browser.views[m
[31m-    // and set them up individually.[m
[31m-    var views_ids = [];[m
[31m-    for(var key in Drupal.settings.media.browser.views){[m
[31m-      views_ids.push(key);[m
[31m-    }[m
[31m-[m
[31m-    for (var i = 0; i < views_ids.length; i++) {[m
[31m-      var views_id = views_ids[i];[m
[31m-      for (var j= 0; j < Drupal.settings.media.browser.views[views_id].length; j++) {[m
[31m-        var views_display_id = Drupal.settings.media.browser.views[views_id][j],[m
[31m-          view = $('.view-id-' + views_id + '.view-display-id-' + views_display_id);[m
[31m-        if (view.length) {[m
[31m-          Drupal.media.browser.views.setup(view);[m
[31m-        }[m
[31m-      }[m
[31m-    }[m
[31m-[m
[31m-    // Reset the state on tab-changes- bind on the 'select' event on the tabset[m
[31m-    $('#media-browser-tabset').bind('tabsselect', function(event, ui) {[m
[31m-      var view = $('.view', ui.panel);[m
[31m-      if (view.length) {[m
[31m-        Drupal.media.browser.views.select(view);[m
[31m-      }[m
[31m-    });[m
[31m-[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Event-function that is called with a view, when the tab containing that[m
[31m- * view is selected.[m
[31m- */[m
[31m-Drupal.media.browser.views.select = function(view) {[m
[31m-  // Reset the list of selected files[m
[31m-  Drupal.media.browser.selectMedia([]);[m
[31m-[m
[31m-  // Reset all 'selected'-status.[m
[31m-  $('.view-content .media-item', view).removeClass('selected');[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Setup function. Called once for every Media Browser view.[m
[31m- *[m
[31m- * Sets up event-handlers for selecting items in the view.[m
[31m- */[m
[31m-Drupal.media.browser.views.setup = function(view) {[m
[31m-  // Ensure we only setup each view once..[m
[31m-  if ($(view).hasClass('media-browser-views-processed')) {[m
[31m-    return;[m
[31m-  }[m
[31m-[m
[31m-  // Reset the list of selected files[m
[31m-  Drupal.media.browser.selectMedia([]);[m
[31m-[m
[31m-  // Catch double click to submit a single item.[m
[31m-  $('.view-content .media-item', view).bind('dblclick', function () {[m
[31m-    var fid = $(this).closest('.media-item[data-fid]').data('fid'),[m
[31m-      selectedFiles = new Array();[m
[31m-[m
[31m-    // Remove all currently selected files[m
[31m-    $('.view-content .media-item', view).removeClass('selected');[m
[31m-[m
[31m-    // Mark it as selected[m
[31m-    $(this).addClass('selected');[m
[31m-[m
[31m-    // Because the files are added using drupal_add_js() and due to the fact[m
[31m-    // that drupal_get_js() runs a drupal_array_merge_deep() which re-numbers[m
[31m-    // numeric key values, we have to search in Drupal.settings.media.files[m
[31m-    // for the matching file ID rather than referencing it directly.[m
[31m-    for (index in Drupal.settings.media.files) {[m
[31m-      if (Drupal.settings.media.files[index].fid == fid) {[m
[31m-        selectedFiles.push(Drupal.settings.media.files[index]);[m
[31m-[m
[31m-        // If multiple tabs contains the same file, it will be present in the[m
[31m-        // files-array multiple times, so we break out early so we don't have[m
[31m-        // it in the selectedFiles array multiple times.[m
[31m-        // This would interfer with multi-selection, so...[m
[31m-        break;[m
[31m-      }[m
[31m-    }[m
[31m-    Drupal.media.browser.selectMediaAndSubmit(selectedFiles);[m
[31m-  });[m
[31m-[m
[31m-[m
[31m-  // Catch the click on a media item[m
[31m-  $('.view-content .media-item', view).bind('click', function () {[m
[31m-    var fid = $(this).closest('.media-item[data-fid]').data('fid'),[m
[31m-      selectedFiles = new Array();[m
[31m-[m
[31m-    // Remove all currently selected files[m
[31m-    $('.view-content .media-item', view).removeClass('selected');[m
[31m-[m
[31m-    // Mark it as selected[m
[31m-    $(this).addClass('selected');[m
[31m-[m
[31m-    // Multiselect![m
[31m-    if (Drupal.settings.media.browser.params.multiselect) {[m
[31m-      // Loop through the already selected files[m
[31m-      for (index in Drupal.media.browser.selectedMedia) {[m
[31m-        var currentFid = Drupal.media.browser.selectedMedia[index].fid;[m
[31m-[m
[31m-        // If the current file exists in the list of already selected[m
[31m-        // files, we deselect instead of selecting[m
[31m-        if (currentFid == fid) {[m
[31m-          $(this).removeClass('selected');[m
[31m-          // If we change the fid, the later matching won't[m
[31m-          // add it back again because it can't find it.[m
[31m-          fid = NaN;[m
[31m-[m
[31m-          // The previously selected file wasn't clicked, so we retain it[m
[31m-          // as an active file[m
[31m-        }[m
[31m-        else {[m
[31m-          // Add to list of already selected files[m
[31m-          selectedFiles.push(Drupal.media.browser.selectedMedia[index]);[m
[31m-[m
[31m-          // Mark it as selected[m
[31m-          $('.view-content *[data-fid=' + currentFid + '].media-item', view).addClass('selected');[m
[31m-        }[m
[31m-      }[m
[31m-    }[m
[31m-[m
[31m-    // Because the files are added using drupal_add_js() and due to the fact[m
[31m-    // that drupal_get_js() runs a drupal_array_merge_deep() which re-numbers[m
[31m-    // numeric key values, we have to search in Drupal.settings.media.files[m
[31m-    // for the matching file ID rather than referencing it directly.[m
[31m-    for (index in Drupal.settings.media.files) {[m
[31m-      if (Drupal.settings.media.files[index].fid == fid) {[m
[31m-        selectedFiles.push(Drupal.settings.media.files[index]);[m
[31m-[m
[31m-        // If multiple tabs contains the same file, it will be present in the[m
[31m-        // files-array multiple times, so we break out early so we don't have[m
[31m-        // it in the selectedFiles array multiple times.[m
[31m-        // This would interfer with multi-selection, so...[m
[31m-        break;[m
[31m-      }[m
[31m-    }[m
[31m-    Drupal.media.browser.selectMedia(selectedFiles);[m
[31m-  });[m
[31m-[m
[31m-  // Add the processed class, so we dont accidentally process the same element twice..[m
[31m-  $(view).addClass('media-browser-views-processed');[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Helper callback to supress propagation and default behaviour of an event[m
[31m- *[m
[31m- * This function is used in this way to make private and accesible only for the current scope[m
[31m- */[m
[31m-var suppressKeyEvents = function(e) {[m
[31m-  e.stopImmediatePropagation();[m
[31m-  e.preventDefault();[m
[31m-}[m
[31m-[m
[31m-}(jQuery));[m
[1mdiff --git a/sites/all/modules/contrib/media/js/util/ba-debug.min.js b/sites/all/modules/contrib/media/js/util/ba-debug.min.js[m
[1mdeleted file mode 100644[m
[1mindex 1c50e7f..0000000[m
[1m--- a/sites/all/modules/contrib/media/js/util/ba-debug.min.js[m
[1m+++ /dev/null[m
[36m@@ -1,12 +0,0 @@[m
[31m-/*[m
[31m- * debug - v0.3 - 6/8/2009[m
[31m- * http://benalman.com/projects/javascript-debug-console-log/[m
[31m- *[m
[31m- * Copyright (c) 2009 "Cowboy" Ben Alman[m
[31m- * Licensed under the MIT license[m
[31m- * http://benalman.com/about/license/[m
[31m- *[m
[31m- * With lots of help from Paul Irish![m
[31m- * http://paulirish.com/[m
[31m- */[m
[31m-window.debug=(function(){var c=this,e=Array.prototype.slice,b=c.console,i={},f,g,j=9,d=["error","warn","info","debug","log"],m="assert clear count dir dirxml group groupEnd profile profileEnd time timeEnd trace".split(" "),k=m.length,a=[];while(--k>=0){(function(n){i[n]=function(){j!==0&&b&&b[n]&&b[n].apply(b,arguments)}})(m[k])}k=d.length;while(--k>=0){(function(n,o){i[o]=function(){var q=e.call(arguments),p=[o].concat(q);a.push(p);h(p);if(!b||!l(n)){return}b.firebug?b[o].apply(c,q):b[o]?b[o](q):b.log(q)}})(k,d[k])}function h(n){if(f&&(g||!b||!b.log)){f.apply(c,n)}}i.setLevel=function(n){j=typeof n==="number"?n:9};function l(n){return j>0?j>n:d.length+j<=n}i.setCallback=function(){var o=e.call(arguments),n=a.length,p=n;f=o.shift()||null;g=typeof o[0]==="boolean"?o.shift():false;p-=typeof o[0]==="number"?o.shift():n;while(p<n){h(a[p++])}};return i})();[m
\ No newline at end of file[m
[1mdiff --git a/sites/all/modules/contrib/media/js/util/json2.js b/sites/all/modules/contrib/media/js/util/json2.js[m
[1mdeleted file mode 100644[m
[1mindex 39d8f37..0000000[m
[1m--- a/sites/all/modules/contrib/media/js/util/json2.js[m
[1m+++ /dev/null[m
[36m@@ -1,481 +0,0 @@[m
[31m-/*[m
[31m-    http://www.JSON.org/json2.js[m
[31m-    2009-09-29[m
[31m-[m
[31m-    Public Domain.[m
[31m-[m
[31m-    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.[m
[31m-[m
[31m-    See http://www.JSON.org/js.html[m
[31m-[m
[31m-[m
[31m-    This code should be minified before deployment.[m
[31m-    See http://javascript.crockford.com/jsmin.html[m
[31m-[m
[31m-    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO[m
[31m-    NOT CONTROL.[m
[31m-[m
[31m-[m
[31m-    This file creates a global JSON object containing two methods: stringify[m
[31m-    and parse.[m
[31m-[m
[31m-        JSON.stringify(value, replacer, space)[m
[31m-            value       any JavaScript value, usually an object or array.[m
[31m-[m
[31m-            replacer    an optional parameter that determines how object[m
[31m-                        values are stringified for objects. It can be a[m
[31m-                        function or an array of strings.[m
[31m-[m
[31m-            space       an optional parameter that specifies the indentation[m
[31m-                        of nested structures. If it is omitted, the text will[m
[31m-                        be packed without extra whitespace. If it is a number,[m
[31m-                        it will specify the number of spaces to indent at each[m
[31m-                        level. If it is a string (such as '\t' or '&nbsp;'),[m
[31m-                        it contains the characters used to indent at each level.[m
[31m-[m
[31m-            This method produces a JSON text from a JavaScript value.[m
[31m-[m
[31m-            When an object value is found, if the object contains a toJSON[m
[31m-            method, its toJSON method will be called and the result will be[m
[31m-            stringified. A toJSON method does not serialize: it returns the[m
[31m-            value represented by the name/value pair that should be serialized,[m
[31m-            or undefined if nothing should be serialized. The toJSON method[m
[31m-            will be passed the key associated with the value, and this will be[m
[31m-            bound to the value[m
[31m-[m
[31m-            For example, this would serialize Dates as ISO strings.[m
[31m-[m
[31m-                Date.prototype.toJSON = function (key) {[m
[31m-                    function f(n) {[m
[31m-                        // Format integers to have at least two digits.[m
[31m-                        return n < 10 ? '0' + n : n;[m
[31m-                    }[m
[31m-[m
[31m-                    return this.getUTCFullYear()   + '-' +[m
[31m-                         f(this.getUTCMonth() + 1) + '-' +[m
[31m-                         f(this.getUTCDate())      + 'T' +[m
[31m-                         f(this.getUTCHours())     + ':' +[m
[31m-                         f(this.getUTCMinutes())   + ':' +[m
[31m-                         f(this.getUTCSeconds())   + 'Z';[m
[31m-                };[m
[31m-[m
[31m-            You can provide an optional replacer method. It will be passed the[m
[31m-            key and value of each member, with this bound to the containing[m
[31m-            object. The value that is returned from your method will be[m
[31m-            serialized. If your method returns undefined, then the member will[m
[31m-            be excluded from the serialization.[m
[31m-[m
[31m-            If the replacer parameter is an array of strings, then it will be[m
[31m-            used to select the members to be serialized. It filters the results[m
[31m-            such that only members with keys listed in the replacer array are[m
[31m-            stringified.[m
[31m-[m
[31m-            Values that do not have JSON representations, such as undefined or[m
[31m-            functions, will not be serialized. Such values in objects will be[m
[31m-            dropped; in arrays they will be replaced with null. You can use[m
[31m-            a replacer function to replace those with JSON values.[m
[31m-            JSON.stringify(undefined) returns undefined.[m
[31m-[m
[31m-            The optional space parameter produces a stringification of the[m
[31m-            value that is filled with line breaks and indentation to make it[m
[31m-            easier to read.[m
[31m-[m
[31m-            If the space parameter is a non-empty string, then that string will[m
[31m-            be used for indentation. If the space parameter is a number, then[m
[31m-            the indentation will be that many spaces.[m
[31m-[m
[31m-            Example:[m
[31m-[m
[31m-            text = JSON.stringify(['e', {pluribus: 'unum'}]);[m
[31m-            // text is '["e",{"pluribus":"unum"}]'[m
[31m-[m
[31m-[m
[31m-            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');[m
[31m-            // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'[m
[31m-[m
[31m-            text = JSON.stringify([new Date()], function (key, value) {[m
[31m-                return this[key] instanceof Date ?[m
[31m-                    'Date(' + this[key] + ')' : value;[m
[31m-            });[m
[31m-            // text is '["Date(---current time---)"]'[m
[31m-[m
[31m-[m
[31m-        JSON.parse(text, reviver)[m
[31m-            This method parses a JSON text to produce an object or array.[m
[31m-            It can throw a SyntaxError exception.[m
[31m-[m
[31m-            The optional reviver parameter is a function that can filter and[m
[31m-            transform the results. It receives each of the keys and values,[m
[31m-            and its return value is used instead of the original value.[m
[31m-            If it returns what it received, then the structure is not modified.[m
[31m-            If it returns undefined then the member is deleted.[m
[31m-[m
[31m-            Example:[m
[31m-[m
[31m-            // Parse the text. Values that look like ISO date strings will[m
[31m-            // be converted to Date objects.[m
[31m-[m
[31m-            myData = JSON.parse(text, function (key, value) {[m
[31m-                var a;[m
[31m-                if (typeof value === 'string') {[m
[31m-                    a =[m
[31m-/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);[m
[31m-                    if (a) {[m
[31m-                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],[m
[31m-                            +a[5], +a[6]));[m
[31m-                    }[m
[31m-                }[m
[31m-                return value;[m
[31m-            });[m
[31m-[m
[31m-            myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {[m
[31m-                var d;[m
[31m-                if (typeof value === 'string' &&[m
[31m-                        value.slice(0, 5) === 'Date(' &&[m
[31m-                        value.slice(-1) === ')') {[m
[31m-                    d = new Date(value.slice(5, -1));[m
[31m-                    if (d) {[m
[31m-                        return d;[m
[31m-                    }[m
[31m-                }[m
[31m-                return value;[m
[31m-            });[m
[31m-[m
[31m-[m
[31m-    This is a reference implementation. You are free to copy, modify, or[m
[31m-    redistribute.[m
[31m-*/[m
[31m-[m
[31m-/*jslint evil: true, strict: false */[m
[31m-[m
[31m-/*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,[m
[31m-    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,[m
[31m-    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,[m
[31m-    lastIndex, length, parse, prototype, push, replace, slice, stringify,[m
[31m-    test, toJSON, toString, valueOf[m
[31m-*/[m
[31m-[m
[31m-[m
[31m-// Create a JSON object only if one does not already exist. We create the[m
[31m-// methods in a closure to avoid creating global variables.[m
[31m-[m
[31m-if (!this.JSON) {[m
[31m-    this.JSON = {};[m
[31m-}[m
[31m-[m
[31m-(function () {[m
[31m-[m
[31m-    function f(n) {[m
[31m-        // Format integers to have at least two digits.[m
[31m-        return n < 10 ? '0' + n : n;[m
[31m-    }[m
[31m-[m
[31m-    if (typeof Date.prototype.toJSON !== 'function') {[m
[31m-[m
[31m-        Date.prototype.toJSON = function (key) {[m
[31m-[m
[31m-            return isFinite(this.valueOf()) ?[m
[31m-                   this.getUTCFullYear()   + '-' +[m
[31m-                 f(this.getUTCMonth() + 1) + '-' +[m
[31m-                 f(this.getUTCDate())      + 'T' +[m
[31m-                 f(this.getUTCHours())     + ':' +[m
[31m-                 f(this.getUTCMinutes())   + ':' +[m
[31m-                 f(this.getUTCSeconds())   + 'Z' : null;[m
[31m-        };[m
[31m-[m
[31m-        String.prototype.toJSON =[m
[31m-        Number.prototype.toJSON =[m
[31m-        Boolean.prototype.toJSON = function (key) {[m
[31m-            return this.valueOf();[m
[31m-        };[m
[31m-    }[m
[31m-[m
[31m-    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,[m
[31m-        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,[m
[31m-        gap,[m
[31m-        indent,[m
[31m-        meta = {    // table of character substitutions[m
[31m-            '\b': '\\b',[m
[31m-            '\t': '\\t',[m
[31m-            '\n': '\\n',[m
[31m-            '\f': '\\f',[m
[31m-            '\r': '\\r',[m
[31m-            '"' : '\\"',[m
[31m-            '\\': '\\\\'[m
[31m-        },[m
[31m-        rep;[m
[31m-[m
[31m-[m
[31m-    function quote(string) {[m
[31m-[m
[31m-// If the string contains no control characters, no quote characters, and no[m
[31m-// backslash characters, then we can safely slap some quotes around it.[m
[31m-// Otherwise we must also replace the offending characters with safe escape[m
[31m-// sequences.[m
[31m-[m
[31m-        escapable.lastIndex = 0;[m
[31m-        return escapable.test(string) ?[m
[31m-            '"' + string.replace(escapable, function (a) {[m
[31m-                var c = meta[a];[m
[31m-                return typeof c === 'string' ? c :[m
[31m-                    '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);[m
[31m-            }) + '"' :[m
[31m-            '"' + string + '"';[m
[31m-    }[m
[31m-[m
[31m-[m
[31m-    function str(key, holder) {[m
[31m-[m
[31m-// Produce a string from holder[key].[m
[31m-[m
[31m-        var i,          // The loop counter.[m
[31m-            k,          // The member key.[m
[31m-            v,          // The member value.[m
[31m-            length,[m
[31m-            mind = gap,[m
[31m-            partial,[m
[31m-            value = holder[key];[m
[31m-[m
[31m-// If the value has a toJSON method, call it to obtain a replacement value.[m
[31m-[m
[31m-        if (value && typeof value === 'object' &&[m
[31m-                typeof value.toJSON === 'function') {[m
[31m-            value = value.toJSON(key);[m
[31m-        }[m
[31m-[m
[31m-// If we were called with a replacer function, then call the replacer to[m
[31m-// obtain a replacement value.[m
[31m-[m
[31m-        if (typeof rep === 'function') {[m
[31m-            value = rep.call(holder, key, value);[m
[31m-        }[m
[31m-[m
[31m-// What happens next depends on the value's type.[m
[31m-[m
[31m-        switch (typeof value) {[m
[31m-        case 'string':[m
[31m-            return quote(value);[m
[31m-[m
[31m-        case 'number':[m
[31m-[m
[31m-// JSON numbers must be finite. Encode non-finite numbers as null.[m
[31m-[m
[31m-            return isFinite(value) ? String(value) : 'null';[m
[31m-[m
[31m-        case 'boolean':[m
[31m-        case 'null':[m
[31m-[m
[31m-// If the value is a boolean or null, convert it to a string. Note:[m
[31m-// typeof null does not produce 'null'. The case is included here in[m
[31m-// the remote chance that this gets fixed someday.[m
[31m-[m
[31m-            return String(value);[m
[31m-[m
[31m-// If the type is 'object', we might be dealing with an object or an array or[m
[31m-// null.[m
[31m-[m
[31m-        case 'object':[m
[31m-[m
[31m-// Due to a specification blunder in ECMAScript, typeof null is 'object',[m
[31m-// so watch out for that case.[m
[31m-[m
[31m-            if (!value) {[m
[31m-                return 'null';[m
[31m-            }[m
[31m-[m
[31m-// Make an array to hold the partial results of stringifying this object value.[m
[31m-[m
[31m-            gap += indent;[m
[31m-            partial = [];[m
[31m-[m
[31m-// Is the value an array?[m
[31m-[m
[31m-            if (Object.prototype.toString.apply(value) === '[object Array]') {[m
[31m-[m
[31m-// The value is an array. Stringify every element. Use null as a placeholder[m
[31m-// for non-JSON values.[m
[31m-[m
[31m-                length = value.length;[m
[31m-                for (i = 0; i < length; i += 1) {[m
[31m-                    partial[i] = str(i, value) || 'null';[m
[31m-                }[m
[31m-[m
[31m-// Join all of the elements together, separated with commas, and wrap them in[m
[31m-// brackets.[m
[31m-[m
[31m-                v = partial.length === 0 ? '[]' :[m
[31m-                    gap ? '[\n' + gap +[m
[31m-                            partial.join(',\n' + gap) + '\n' +[m
[31m-                                mind + ']' :[m
[31m-                          '[' + partial.join(',') + ']';[m
[31m-                gap = mind;[m
[31m-                return v;[m
[31m-            }[m
[31m-[m
[31m-// If the replacer is an array, use it to select the members to be stringified.[m
[31m-[m
[31m-            if (rep && typeof rep === 'object') {[m
[31m-                length = rep.length;[m
[31m-                for (i = 0; i < length; i += 1) {[m
[31m-                    k = rep[i];[m
[31m-                    if (typeof k === 'string') {[m
[31m-                        v = str(k, value);[m
[31m-                        if (v) {[m
[31m-                            partial.push(quote(k) + (gap ? ': ' : ':') + v);[m
[31m-                        }[m
[31m-                    }[m
[31m-                }[m
[31m-            } else {[m
[31m-[m
[31m-// Otherwise, iterate through all of the keys in the object.[m
[31m-[m
[31m-                for (k in value) {[m
[31m-                    if (Object.hasOwnProperty.call(value, k)) {[m
[31m-                        v = str(k, value);[m
[31m-                        if (v) {[m
[31m-                            partial.push(quote(k) + (gap ? ': ' : ':') + v);[m
[31m-                        }[m
[31m-                    }[m
[31m-                }[m
[31m-            }[m
[31m-[m
[31m-// Join all of the member texts together, separated with commas,[m
[31m-// and wrap them in braces.[m
[31m-[m
[31m-            v = partial.length === 0 ? '{}' :[m
[31m-                gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' +[m
[31m-                        mind + '}' : '{' + partial.join(',') + '}';[m
[31m-            gap = mind;[m
[31m-            return v;[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-// If the JSON object does not yet have a stringify method, give it one.[m
[31m-[m
[31m-    if (typeof JSON.stringify !== 'function') {[m
[31m-        JSON.stringify = function (value, replacer, space) {[m
[31m-[m
[31m-// The stringify method takes a value and an optional replacer, and an optional[m
[31m-// space parameter, and returns a JSON text. The replacer can be a function[m
[31m-// that can replace values, or an array of strings that will select the keys.[m
[31m-// A default replacer method can be provided. Use of the space parameter can[m
[31m-// produce text that is more easily readable.[m
[31m-[m
[31m-            var i;[m
[31m-            gap = '';[m
[31m-            indent = '';[m
[31m-[m
[31m-// If the space parameter is a number, make an indent string containing that[m
[31m-// many spaces.[m
[31m-[m
[31m-            if (typeof space === 'number') {[m
[31m-                for (i = 0; i < space; i += 1) {[m
[31m-                    indent += ' ';[m
[31m-                }[m
[31m-[m
[31m-// If the space parameter is a string, it will be used as the indent string.[m
[31m-[m
[31m-            } else if (typeof space === 'string') {[m
[31m-                indent = space;[m
[31m-            }[m
[31m-[m
[31m-// If there is a replacer, it must be a function or an array.[m
[31m-// Otherwise, throw an error.[m
[31m-[m
[31m-            rep = replacer;[m
[31m-            if (replacer && typeof replacer !== 'function' &&[m
[31m-                    (typeof replacer !== 'object' ||[m
[31m-                     typeof replacer.length !== 'number')) {[m
[31m-                throw new Error('JSON.stringify');[m
[31m-            }[m
[31m-[m
[31m-// Make a fake root object containing our value under the key of ''.[m
[31m-// Return the result of stringifying the value.[m
[31m-[m
[31m-            return str('', {'': value});[m
[31m-        };[m
[31m-    }[m
[31m-[m
[31m-[m
[31m-// If the JSON object does not yet have a parse method, give it one.[m
[31m-[m
[31m-    if (typeof JSON.parse !== 'function') {[m
[31m-        JSON.parse = function (text, reviver) {[m
[31m-[m
[31m-// The parse method takes a text and an optional reviver function, and returns[m
[31m-// a JavaScript value if the text is a valid JSON text.[m
[31m-[m
[31m-            var j;[m
[31m-[m
[31m-            function walk(holder, key) {[m
[31m-[m
[31m-// The walk method is used to recursively walk the resulting structure so[m
[31m-// that modifications can be made.[m
[31m-[m
[31m-                var k, v, value = holder[key];[m
[31m-                if (value && typeof value === 'object') {[m
[31m-                    for (k in value) {[m
[31m-                        if (Object.hasOwnProperty.call(value, k)) {[m
[31m-                            v = walk(value, k);[m
[31m-                            if (v !== undefined) {[m
[31m-                                value[k] = v;[m
[31m-                            } else {[m
[31m-                                delete value[k];[m
[31m-                            }[m
[31m-                        }[m
[31m-                    }[m
[31m-                }[m
[31m-                return reviver.call(holder, key, value);[m
[31m-            }[m
[31m-[m
[31m-[m
[31m-// Parsing happens in four stages. In the first stage, we replace certain[m
[31m-// Unicode characters with escape sequences. JavaScript handles many characters[m
[31m-// incorrectly, either silently deleting them, or treating them as line endings.[m
[31m-[m
[31m-            cx.lastIndex = 0;[m
[31m-            if (cx.test(text)) {[m
[31m-                text = text.replace(cx, function (a) {[m
[31m-                    return '\\u' +[m
[31m-                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);[m
[31m-                });[m
[31m-            }[m
[31m-[m
[31m-// In the second stage, we run the text against regular expressions that look[m
[31m-// for non-JSON patterns. We are especially concerned with '()' and 'new'[m
[31m-// because they can cause invocation, and '=' because it can cause mutation.[m
[31m-// But just to be safe, we want to reject all unexpected forms.[m
[31m-[m
[31m-// We split the second stage into 4 regexp operations in order to work around[m
[31m-// crippling inefficiencies in IE's and Safari's regexp engines. First we[m
[31m-// replace the JSON backslash pairs with '@' (a non-JSON character). Second, we[m
[31m-// replace all simple value tokens with ']' characters. Third, we delete all[m
[31m-// open brackets that follow a colon or comma or that begin the text. Finally,[m
[31m-// we look to see that the remaining characters are only whitespace or ']' or[m
[31m-// ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.[m
[31m-[m
[31m-            if (/^[\],:{}\s]*$/.[m
[31m-test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@').[m
[31m-replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').[m
[31m-replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {[m
[31m-[m
[31m-// In the third stage we use the eval function to compile the text into a[m
[31m-// JavaScript structure. The '{' operator is subject to a syntactic ambiguity[m
[31m-// in JavaScript: it can begin a block or an object literal. We wrap the text[m
[31m-// in parens to eliminate the ambiguity.[m
[31m-[m
[31m-                j = eval('(' + text + ')');[m
[31m-[m
[31m-// In the optional fourth stage, we recursively walk the new structure, passing[m
[31m-// each name/value pair to a reviver function for possible transformation.[m
[31m-[m
[31m-                return typeof reviver === 'function' ?[m
[31m-                    walk({'': j}, '') : j;[m
[31m-            }[m
[31m-[m
[31m-// If the text is not JSON parseable, then a SyntaxError is thrown.[m
[31m-[m
[31m-            throw new SyntaxError('JSON.parse');[m
[31m-        };[m
[31m-    }[m
[31m-}());[m
[1mdiff --git a/sites/all/modules/contrib/media/media-views-view-media-browser.tpl.php b/sites/all/modules/contrib/media/media-views-view-media-browser.tpl.php[m
[1mdeleted file mode 100644[m
[1mindex b37f0cf..0000000[m
[1m--- a/sites/all/modules/contrib/media/media-views-view-media-browser.tpl.php[m
[1m+++ /dev/null[m
[36m@@ -1,23 +0,0 @@[m
[31m-<?php[m
[31m-/**[m
[31m- * @file media-views-view-media-browser.tpl.php[m
[31m- * View template to display a grid of media previews in the media browser.[m
[31m- *[m
[31m- * @see views-view-list.tpl.php[m
[31m- * @see template_preprocess_media_views_view_media_browser()[m
[31m- * @ingroup views_templates[m
[31m- */[m
[31m-?>[m
[31m-[m
[31m-<?php print $wrapper_prefix; ?>[m
[31m-  <div class="clearfix">[m
[31m-    <?php print $list_type_prefix; ?>[m
[31m-      <?php foreach ($rows as $id => $row): ?>[m
[31m-        <li id="media-item-<?php print $row->fid; ?>" class="<?php print $classes_array[$id]; ?>">[m
[31m-          <?php print $row->preview; ?>[m
[31m-        </li>[m
[31m-      <?php endforeach; ?>[m
[31m-    <?php print $list_type_suffix; ?>[m
[31m-    <div id="status"></div>[m
[31m-  </div>[m
[31m-<?php print $wrapper_suffix; ?>[m
[1mdiff --git a/sites/all/modules/contrib/media/media.api.php b/sites/all/modules/contrib/media/media.api.php[m
[1mdeleted file mode 100644[m
[1mindex ecde61b..0000000[m
[1m--- a/sites/all/modules/contrib/media/media.api.php[m
[1m+++ /dev/null[m
[36m@@ -1,137 +0,0 @@[m
[31m-<?php[m
[31m-[m
[31m-/**[m
[31m- * @file[m
[31m- * Hooks provided by the Media module.[m
[31m- */[m
[31m-[m
[31m-/**[m
[31m- * Parses a url or embedded code into a unique URI.[m
[31m- *[m
[31m- * @param string $url[m
[31m- *   The original URL or embed code to parse.[m
[31m- *[m
[31m- * @return array[m
[31m- *   The unique URI for the file, based on its stream wrapper, or NULL.[m
[31m- *[m
[31m- * @see hook_media_parse_alter()[m
[31m- * @see media_parse_to_file()[m
[31m- * @see media_add_from_url_validate()[m
[31m- */[m
[31m-function hook_media_parse($url) {[m
[31m-  // Only parse URLs from our website of choice: examplevideo.com[m
[31m-  if (substr($url, 0, 27) == 'http://www.examplevideo.com') {[m
[31m-    // Each video has a 5 digit ID, i.e. http://www.examplevideo.com/12345[m
[31m-    // Grab the ID and use it in our URI.[m
[31m-    $id = substr($url, 28, 33);[m
[31m-    return file_stream_wrapper_uri_normalize('examplevideo://video/' . $id);[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Alters the parsing of urls and embedded codes into unique URIs.[m
[31m- *[m
[31m- * @param string $success[m
[31m- *   The unique URI for the file, based on its stream wrapper, or NULL.[m
[31m- * @param array $context[m
[31m- *   A nested array of contextual information containing the following keys:[m
[31m- *   - url: The original URL or embed code to parse.[m
[31m- *   - module: The name of the module which is attempting to parse the url or[m
[31m- *     embedded code into a unique URI.[m
[31m- *[m
[31m- * @see hook_media_parse()[m
[31m- * @see hook_media_browser_plugin_info()[m
[31m- * @see media_get_browser_plugin_info()[m
[31m- */[m
[31m-function hook_media_parse_alter(&$success, $context) {[m
[31m-  $url = $context['url'];[m
[31m-  $url_info = parse_url($url);[m
[31m-[m
[31m-  // Restrict users to only embedding secure links.[m
[31m-  if ($url_info['scheme'] != 'https') {[m
[31m-    $success = NULL;[m
[31m-  }[m
[31m-[m
[31m-  // Use a custom handler for detecting YouTube videos.[m
[31m-  if ($context['module' == 'media_youtube']) {[m
[31m-    $handler = new CustomYouTubeHandler($url);[m
[31m-    $success = $handler->parse($url);[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Returns a list of plugins for the media browser.[m
[31m- *[m
[31m- * @return array[m
[31m- *   A nested array of plugin information, keyed by plugin name. Each plugin[m
[31m- *   info array may have the following keys:[m
[31m- *   - title: (required) A name for the tab in the media browser.[m
[31m- *   - class: (required) The class name of the handler. This class must[m
[31m- *     implement a view() method, and may (should) extend the[m
[31m- *     @link MediaBrowserPlugin MediaBrowserPlugin @endlink class.[m
[31m- *   - weight: (optional) Integer to determine the tab order. Defaults to 0.[m
[31m- *   - access callback: (optional) A callback for user access checks.[m
[31m- *   - access arguments: (optional) An array of arguments for the user access[m
[31m- *   check.[m
[31m- *[m
[31m- * Additional custom keys may be provided for use by the handler.[m
[31m- *[m
[31m- * @see hook_media_browser_plugin_info_alter()[m
[31m- * @see media_get_browser_plugin_info()[m
[31m- */[m
[31m-function hook_media_browser_plugin_info() {[m
[31m-  $info['media_upload'] = array([m
[31m-    'title' => t('Upload'),[m
[31m-    'class' => 'MediaBrowserUpload',[m
[31m-    'weight' => -10,[m
[31m-    'access callback' => 'user_access',[m
[31m-    'access arguments' => array('create files'),[m
[31m-  );[m
[31m-[m
[31m-  return $info;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Alter the list of plugins for the media browser.[m
[31m- *[m
[31m- * @param array $info[m
[31m- *   The associative array of media browser plugin definitions from[m
[31m- *   hook_media_browser_plugin_info().[m
[31m- *[m
[31m- * @see hook_media_browser_plugin_info()[m
[31m- * @see media_get_browser_plugin_info()[m
[31m- */[m
[31m-function hook_media_browser_plugin_info_alter(&$info) {[m
[31m-  $info['media_upload']['title'] = t('Upload 2.0');[m
[31m-  $info['media_upload']['class'] = 'MediaBrowserUploadImproved';[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Alter the plugins before they are rendered.[m
[31m- *[m
[31m- * @param array $plugin_output[m
[31m- *   The associative array of media browser plugin information from[m
[31m- *   media_get_browser_plugin_info().[m
[31m- *[m
[31m- * @see hook_media_browser_plugin_info()[m
[31m- * @see media_get_browser_plugin_info()[m
[31m- */[m
[31m-function hook_media_browser_plugins_alter(&$plugin_output) {[m
[31m-  $plugin_output['upload']['form']['upload']['#title'] = t('Upload 2.0');[m
[31m-  $plugin_output['media_internet']['form']['embed_code']['#size'] = 100;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Alter a singleton of the params passed to the media browser.[m
[31m- *[m
[31m- * @param array $stored_params[m
[31m- *   An array of parameters provided when a media_browser is launched.[m
[31m- *[m
[31m- * @see media_browser()[m
[31m- * @see media_set_browser_params()[m
[31m- */[m
[31m-function hook_media_browser_params_alter(&$stored_params) {[m
[31m-  $stored_params['view_mode'] = 'custom';[m
[31m-  $stored_params['types'][] = 'document';[m
[31m-  unset($stored_params['enabledPlugins'][0]);[m
[31m-}[m
[1mdiff --git a/sites/all/modules/contrib/media/media.info b/sites/all/modules/contrib/media/media.info[m
[1mdeleted file mode 100644[m
[1mindex 02d1823..0000000[m
[1m--- a/sites/all/modules/contrib/media/media.info[m
[1m+++ /dev/null[m
[36m@@ -1,32 +0,0 @@[m
[31m-name = Media[m
[31m-description = Provides the core Media API[m
[31m-package = Media[m
[31m-core = 7.x[m
[31m-[m
[31m-dependencies[] = file_entity[m
[31m-dependencies[] = image[m
[31m-dependencies[] = views[m
[31m-[m
[31m-test_dependencies[] = token[m
[31m-[m
[31m-files[] = includes/MediaReadOnlyStreamWrapper.inc[m
[31m-files[] = includes/MediaBrowserPluginInterface.inc[m
[31m-files[] = includes/MediaBrowserPlugin.inc[m
[31m-files[] = includes/MediaBrowserUpload.inc[m
[31m-files[] = includes/MediaBrowserView.inc[m
[31m-files[] = includes/MediaEntityTranslationHandler.inc[m
[31m-files[] = includes/media_views_plugin_display_media_browser.inc[m
[31m-files[] = includes/media_views_plugin_style_media_browser.inc[m
[31m-files[] = tests/media.test[m
[31m-[m
[31m-configure = admin/config/media/browser[m
[31m-[m
[31m-; We have to add a fake version so Git checkouts do not fail Media dependencies[m
[31m-version = 7.x-2.x-dev[m
[31m-[m
[31m-; Information added by Drupal.org packaging script on 2016-12-09[m
[31m-version = "7.x-2.0-beta14"[m
[31m-core = "7.x"[m
[31m-project = "media"[m
[31m-datestamp = "1481300289"[m
[31m-[m
[1mdiff --git a/sites/all/modules/contrib/media/media.install b/sites/all/modules/contrib/media/media.install[m
[1mdeleted file mode 100644[m
[1mindex 50fe58d..0000000[m
[1m--- a/sites/all/modules/contrib/media/media.install[m
[1m+++ /dev/null[m
[36m@@ -1,1184 +0,0 @@[m
[31m-<?php[m
[31m-[m
[31m-/**[m
[31m- * @file[m
[31m- * Install, update and uninstall functions for the Media module.[m
[31m- */[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_install().[m
[31m- */[m
[31m-function media_install() {[m
[31m-  // Make sure that we set the icon base directory variable if it is not[m
[31m-  // already set.[m
[31m-  $base = variable_get('media_icon_base_directory', NULL);[m
[31m-  if (!isset($base)) {[m
[31m-    $default_base = 'public://media-icons';[m
[31m-    variable_set('media_icon_base_directory', $default_base);[m
[31m-  }[m
[31m-  try {[m
[31m-    _media_install_copy_icons();[m
[31m-  }[m
[31m-  catch (Exception $e) {[m
[31m-    watchdog_exception('media', $e);[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Copy the media file icons to files directory for use with image styles.[m
[31m- */[m
[31m-function _media_install_copy_icons() {[m
[31m-  $destination = variable_get('media_icon_base_directory', 'public://media-icons') . '/' . variable_get('media_icon_set', 'default');[m
[31m-  if (!file_prepare_directory($destination, FILE_MODIFY_PERMISSIONS || FILE_CREATE_DIRECTORY)) {[m
[31m-    throw new Exception("Unable to create directory $destination.");[m
[31m-  }[m
[31m-  // @todo If we ever add another default icon set, this should copy all images from one directory up.[m
[31m-  $source = drupal_get_path('module', 'media') . '/images/icons/' . variable_get('media_icon_set', 'default');[m
[31m-  $files = file_scan_directory($source, '/.*\.(png|jpg)$/');[m
[31m-  foreach ($files as $file) {[m
[31m-    $result = file_unmanaged_copy($file->uri, $destination, FILE_EXISTS_REPLACE);[m
[31m-    if (!$result) {[m
[31m-      throw new Exception("Unable to copy {$file->uri} to $destination.");[m
[31m-    }[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_uninstall().[m
[31m- */[m
[31m-function media_uninstall() {[m
[31m-  // Remove variables.[m
[31m-  variable_del('media_dialog_theme');[m
[31m-  variable_del('media_icon_base_directory');[m
[31m-  variable_del('media_icon_set');[m
[31m-  variable_del('media_show_deprecated_view_modes');[m
[31m-[m
[31m-  // Dialog options.[m
[31m-  variable_del('media_dialogclass');[m
[31m-  variable_del('media_modal');[m
[31m-  variable_del('media_draggable');[m
[31m-  variable_del('media_resizable');[m
[31m-  variable_del('media_minwidth');[m
[31m-  variable_del('media_width');[m
[31m-  variable_del('media_height');[m
[31m-  variable_del('media_position');[m
[31m-  variable_del('media_zindex');[m
[31m-  variable_del('media_backgroundcolor');[m
[31m-  variable_del('media_opacity');[m
[31m-  // bulk edit option[m
[31m-  variable_del('media_bulk_upload_edit');[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_update_dependencies().[m
[31m- */[m
[31m-function media_update_dependencies() {[m
[31m-  // media_update_7200() needs to convert old 'media' permissions to new 'file'[m
[31m-  // permissions, so it must run before file_entity_7208 which updates existing[m
[31m-  // 'file' permissions to be split per file type.[m
[31m-  $dependencies['file_entity'][7208] = array([m
[31m-    'media' => 7200,[m
[31m-  );[m
[31m-  // This update function requires field_update_7002() to run before it since[m
[31m-  // the field_bundle_settings variable has been split into separate variables[m
[31m-  // per entity type and bundle.[m
[31m-  $dependencies['media'][7016] = array([m
[31m-    'field' => 7002,[m
[31m-    'rules' => 7205,[m
[31m-  );[m
[31m-  // Those updates require {file_type} table created.[m
[31m-  $dependencies['media'][7204] = array([m
[31m-    'file_entity' => 7201,[m
[31m-  );[m
[31m-  // Require {file_type}.mimetypes column before updating them.[m
[31m-  $dependencies['media'][7208] = array([m
[31m-    'file_entity' => 7210,[m
[31m-  );[m
[31m-  $dependencies['media'][7212] = array([m
[31m-    'file_entity' => 7210,[m
[31m-  );[m
[31m-  return $dependencies;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_requirements().[m
[31m- */[m
[31m-function media_requirements($phase) {[m
[31m-  $t = get_t();[m
[31m-  // Make sure that file_entity module is 2.x version.[m
[31m-  // We can't add this check in .info file because drupal.org testbot can't[m
[31m-  // handle it. See #1734648.[m
[31m-  $requirements = array();[m
[31m-[m
[31m-  if ($phase == 'update') {[m
[31m-    $info = system_get_info('module', 'file_entity');[m
[31m-    if (strpos($info['version'], '7.x-2') === FALSE) {[m
[31m-      $requirements['file_entity'] = array([m
[31m-        'title' => $t('File entity 2.x'),[m
[31m-        'value' => $t('Wrong version'),[m
[31m-        'severity' => REQUIREMENT_ERROR,[m
[31m-        'description' => $t('Media 2.x requires <a href="@url">File entity 2.x</a>. Please download the correct version and make sure you have deleted the file_entity folder inside the media module directory.', array('@url' => 'http://drupal.org/project/file_entity')),[m
[31m-      );[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  return $requirements;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Deprecated update function.[m
[31m- */[m
[31m-function media_update_7000() {[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Deprecated update function.[m
[31m- */[m
[31m-function media_update_7001() {[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Create the media_type table from the media_types variable.[m
[31m- */[m
[31m-function media_update_7002() {[m
[31m-  if (db_table_exists('media_type')) {[m
[31m-    return;[m
[31m-  }[m
[31m-[m
[31m-  $schema['media_type'] = array([m
[31m-    'description' => 'Stores the settings for media types.',[m
[31m-    'fields' => array([m
[31m-      'name' => array([m
[31m-        'description' => 'The machine name of the media type.',[m
[31m-        'type' => 'varchar',[m
[31m-        'length' => 255,[m
[31m-        'not null' => TRUE,[m
[31m-        'default' => '',[m
[31m-      ),[m
[31m-      'label' => array([m
[31m-        'description' => 'The label of the media type.',[m
[31m-        'type' => 'varchar',[m
[31m-        'length' => 255,[m
[31m-        'not null' => TRUE,[m
[31m-        'default' => '',[m
[31m-      ),[m
[31m-      'base' => array([m
[31m-        'description' => 'If this is a base type (i.e. cannot be deleted)',[m
[31m-        'type' => 'int',[m
[31m-        'not null' => TRUE,[m
[31m-        'default' => 0,[m
[31m-        'size' => 'tiny',[m
[31m-      ),[m
[31m-      'weight' => array([m
[31m-        'description' => 'Weight of media type. Determines which one wins when claiming a piece of media (first wins)',[m
[31m-        'type' => 'int',[m
[31m-        'not null' => TRUE,[m
[31m-        'default' => 0,[m
[31m-        'size' => 'normal',[m
[31m-      ),[m
[31m-      'type_callback' => array([m
[31m-        'description' => 'Callback to determine if provided media is of this type.',[m
[31m-        'type' => 'varchar',[m
[31m-        'length' => 255,[m
[31m-        'not null' => FALSE,[m
[31m-        'default' => '',[m
[31m-      ),[m
[31m-      'type_callback_args' => array([m
[31m-        'type' => 'text',[m
[31m-        'not null' => FALSE,[m
[31m-        'size' => 'big',[m
[31m-        'serialize' => TRUE,[m
[31m-        'description' => 'A serialized array of name value pairs that will be passed to the callback function',[m
[31m-      ),[m
[31m-    ),[m
[31m-    'primary key' => array('name'),[m
[31m-  );[m
[31m-  db_create_table('media_type', $schema['media_type']);[m
[31m-[m
[31m-  drupal_load('module', 'media');[m
[31m-  $old_types = variable_get('media_types', array());[m
[31m-  foreach ($old_types as $type) {[m
[31m-    // Was an error in the original creation.[m
[31m-    if (isset($type->callbacks)) {[m
[31m-      unset($type->callbacks);[m
[31m-    }[m
[31m-    $type->name = $type->machine_name;[m
[31m-    unset($type->machine_name);[m
[31m-    db_merge('media_type')[m
[31m-      ->key(array('name' => $type->name))[m
[31m-      ->fields((array) $type)[m
[31m-      ->execute();[m
[31m-  }[m
[31m-  variable_del('media_types');[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * We now prefix media namespaced variables with media__, so fix old variables.[m
[31m- */[m
[31m-function media_update_7003() {[m
[31m-  drupal_load('module', 'media');[m
[31m-  foreach (media_variable_default() as $variable => $value) {[m
[31m-    if (($test = variable_get('media_' . $variable, TRUE)) == variable_get('media_' . $variable, FALSE)) {[m
[31m-      media_variable_set($variable, $test);[m
[31m-      variable_del('media_' . $variable);[m
[31m-    }[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Empty update function to trigger a menu rebuild.[m
[31m- */[m
[31m-function media_update_7004() {[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Deprecated update function.[m
[31m- */[m
[31m-function media_update_7005() {[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Rename the file table to file_managed in case head2head was used.[m
[31m- */[m
[31m-function media_update_7006() {[m
[31m-  if (db_table_exists('file') && !db_table_exists('file_managed')) {[m
[31m-    db_rename_table('file', 'file_managed');[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Deprecated update function.[m
[31m- */[m
[31m-function media_update_7007() {[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Empty function.[m
[31m- */[m
[31m-function media_update_7008() {[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Deprecated update function.[m
[31m- */[m
[31m-function media_update_7009() {[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Deprecated update function.[m
[31m- */[m
[31m-function media_update_7010() {[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Empty update function.[m
[31m- */[m
[31m-function media_update_7011() {[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Empty update function.[m
[31m- */[m
[31m-function media_update_7012() {[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Work around a core bug where text format cacheability is not updated.[m
[31m- *[m
[31m- * @see http://drupal.org/node/993230[m
[31m- */[m
[31m-function media_update_7013() {[m
[31m-  $formats = filter_formats();[m
[31m-  foreach ($formats as $format) {[m
[31m-    $format->filters = filter_list_format($format->format);[m
[31m-    // filter_format_save() expects filters to be an array, however[m
[31m-    // filter_list_format() gives us objects.[m
[31m-    foreach ($format->filters as $key => $value) {[m
[31m-      $format->filters[$key] = (array) $value;[m
[31m-    }[m
[31m-    filter_format_save($format);[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Rename the media__dialog_get_theme_name variable to media__dialog_theme.[m
[31m- */[m
[31m-function media_update_7014() {[m
[31m-  if ($old_value = variable_get('media__dialog_get_theme_name')) {[m
[31m-    variable_del('media__dialog_get_theme_name');[m
[31m-    variable_set('media__dialog_theme', $old_value);[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Empty update function to trigger a registry rebuild.[m
[31m- */[m
[31m-function media_update_7015() {[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Convert Media entities to File entities.[m
[31m- *[m
[31m- * This update function requires field_update_7002() to run before it since[m
[31m- * the field_bundle_settings variable has been split into separate variables[m
[31m- * per entity type and bundle.[m
[31m- *[m
[31m- * @see http://drupal.org/node/1418708[m
[31m- * @see http://drupal.org/node/1211008[m
[31m- */[m
[31m-function media_update_7016() {[m
[31m-  // Allow File Entity module to take over the {file_managed}.type field. It[m
[31m-  // will create new indexes as it needs to, but it doesn't know about old ones,[m
[31m-  // so delete them.[m
[31m-  if (db_index_exists('file_managed', 'file_type')) {[m
[31m-    db_drop_index('file_managed', 'file_type');[m
[31m-  }[m
[31m-  module_enable(array('file_entity'));[m
[31m-[m
[31m-  // Move all field instances from Media entity to File entity.[m
[31m-  $instances = field_read_instances(array('entity_type' => 'media'), array('include_inactive' => TRUE, 'include_deleted' => TRUE));[m
[31m-  foreach ($instances as $instance) {[m
[31m-    // Skip the old self-referencing file field. It will be deleted later in[m
[31m-    // this function.[m
[31m-    if ($instance['field_name'] === 'file') {[m
[31m-      continue;[m
[31m-    }[m
[31m-[m
[31m-    // @todo Convert this to use _update_7000_field_read_fields()[m
[31m-    $fields = field_read_fields(array('id' => $instance['field_id']), array('include_inactive' => TRUE, 'include_deleted' => TRUE));[m
[31m-    $field = $fields[$instance['field_id']];[m
[31m-[m
[31m-    // There is no API for updating the entity_type foreign key within field[m
[31m-    // data storage. We can do a direct db_update() for when the default SQL[m
[31m-    // storage back-end is being used, but must skip updating fields that use a[m
[31m-    // different storage type.[m
[31m-    if ($field['storage']['type'] !== 'field_sql_storage' || !module_exists('field_sql_storage') || !$field['storage']['active']) {[m
[31m-      $messages[] = t('Cannot update field %id (%field_name) because it does not use the field_sql_storage storage type.', array([m
[31m-        '%id' => $field['id'],[m
[31m-        '%field_name' => $field['field_name'],[m
[31m-      ));[m
[31m-      continue;[m
[31m-    }[m
[31m-[m
[31m-    // Update the data tables.[m
[31m-    $table_name = _field_sql_storage_tablename($field);[m
[31m-    $revision_name = _field_sql_storage_revision_tablename($field);[m
[31m-    db_update($table_name)[m
[31m-      ->fields(array('entity_type' => 'file'))[m
[31m-      ->condition('entity_type', 'media')[m
[31m-      ->condition('bundle', $instance['bundle'])[m
[31m-      ->execute();[m
[31m-    db_update($revision_name)[m
[31m-      ->fields(array('entity_type' => 'file'))[m
[31m-      ->condition('entity_type', 'media')[m
[31m-      ->condition('bundle', $instance['bundle'])[m
[31m-      ->execute();[m
[31m-[m
[31m-    // Once all the data has been updated, update the {field_config_instance}[m
[31m-    // record.[m
[31m-    db_update('field_config_instance')[m
[31m-      ->fields(array('entity_type' => 'file'))[m
[31m-      ->condition('id', $instance['id'])[m
[31m-      ->execute();[m
[31m-  }[m
[31m-[m
[31m-  // Update the field_bundle_settings configuration variable: move media bundle[m
[31m-  // settings to file bundles, and move settings of the old self-referencing[m
[31m-  // file field to the new file pseudo-field.[m
[31m-  foreach ($instances as $instance) {[m
[31m-    if ($instance['field_name'] === 'file' && !$instance['deleted']) {[m
[31m-      $file_settings = field_bundle_settings('file', $instance['bundle']);[m
[31m-      $media_settings = field_bundle_settings('media', $instance['bundle']);[m
[31m-      $file_settings = array_merge($file_settings, $media_settings);[m
[31m-      if (isset($instance['widget']['weight'])) {[m
[31m-        $file_settings['extra_fields']['form']['file']['weight'] = $instance['widget']['weight'];[m
[31m-      }[m
[31m-      if (isset($instance['display'])) {[m
[31m-        foreach ($instance['display'] as $view_mode => $display) {[m
[31m-          if (isset($display['weight'])) {[m
[31m-            $file_settings['extra_fields']['display']['file'][$view_mode]['weight'] = $display['weight'];[m
[31m-          }[m
[31m-          if (isset($display['type'])) {[m
[31m-            $file_settings['extra_fields']['display']['file'][$view_mode]['visible'] = ($display['type'] != 'hidden');[m
[31m-          }[m
[31m-        }[m
[31m-      }[m
[31m-      field_bundle_settings('file', $instance['bundle'], $file_settings);[m
[31m-    }[m
[31m-  }[m
[31m-  // Delete old media bundle settings.[m
[31m-  db_delete('variable')[m
[31m-    ->condition('name', db_like('field_bundle_settings_media__') . '%', 'LIKE')[m
[31m-    ->execute();[m
[31m-[m
[31m-  // Copy field formatter settings of old self-referencing file field to file[m
[31m-  // pseudo-field formatter settings.[m
[31m-  $file_displays = variable_get('file_displays', array());[m
[31m-  foreach ($instances as $instance) {[m
[31m-    if ($instance['field_name'] === 'file' && !$instance['deleted']) {[m
[31m-      if (isset($instance['display'])) {[m
[31m-        foreach ($instance['display'] as $view_mode => $display) {[m
[31m-          if (isset($display['type']) && $display['type'] != 'hidden') {[m
[31m-            $file_formatter = 'file_field_' . $display['type'];[m
[31m-            $file_displays[$instance['bundle']][$view_mode][$file_formatter]['status'] = TRUE;[m
[31m-            if (isset($display['settings'])) {[m
[31m-              $file_displays[$instance['bundle']][$view_mode][$file_formatter]['settings'] = $display['settings'];[m
[31m-            }[m
[31m-          }[m
[31m-        }[m
[31m-      }[m
[31m-    }[m
[31m-  }[m
[31m-  variable_set('file_displays', $file_displays);[m
[31m-[m
[31m-  // Delete the old self-referencing file field instances. If all instances are[m
[31m-  // deleted, field_delete_instance() will delete the field too.[m
[31m-  foreach ($instances as $instance) {[m
[31m-    if ($instance['field_name'] === 'file' && !$instance['deleted']) {[m
[31m-      field_delete_instance($instance);[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  field_cache_clear();[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Move file display configuration.[m
[31m- *[m
[31m- * Move file display configurations from the 'file_displays' variable to the[m
[31m- * {file_display} table.[m
[31m- */[m
[31m-function media_update_7017() {[m
[31m-  // If the {file_display} table doesn't exist, then the File Entity module's[m
[31m-  // update functions will automatically take care of migrating the[m
[31m-  // configurations. However, if file_entity_update_7001() has already run[m
[31m-  // prior to media_update_7016(), run it again in order to capture those[m
[31m-  // configurations too.[m
[31m-  if (db_table_exists('file_display') && function_exists('file_entity_update_7001')) {[m
[31m-    module_load_include('install', 'file_entity', 'file_entity');[m
[31m-    file_entity_update_7001();[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Empty update function to trigger a menu rebuild.[m
[31m- */[m
[31m-function media_update_7018() {[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Update old view mode formaters.[m
[31m- *[m
[31m- * Update old per-view-mode media field formatters to the generic media[m
[31m- * formatter with a setting.[m
[31m- */[m
[31m-function media_update_7019() {[m
[31m-  $instances = array();[m
[31m-  $fields = field_read_fields(array('type' => 'media'), array('include_inactive' => TRUE));[m
[31m-  foreach ($fields as $field) {[m
[31m-    $instances = array_merge($instances, field_read_instances(array('field_id' => $field['id']), array('include_inactive' => TRUE)));[m
[31m-  }[m
[31m-  foreach ($instances as $instance) {[m
[31m-    $update_instance = FALSE;[m
[31m-    foreach ($instance['display'] as $view_mode => $display) {[m
[31m-      if (in_array($display['type'], array('media_link', 'media_preview', 'media_small', 'media_large', 'media_original'))) {[m
[31m-        $update_instance = TRUE;[m
[31m-        $instance['display'][$view_mode]['type'] = 'media';[m
[31m-        $instance['display'][$view_mode]['settings'] = array('file_view_mode' => $display['type']);[m
[31m-      }[m
[31m-    }[m
[31m-    if ($update_instance) {[m
[31m-      field_update_instance($instance);[m
[31m-    }[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Delete the wysiwyg_allowed_types variable if it is the same as default.[m
[31m- */[m
[31m-function media_update_7020() {[m
[31m-  if (variable_get('media__wysiwyg_allowed_types') == array('image', 'video')) {[m
[31m-    variable_del('media__wysiwyg_allowed_types');[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Rerun media_update_7002() due to a typo that would prevent table creation.[m
[31m- */[m
[31m-function media_update_7021() {[m
[31m-  media_update_7002();[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Replace 'view media' perm from all users having the role with 'view file'.[m
[31m- */[m
[31m-function media_update_7200() {[m
[31m-  $perms = user_permission_get_modules();[m
[31m-  if (!isset($perms['view files'])) {[m
[31m-    throw new DrupalUpdateException('The File Entity module needs to be upgraded before continuing.');[m
[31m-  }[m
[31m-  else {[m
[31m-    $roles = user_roles(FALSE, 'view media');[m
[31m-    $permissions = array([m
[31m-      'view media' => FALSE,[m
[31m-      'view files' => TRUE,[m
[31m-    );[m
[31m-    foreach ($roles as $rid => $role) {[m
[31m-      user_role_change_permissions($rid, $permissions);[m
[31m-    }[m
[31m-    $roles = user_roles(FALSE, 'edit media');[m
[31m-    $permissions = array([m
[31m-      'edit media' => FALSE,[m
[31m-      'edit any files' => TRUE,[m
[31m-    );[m
[31m-    if (function_exists('file_entity_list_permissions')) {[m
[31m-      unset($permissions['edit any files']);[m
[31m-[m
[31m-      foreach (file_entity_permissions_get_configured_types() as $type) {[m
[31m-        $permissions += file_entity_list_permissions($type);[m
[31m-      }[m
[31m-    }[m
[31m-    foreach ($roles as $rid => $role) {[m
[31m-      user_role_change_permissions($rid, $permissions);[m
[31m-    }[m
[31m-    $roles = user_roles(FALSE, 'administer media');[m
[31m-    $permissions = array([m
[31m-      'administer media' => FALSE,[m
[31m-      'administer files' => TRUE,[m
[31m-    );[m
[31m-    foreach ($roles as $rid => $role) {[m
[31m-      user_role_change_permissions($rid, $permissions);[m
[31m-    }[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Handle existing media fields.[m
[31m- *[m
[31m- * Enable the new Media Field module if this site uses "media" fields. File[m
[31m- * fields are now preferred for storing media.[m
[31m- */[m
[31m-function media_update_7201() {[m
[31m-  $fields = field_info_fields();[m
[31m-  foreach ($fields as $field) {[m
[31m-    if ($field['type'] == 'media') {[m
[31m-      // This update function may run even if Media is not enabled. Don't enable[m
[31m-      // Media Field if its dependencies aren't already enabled.[m
[31m-      module_enable(array('mediafield'), FALSE);[m
[31m-[m
[31m-      // Update entries in file_usage so that they are associated with Media[m
[31m-      // Field rather than Media.[m
[31m-      // @TODO This update function may conflict with[m
[31m-      // http://drupal.org/node/1268116[m
[31m-      db_update('file_usage')[m
[31m-        ->condition('module', 'media')[m
[31m-        ->fields(array('module' => 'mediafield'))[m
[31m-        ->execute();[m
[31m-[m
[31m-      return t('The "Media" field type has been moved to the new "Media Field" module. This site uses media fields, so the Media Field module has been enabled.');[m
[31m-    }[m
[31m-  }[m
[31m-  return t('The "Media" field type has been moved to the new "Media Field" module. File fields can be used to store media.');[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Enable the Views module if it is not already enabled.[m
[31m- */[m
[31m-function media_update_7202() {[m
[31m-  module_enable(array('views'));[m
[31m-  if (!module_exists('views')) {[m
[31m-    throw new DrupalUpdateException('The <a href="https://drupal.org/project/views">Views module</a> must be downloaded and available for Media updates to proceed.');[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Empty update function to trigger cache clear.[m
[31m- */[m
[31m-function media_update_7203() {[m
[31m-  // Do nothing.[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Update old Media view modes to the new File Entity ones.[m
[31m- */[m
[31m-function media_update_7204() {[m
[31m-  $view_mode_updates = array([m
[31m-    'media_preview' => 'preview',[m
[31m-    'media_small' => 'teaser',[m
[31m-    'media_large' => 'full',[m
[31m-  );[m
[31m-[m
[31m-  // Update the media__wysiwyg_default_view_mode variable.[m
[31m-  $wysiwyg_default_view_mode = variable_get('media__wysiwyg_default_view_mode');[m
[31m-  if (isset($wysiwyg_default_view_mode) && isset($view_mode_updates[$wysiwyg_default_view_mode])) {[m
[31m-    $wysiwyg_default_view_mode = $view_mode_updates[$wysiwyg_default_view_mode];[m
[31m-    variable_set('media__wysiwyg_default_view_mode', $wysiwyg_default_view_mode);[m
[31m-  }[m
[31m-[m
[31m-  // Update view mode references in the 'field_bundle_settings' variable.[m
[31m-  $field_bundle_settings = variable_get('field_bundle_settings');[m
[31m-  if (!empty($field_bundle_settings['file'])) {[m
[31m-    foreach ($field_bundle_settings['file'] as $file_type => $info) {[m
[31m-      // Per-bundle information about the view modes.[m
[31m-      foreach ($view_mode_updates as $old_view_mode => $new_view_mode) {[m
[31m-        if (isset($info['view_modes'][$old_view_mode])) {[m
[31m-          $field_bundle_settings['file'][$file_type]['view_modes'][$new_view_mode] = $info['view_modes'][$old_view_mode];[m
[31m-          unset($field_bundle_settings['file'][$file_type]['view_modes'][$old_view_mode]);[m
[31m-        }[m
[31m-        // The File Entity module defaults to not use custom settings for the[m
[31m-        // new view modes, but the Media module used to default to using custom[m
[31m-        // settings, so if this variable is not defined, use the prior default.[m
[31m-        if (!isset($field_bundle_settings['file'][$file_type]['view_modes'][$new_view_mode]['custom_settings'])) {[m
[31m-          $field_bundle_settings['file'][$file_type]['view_modes'][$new_view_mode]['custom_settings'] = TRUE;[m
[31m-        }[m
[31m-      }[m
[31m-[m
[31m-      // Settings for the "extra fields" configured on the Manage Display page.[m
[31m-      if (!empty($info['extra_fields']['display'])) {[m
[31m-        foreach ($info['extra_fields']['display'] as $extra_field_name => $extra_field_info) {[m
[31m-          foreach ($view_mode_updates as $old_view_mode => $new_view_mode) {[m
[31m-            if (isset($extra_field_info[$old_view_mode])) {[m
[31m-              $field_bundle_settings['file'][$file_type]['extra_fields']['display'][$extra_field_name][$new_view_mode] = $extra_field_info[$old_view_mode];[m
[31m-              unset($field_bundle_settings['file'][$file_type]['extra_fields']['display'][$extra_field_name][$old_view_mode]);[m
[31m-            }[m
[31m-          }[m
[31m-        }[m
[31m-      }[m
[31m-    }[m
[31m-  }[m
[31m-  variable_set('field_bundle_settings', $field_bundle_settings);[m
[31m-[m
[31m-  // Move settings for fields attached to files from the old view modes to the[m
[31m-  // new ones.[m
[31m-  $instances = field_read_instances(array('entity_type' => 'file'));[m
[31m-  foreach ($instances as $instance) {[m
[31m-    $updated = FALSE;[m
[31m-    foreach ($view_mode_updates as $old_view_mode => $new_view_mode) {[m
[31m-      if (isset($instance['display'][$old_view_mode])) {[m
[31m-        $instance['display'][$new_view_mode] = $instance['display'][$old_view_mode];[m
[31m-        unset($instance['display'][$old_view_mode]);[m
[31m-        $updated = TRUE;[m
[31m-      }[m
[31m-    }[m
[31m-    if ($updated) {[m
[31m-      field_update_instance($instance);[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  // Move "Manage file display" settings from old view modes to new ones.[m
[31m-  $file_display_names = db_query('SELECT name FROM {file_display}')->fetchCol();[m
[31m-  foreach ($file_display_names as $old_file_display_name) {[m
[31m-    list($file_type, $view_mode, $formatter) = explode('__', $old_file_display_name, 3);[m
[31m-    if (isset($view_mode_updates[$view_mode])) {[m
[31m-      $view_mode = $view_mode_updates[$view_mode];[m
[31m-      $new_file_display_name = implode('__', array($file_type, $view_mode, $formatter));[m
[31m-      db_delete('file_display')->condition('name', $new_file_display_name)->execute();[m
[31m-      db_update('file_display')->fields(array('name' => $new_file_display_name))->condition('name', $old_file_display_name)->execute();[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  // Update file/image/media fields that use a formatter that reference an old[m
[31m-  // file view modes to reference the new ones.[m
[31m-  foreach (field_read_instances() as $instance) {[m
[31m-    if (!empty($instance['display'])) {[m
[31m-      $updated = FALSE;[m
[31m-      foreach ($instance['display'] as $instance_view_mode => $display) {[m
[31m-        if (isset($display['settings']['file_view_mode']) && isset($view_mode_updates[$display['settings']['file_view_mode']])) {[m
[31m-          $instance['display'][$instance_view_mode]['settings']['file_view_mode'] = $view_mode_updates[$display['settings']['file_view_mode']];[m
[31m-          $updated = TRUE;[m
[31m-        }[m
[31m-      }[m
[31m-      if ($updated) {[m
[31m-        field_update_instance($instance);[m
[31m-      }[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  // Update formatter settings that reference the old view modes within saved[m
[31m-  // Views.[m
[31m-  if (db_table_exists('views_display')) {[m
[31m-    $result = db_select('views_display', 'v')->fields('v', array('vid', 'id', 'display_options'))->execute();[m
[31m-    foreach ($result as $record) {[m
[31m-      if (!empty($record->display_options)) {[m
[31m-        $display_options = unserialize($record->display_options);[m
[31m-        if (_media_update_7204_update_views_display_options($display_options, $view_mode_updates)) {[m
[31m-          db_update('views_display')[m
[31m-            ->fields(array('display_options' => serialize($display_options)))[m
[31m-            ->condition('vid', $record->vid)[m
[31m-            ->condition('id', $record->id)[m
[31m-            ->execute();[m
[31m-        }[m
[31m-      }[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  // Update formatter settings that reference the old view modes within unsaved[m
[31m-  // Views in the CTools object cache. Objects in the CTools cache are instances[m
[31m-  // of classes, so the Views module must be enabled to unserialize it[m
[31m-  // correctly.[m
[31m-  if (db_table_exists('ctools_object_cache') && module_exists('views')) {[m
[31m-    $result = db_select('ctools_object_cache', 'c')->fields('c', array('sid', 'name', 'obj', 'data'))->condition('obj', 'view')->execute();[m
[31m-    foreach ($result as $record) {[m
[31m-      $view = unserialize($record->data);[m
[31m-      if (!empty($view->display)) {[m
[31m-        $updated = FALSE;[m
[31m-        foreach ($view->display as $display_name => $display) {[m
[31m-          if (!empty($display->display_options) && _media_update_7204_update_views_display_options($display->display_options, $view_mode_updates)) {[m
[31m-            $updated = TRUE;[m
[31m-          }[m
[31m-        }[m
[31m-        if ($updated) {[m
[31m-          db_update('ctools_object_cache')[m
[31m-            ->fields(array('data' => serialize($view)))[m
[31m-            ->condition('sid', $record->sid)[m
[31m-            ->condition('name', $record->name)[m
[31m-            ->condition('obj', $record->obj)[m
[31m-            ->execute();[m
[31m-        }[m
[31m-      }[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  // Clear caches that might contain stale Views displays.[m
[31m-  if (module_exists('views')) {[m
[31m-    cache_clear_all('*', 'cache_views', TRUE);[m
[31m-    cache_clear_all('*', 'cache_views_data', TRUE);[m
[31m-  }[m
[31m-  if (module_exists('block')) {[m
[31m-    cache_clear_all('*', 'cache_block', TRUE);[m
[31m-  }[m
[31m-  cache_clear_all('*', 'cache_page', TRUE);[m
[31m-[m
[31m-  // We still have the old media_link and media_original view modes that must be[m
[31m-  // supported for now.[m
[31m-  // @TODO: Make this apply only to updates from Media 1.x.[m
[31m-  // @see media_entity_info_alter()[m
[31m-  variable_set('media__show_deprecated_view_modes', TRUE);[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Drop the unused {media_list_type} table.[m
[31m- */[m
[31m-function media_update_7205() {[m
[31m-  if (db_table_exists('media_list_type')) {[m
[31m-    db_drop_table('media_list_type');[m
[31m-    return t('Dropped the unused {media_list_type} table.');[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Move default file display configurations to the database.[m
[31m- */[m
[31m-function media_update_7206() {[m
[31m-  module_load_include('inc', 'file_entity', 'file_entity.file_api');[m
[31m-  module_load_include('inc', 'ctools', 'includes/export');[m
[31m-  $default_image_styles = array([m
[31m-    'preview' => 'square_thumbnail',[m
[31m-    'teaser' => 'medium',[m
[31m-    'full' => 'large',[m
[31m-  );[m
[31m-[m
[31m-  // Only needed by sites that updated from Media 1.x.[m
[31m-  // @see media_entity_info_alter()[m
[31m-  if (variable_get('media__show_deprecated_view_modes')) {[m
[31m-    $default_image_styles['media_original'] = '';[m
[31m-  }[m
[31m-[m
[31m-  // Clear out the ctools cache so that the old default implementations[m
[31m-  // are removed.[m
[31m-  ctools_export_load_object_reset('file_display');[m
[31m-  foreach ($default_image_styles as $view_mode => $image_style) {[m
[31m-    $existing_displays = file_displays_load('image', $view_mode, TRUE);[m
[31m-    // Only insert default config into the database if no existing[m
[31m-    // configuration is found.[m
[31m-    if (!isset($existing_displays['file_image'])) {[m
[31m-      $display_name = 'image__' . $view_mode . '__file_image';[m
[31m-      $display = array([m
[31m-        'api_version' => 1,[m
[31m-        'name' => $display_name,[m
[31m-        'status' => 1,[m
[31m-        'weight' => 5,[m
[31m-        'settings' => array('image_style' => $image_style),[m
[31m-        'export_type' => NULL,[m
[31m-      );[m
[31m-      file_display_save((object) $display);[m
[31m-    }[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Trigger cache clear.[m
[31m- *[m
[31m- * Empty update function to trigger cache clear after changing access callbacks[m
[31m- * to file_entity_access.[m
[31m- */[m
[31m-function media_update_7207() {[m
[31m-  // Do nothing.[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Drop the media_types table and migrate files to file_entity types.[m
[31m- */[m
[31m-function media_update_7208() {[m
[31m-  // Reset static cache to ensure our new file types are recognized[m
[31m-  drupal_static_reset('ctools_export_load_object_table_exists');[m
[31m-[m
[31m-  if (!db_table_exists('media_type')) {[m
[31m-    // No types to migrate.[m
[31m-    return;[m
[31m-  }[m
[31m-  // @see http://drupal.org/node/1292382[m
[31m-  if (!function_exists('file_type_get_enabled_types')) {[m
[31m-    throw new DrupalUpdateException('The File Entity module needs to be upgraded before continuing.');[m
[31m-  }[m
[31m-  else {[m
[31m-    $existing_types = db_select('media_type', 'mt')[m
[31m-      ->orderBy('weight')[m
[31m-      ->fields('mt')[m
[31m-      ->execute()[m
[31m-      // Will key by the name field.[m
[31m-      ->fetchAllAssoc('name');[m
[31m-    foreach ($existing_types as &$type) {[m
[31m-      $type->type_callback_args = unserialize($type->type_callback_args);[m
[31m-    }[m
[31m-[m
[31m-    include_once DRUPAL_ROOT . '/includes/file.mimetypes.inc';[m
[31m-    $mapping = file_mimetype_mapping();[m
[31m-    // We do not migrate this type, since there is no way to handle its weight.[m
[31m-    unset($existing_types['default']);[m
[31m-    foreach ($existing_types as $type) {[m
[31m-      $extensions = isset($type->type_callback_args['extensions']) ? $type->type_callback_args['extensions'] : array();[m
[31m-      $mimetypes = isset($type->type_callback_args['mimetypes']) ? $type->type_callback_args['mimetypes'] : array();[m
[31m-      // Add mimetypes by extensions.[m
[31m-      foreach ($extensions as $extension) {[m
[31m-        if (isset($mapping['extensions'][$extension])) {[m
[31m-          $type->mimetypes[] = $mapping['mimetypes'][$mapping['extensions'][$extension]];[m
[31m-        }[m
[31m-      }[m
[31m-      // Add rest mimetypes.[m
[31m-      foreach ($mimetypes as $mimetype) {[m
[31m-        // Mimetype is a regex pattern.[m
[31m-        foreach ($mapping['mimetypes'] as $mapping_mimetype) {[m
[31m-          if (preg_match($mimetype, $mapping_mimetype) && !in_array($mapping_mimetype, $type->mimetypes)) {[m
[31m-            $type->mimetypes[] = $mapping_mimetype;[m
[31m-          }[m
[31m-        }[m
[31m-      }[m
[31m-      $type->streams = isset($type->type_callback_args['streams']) ? $type->type_callback_args['streams'] : array();[m
[31m-      $type->type = $type->name;[m
[31m-      // Merge existing type with new ones.[m
[31m-      if ($new_type = file_type_load($type->name)) {[m
[31m-        $new_type->mimetypes = array_merge($type->mimetypes, $new_type->mimetypes);[m
[31m-        $new_type->streams = array_merge($type->streams, $new_type->streams);[m
[31m-      }[m
[31m-      else {[m
[31m-        $new_type = $type;[m
[31m-      }[m
[31m-      file_type_save($new_type);[m
[31m-    }[m
[31m-    db_drop_table('media_type');[m
[31m-[m
[31m-    // Special treatment for old media application type to new file_entity[m
[31m-    // document one. Add some more mimetypes to document.[m
[31m-    $document_type = file_type_load('document');[m
[31m-    if (!$document_type) {[m
[31m-      return;[m
[31m-    }[m
[31m-    foreach ($mapping['mimetypes'] as $mimetype) {[m
[31m-      $is_document = strpos($mimetype, 'document') !== FALSE || strpos($mimetype, 'application/vnd.ms-') !== FALSE;[m
[31m-      if ($is_document && !in_array($mimetype, $document_type->mimetypes)) {[m
[31m-        $document_type->mimetypes[] = $mimetype;[m
[31m-      }[m
[31m-    }[m
[31m-    file_type_save($document_type);[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Enable the hidden media_migrate_file_types module to provide a UI to update[m
[31m- * {file_managed}.type with the new file types provided by file_entity.[m
[31m- */[m
[31m-function media_update_7209() {[m
[31m-  drupal_load('module', 'media_migrate_file_types');[m
[31m-[m
[31m-  if (_media_migrate_file_types_get_migratable_file_types()) {[m
[31m-    module_enable(array('media_migrate_file_types'));[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Delete deceprated media__type_icon_directory variable.[m
[31m- */[m
[31m-function media_update_7210() {[m
[31m-  variable_del('media__type_icon_directory');[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Save a square_thumbnail image style in the database for legacy support if one[m
[31m- * does not already exist.[m
[31m- */[m
[31m-function media_update_7211() {[m
[31m-  $default_style = array([m
[31m-    'name' => 'square_thumbnail'[m
[31m-  );[m
[31m-[m
[31m-  // Clear the image cache to remove any old image styles that only exist in[m
[31m-  // code.[m
[31m-  cache_clear_all('*', 'cache_image', TRUE);[m
[31m-[m
[31m-  // Check if the square_thumbnail image style exists.[m
[31m-  // The style will only exist if the user has customized it, otherwise it would[m
[31m-  // have been removed by clearing the image style cache.[m
[31m-  $existing_style = image_style_load('square_thumbnail');[m
[31m-[m
[31m-  // Save a square_thumbnail image style in the database for legacy support.[m
[31m-  // This is only necessary if a square_thumbnail image style doesn't already[m
[31m-  // exist.[m
[31m-  if (empty($existing_style)) {[m
[31m-    $style = image_style_save($default_style);[m
[31m-[m
[31m-    $effect = array([m
[31m-      'name' => 'image_scale_and_crop',[m
[31m-      'data' => array([m
[31m-        'width' => 180,[m
[31m-        'height' => 180,[m
[31m-        'weight' => 0,[m
[31m-      ),[m
[31m-      'isid' => $style['isid'],[m
[31m-    );[m
[31m-[m
[31m-    image_effect_save($effect);[m
[31m-  }[m
[31m-[m
[31m-  return t('Saved a square_thumbnail image style in the database for legacy support if one did not already exist.');[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Utility function for update 7204. Updates display options within Views.[m
[31m- */[m
[31m-function _media_update_7204_update_views_display_options(&$display_options, $view_mode_updates) {[m
[31m-  $updated = FALSE;[m
[31m-[m
[31m-  // Update fields that use a formatter with a file_view_mode formatter setting.[m
[31m-  if (!empty($display_options['fields'])) {[m
[31m-    foreach ($display_options['fields'] as $field_name => $field_display) {[m
[31m-      if (isset($field_display['settings']['file_view_mode']) && isset($view_mode_updates[$field_display['settings']['file_view_mode']])) {[m
[31m-        $display_options['fields'][$field_name]['settings']['file_view_mode'] = $view_mode_updates[$field_display['settings']['file_view_mode']];[m
[31m-        $updated = TRUE;[m
[31m-      }[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  // Update Views that display files directly using a row plugin with a view[m
[31m-  // mode setting.[m
[31m-  if (isset($display_options['row_plugin']) && $display_options['row_plugin'] === 'file' && isset($display_options['row_options']['view_mode']) && isset($view_mode_updates[$display_options['row_options']['view_mode']])) {[m
[31m-    $display_options['row_options']['view_mode'] = $view_mode_updates[$display_options['row_options']['view_mode']];[m
[31m-    $updated = TRUE;[m
[31m-  }[m
[31m-  return $updated;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Re-create application file type for legacy reasons.[m
[31m- */[m
[31m-function media_update_7212() {[m
[31m-  module_load_include('inc', 'file_entity', 'file_entity.file_api');[m
[31m-  if (!file_type_load('application')) {[m
[31m-    $application = (object) array([m
[31m-      'api_version' => 1,[m
[31m-      'type' => 'application',[m
[31m-      'label' => t('Application'),[m
[31m-      'description' => t('Multipurpose type - kept to support older sites.'),[m
[31m-      'mimetypes' => array(),[m
[31m-      'streams' => array([m
[31m-        'public',[m
[31m-      ),[m
[31m-    );[m
[31m-[m
[31m-    file_type_save($application);[m
[31m-    $application = file_type_load('application');[m
[31m-    file_type_disable($application);[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Remove the obsolete file_extensions variable.[m
[31m- */[m
[31m-function media_update_7213() {[m
[31m-  $media_file_extensions = explode(' ', variable_get('media__file_extensions'));[m
[31m-  $file_entity_file_extensions = explode(' ', variable_get('file_entity_default_allowed_extensions', 'jpg jpeg gif png txt doc docx xls xlsx pdf ppt pptx pps ppsx odt ods odp mp3 mov mp4 m4a m4v mpeg avi ogg oga ogv weba webp webm'));[m
[31m-[m
[31m-  // Preserve any custom file extensions.[m
[31m-  if (array_diff($media_file_extensions, $file_entity_file_extensions)) {[m
[31m-    $combined_file_extensions = array_unique(array_merge($file_entity_file_extensions, $media_file_extensions));[m
[31m-    variable_set('file_entity_default_allowed_extensions', implode(' ' , $combined_file_extensions));[m
[31m-  }[m
[31m-[m
[31m-  variable_del('media__file_extensions');[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Drop the legacy {media_filter_usage} table.[m
[31m- */[m
[31m-function media_update_7214() {[m
[31m-  if (db_table_exists('media_filter_usage')) {[m
[31m-    db_drop_table('media_filter_usage');[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Skipped to run media_update_7217().[m
[31m- */[m
[31m-function media_update_7216() {[m
[31m-  // Do nothing.[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Copy file type icons to public files directory.[m
[31m- */[m
[31m-function media_update_7217() {[m
[31m-  // Remove any trailing slashes from the icon base directory variable.[m
[31m-  $dir = variable_get('media__icon_base_directory');[m
[31m-  if (!empty($dir)) {[m
[31m-    $dir = rtrim($dir, '/');[m
[31m-    variable_set('media__icon_base_directory', $dir);[m
[31m-  }[m
[31m-[m
[31m-  try {[m
[31m-    _media_install_copy_icons();[m
[31m-  }[m
[31m-  catch (Exception $e) {[m
[31m-    throw new DrupalUpdateException($e->getMessage());[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Drop the legacy {cache_media_xml} table.[m
[31m- */[m
[31m-function media_update_7218() {[m
[31m-  if (db_table_exists('cache_media_xml')) {[m
[31m-    db_drop_table('cache_media_xml');[m
[31m-  }[m
[31m-[m
[31m-  variable_del('media__xml_cache_expire');[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Enable the Media WYSIWYG submodule.[m
[31m- */[m
[31m-function media_update_7219() {[m
[31m-  if (module_exists('wysiwyg')) {[m
[31m-    module_enable(array('media_wysiwyg'));[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Delete the deprecated media__file_list_size variable.[m
[31m- */[m
[31m-function media_update_7220() {[m
[31m-  variable_del('media__file_list_size');[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Enable the Media Bulk Upload submodule.[m
[31m- */[m
[31m-function media_update_7221() {[m
[31m-  if (module_exists('multiform') && module_exists('plupload')) {[m
[31m-    module_enable(array('media_bulk_upload'));[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Delete the deprecated media__display_types_migration_mess variable.[m
[31m- */[m
[31m-function media_update_7222() {[m
[31m-  variable_del('media__display_types_migration_mess');[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Delete legacy variables.[m
[31m- */[m
[31m-function media_update_7223() {[m
[31m-  variable_del('media__max_filesize');[m
[31m-  variable_del('media__debug');[m
[31m-  variable_del('media__xml_cache_expire');[m
[31m-  variable_del('media__show_file_type_rebuild_nag');[m
[31m-  variable_del('media__field_select_media_text');[m
[31m-  variable_del('media__field_remove_media_text');[m
[31m-  variable_del('media__browser_library_empty_message');[m
[31m-  variable_del('media__browser_pager_limit');[m
[31m-  variable_del('media__browser_viewtype_default');[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Rename variables, removing variable namespace.[m
[31m- */[m
[31m-function media_update_7224() {[m
[31m-  // Create an array of variables sans 'media' prefix.[m
[31m-  $variables = array('wysiwyg_title', 'wysiwyg_icon_title', 'wysiwyg_default_view_mode', 'wysiwyg_upload_directory', 'wysiwyg_allowed_types', 'wysiwyg_allowed_attributes', 'wysiwyg_browser_plugins', 'dialog_theme', 'import_batch_size', 'fromurl_supported_schemes', 'icon_base_directory', 'icon_set', 'show_deprecated_view_modes');[m
[31m-[m
[31m-  foreach ($variables as $variable) {[m
[31m-    // Find the value of the old variable.[m
[31m-    $value = variable_get('media__' . $variable);[m
[31m-[m
[31m-    // Port the value of the variable if it was set.[m
[31m-    if (!is_null($value)) {[m
[31m-      variable_set('media_' . $variable, $value);[m
[31m-    }[m
[31m-[m
[31m-    // Remove the old variable.[m
[31m-    variable_del('media__' . $variable);[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Migrate variables to appropriate submodules.[m
[31m- */[m
[31m-function media_update_7225() {[m
[31m-  $data = array([m
[31m-    'media_wysiwyg' => array([m
[31m-      'wysiwyg_title',[m
[31m-      'wysiwyg_icon_title',[m
[31m-      'wysiwyg_default_view_mode',[m
[31m-      'wysiwyg_upload_directory',[m
[31m-      'wysiwyg_allowed_types',[m
[31m-      'wysiwyg_allowed_attributes',[m
[31m-      'wysiwyg_browser_plugins',[m
[31m-    ),[m
[31m-    'media_internet' => array([m
[31m-      'fromurl_supported_schemes',[m
[31m-    ),[m
[31m-    'media_bulk_upload' => array([m
[31m-      'import_batch_size',[m
[31m-    ),[m
[31m-  );[m
[31m-[m
[31m-  foreach ($data as $module => $variables) {[m
[31m-    foreach ($variables as $variable) {[m
[31m-      // Only port variables to submodules if the submodule exists.[m
[31m-      if (module_exists($module)) {[m
[31m-        // Find the value of the old variable.[m
[31m-        $value = variable_get('media_' . $variable);[m
[31m-[m
[31m-        // Port the value of the variable if it was set.[m
[31m-        if (!is_null($value)) {[m
[31m-          variable_set($module . '_' . $variable, $value);[m
[31m-        }[m
[31m-      }[m
[31m-[m
[31m-      // Remove the old variable.[m
[31m-      variable_del('media_' . $variable);[m
[31m-    }[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Grant existing user access to new media browser permission.[m
[31m- */[m
[31m-function media_update_7226() {[m
[31m-  $roles = user_roles(FALSE, 'create files');[m
[31m-[m
[31m-  foreach ($roles as $rid => $role) {[m
[31m-    user_role_grant_permissions($rid, array('access media browser'));[m
[31m-  }[m
[31m-}[m
[1mdiff --git a/sites/all/modules/contrib/media/media.media.inc b/sites/all/modules/contrib/media/media.media.inc[m
[1mdeleted file mode 100644[m
[1mindex 2700265..0000000[m
[1m--- a/sites/all/modules/contrib/media/media.media.inc[m
[1m+++ /dev/null[m
[36m@@ -1,110 +0,0 @@[m
[31m-<?php[m
[31m-[m
[31m-/**[m
[31m- * @file[m
[31m- * Media module integration for the Media module.[m
[31m- */[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_media_browser_plugin_info().[m
[31m- */[m
[31m-function media_media_browser_plugin_info() {[m
[31m-  $info['upload'] = array([m
[31m-    'title' => t('Upload'),[m
[31m-    'weight' => -10,[m
[31m-    'class' => 'MediaBrowserUpload',[m
[31m-  );[m
[31m-[m
[31m-  // Add a plugin for each View display using the 'media_browser' display type.[m
[31m-  $view_weight = 10;[m
[31m-  foreach (views_get_enabled_views() as $view) {[m
[31m-    foreach ($view->display as $display) {[m
[31m-      if ($display->display_plugin == 'media_browser') {[m
[31m-        $title = $display->display_title;[m
[31m-        if (!empty($display->display_options['title'])) {[m
[31m-          $title = $display->display_options['title'];[m
[31m-        }[m
[31m-        $info["{$view->name}--{$display->id}"] = array([m
[31m-          'title' => $title,[m
[31m-          // @TODO make this configurable.[m
[31m-          'weight' => $view_weight++,[m
[31m-          'class' => 'MediaBrowserView',[m
[31m-          'view_name' => $view->name,[m
[31m-          'view_display_id' => $display->id,[m
[31m-        );[m
[31m-      }[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  return $info;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_query_TAG_alter().[m
[31m- *[m
[31m- * @todo: Potentially move this into media.module in a future version of Media.[m
[31m- */[m
[31m-function media_query_media_browser_alter($query) {[m
[31m-  // Ensure that the query is against the file_managed table.[m
[31m-  $tables = $query->getTables();[m
[31m-[m
[31m-  if (empty($tables['file_managed'])) {[m
[31m-    throw new Exception(t('Media browser being queried without the file_managed table.'));[m
[31m-  }[m
[31m-[m
[31m-  $alias = $tables['file_managed']['alias'];[m
[31m-[m
[31m-  // How do we validate these?  I don't know.[m
[31m-  // I think PDO should protect them, but I'm not 100% certain.[m
[31m-  $params = media_get_browser_params();[m
[31m-[m
[31m-  // Gather any file restrictions.[m
[31m-  $types = !empty($params['types']) ? $params['types'] : array();[m
[31m-  $schemes = !empty($params['schemes']) ? $params['schemes'] : array();[m
[31m-  $extensions = !empty($params['file_extensions']) ? explode(' ', $params['file_extensions']) : array();[m
[31m-[m
[31m-  $or = db_or();[m
[31m-[m
[31m-  // Filter out files with restricted types.[m
[31m-  if (!empty($types)) {[m
[31m-    $query->condition($alias . '.type', $types, 'IN');[m
[31m-  }[m
[31m-[m
[31m-  // Filter out files with restricted schemes.[m
[31m-  if (!empty($schemes)) {[m
[31m-    $local_or = db_or();[m
[31m-    $local_and = db_and();[m
[31m-[m
[31m-    // Gather all of the local stream wrappers.[m
[31m-    $local_stream_wrappers = media_get_local_stream_wrappers();[m
[31m-[m
[31m-    foreach ($schemes as $scheme) {[m
[31m-      // Only local files have extensions.[m
[31m-      // Filter out files with restricted extensions.[m
[31m-      if (!empty($extensions) && isset($local_stream_wrappers[$scheme])) {[m
[31m-        $mimetypes = array();[m
[31m-        foreach ($extensions as $extension) {[m
[31m-          $mimetype = media_get_extension_mimetype($extension);[m
[31m-          if ($mimetype) {[m
[31m-            $mimetypes[] = $mimetype;[m
[31m-          }[m
[31m-        }[m
[31m-        $local_and->condition($alias . '.uri', db_like($scheme . '://') . '%', 'LIKE');[m
[31m-        if (count($mimetypes)) {[m
[31m-          $local_and->condition($alias . '.filemime', $mimetypes, 'IN');[m
[31m-        }[m
[31m-        $local_or->condition($local_and);[m
[31m-        $local_and = db_and();[m
[31m-      }[m
[31m-      else {[m
[31m-        $local_or->condition($alias . '.uri', db_like($scheme . '://') . '%', 'LIKE');[m
[31m-      }[m
[31m-    }[m
[31m-[m
[31m-    $or->condition($local_or);[m
[31m-  }[m
[31m-[m
[31m-  if ($or->count()) {[m
[31m-    $query->condition($or);[m
[31m-  }[m
[31m-}[m
[1mdiff --git a/sites/all/modules/contrib/media/media.module b/sites/all/modules/contrib/media/media.module[m
[1mdeleted file mode 100644[m
[1mindex 4ae5604..0000000[m
[1m--- a/sites/all/modules/contrib/media/media.module[m
[1m+++ /dev/null[m
[36m@@ -1,1403 +0,0 @@[m
[31m-<?php[m
[31m-[m
[31m-/**[m
[31m- * @file[m
[31m- * Media API[m
[31m- *[m
[31m- * The core Media API.[m
[31m- * See http://drupal.org/project/media for more details.[m
[31m- */[m
[31m-[m
[31m-// Code relating to using media as a field.[m
[31m-require_once dirname(__FILE__) . '/includes/media.fields.inc';[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_hook_info().[m
[31m- */[m
[31m-function media_hook_info() {[m
[31m-  $hooks = array([m
[31m-    'media_parse',[m
[31m-    'media_browser_plugin_info',[m
[31m-    'media_browser_plugin_info_alter',[m
[31m-    'media_browser_plugins_alter',[m
[31m-    'media_browser_params_alter',[m
[31m-    'query_media_browser_alter',[m
[31m-  );[m
[31m-[m
[31m-  return array_fill_keys($hooks, array('group' => 'media'));[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_help().[m
[31m- */[m
[31m-function media_help($path, $arg) {[m
[31m-  switch ($path) {[m
[31m-    case 'admin/help#media':[m
[31m-      $output = '';[m
[31m-      $output .= '<h3>' . t('About') . '</h3>';[m
[31m-      $output .= '<p>' . t('The Media module is a File Browser to the Internet, media provides a framework for managing files and multimedia assets, regardless of whether they are hosted on your own site or a 3rd party site. It replaces the Drupal core upload field with a unified User Interface where editors and administrators can upload, manage, and reuse files and multimedia assets. Media module also provides rich integration with WYSIWYG module to let content creators access media assets in rich text editor. Javascript is required to use the Media module.  For more information check <a href="@media_faq">Media Module page</a>', array('@media_faq' => 'http://drupal.org/project/media')) . '.</p>';[m
[31m-      $output .= '<h3>' . t('Uses') . '</h3>';[m
[31m-      $output .= '<dl>';[m
[31m-      $output .= '<dt>' . t('Media Repository') . '</dt>';[m
[31m-      $output .= '<dd>' . t('Media module allows you to maintain a <a href="@mediarepo">media asset repository</a> where in you can add, remove, reuse your media assets. You can add the media file using upload form or from a url and also do bulk operations on the media assets.', array('@mediarepo' => url('admin/content/media'))) . '</dd>';[m
[31m-      $output .= '<dt>' . t('Attaching media assets to content types') . '</dt>';[m
[31m-      $output .= '<dd>' . t('Media assets can be attached to content types as fields. To add a media field to a <a href="@content-type">content type</a>, go to the content type\'s <em>manage fields</em> page, and add a new field of type <em>Multimedia Asset</em>.', array('@content-type' => url('admin/structure/types'))) . '</dd>';[m
[31m-      $output .= '<dt>' . t('Using media assets in WYSIWYG') . '</dt>';[m
[31m-      $output .= '<dd>' . t('Media module provides rich integration with WYSIWYG editors, using Media Browser plugin you can select media asset from library to add to the rich text editor moreover you can add media asset from the media browser itself using either upload method or add from url method. To configure media with WYSIWYG you need two steps of configuration:');[m
[31m-      $output .= '<ul><li>' . t('Enable WYSIWYG plugin on your desired <a href="@wysiwyg-profile">WYSIWYG profile</a>. Please note that you will need to have <a href="@wysiwyg">WYSIWYG</a> module enabled.', array('@wysiwyg-profile' => url('admin/config/content/wysiwyg'), '@wysiwyg' => 'http://drupal.org/project/wysiwyg')) . '</li>';[m
[31m-      $output .= '<li>' . t('Enable the <em>Convert Media tags to markup</em> filter on the <a href="@input-format">Input format</a> you are using with the WYSIWYG profile.', array('@input-format' => url('admin/config/content/formats'))) . '</li></ul></dd>';[m
[31m-      return $output;[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_entity_info_alter().[m
[31m- */[m
[31m-function media_entity_info_alter(&$entity_info) {[m
[31m-  // For sites that updated from Media 1.x, continue to provide these deprecated[m
[31m-  // view modes.[m
[31m-  // @see http://drupal.org/node/1051090[m
[31m-  if (variable_get('media_show_deprecated_view_modes', FALSE)) {[m
[31m-    $entity_info['file']['view modes']['media_link'] = array([m
[31m-      'label' => t('Link'),[m
[31m-      'custom settings' => TRUE,[m
[31m-    );[m
[31m-    $entity_info['file']['view modes']['media_original'] = array([m
[31m-      'label' => t('Original'),[m
[31m-      'custom settings' => TRUE,[m
[31m-    );[m
[31m-  }[m
[31m-  if (module_exists('entity_translation')) {[m
[31m-    $entity_info['file']['translation']['entity_translation']['class'] = 'MediaEntityTranslationHandler';[m
[31m-    $entity_info['file']['translation']['entity_translation']['path schemes']['media'] = array('edit path' => 'media/%file/edit/%ctools_js');[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_menu().[m
[31m- */[m
[31m-function media_menu() {[m
[31m-  // For managing different types of media and the fields associated with them.[m
[31m-  $items['admin/config/media/browser'] = array([m
[31m-    'title' => 'Media browser settings',[m
[31m-    'description' => 'Configure the behavior and display of the media browser.',[m
[31m-    'page callback' => 'drupal_get_form',[m
[31m-    'page arguments' => array('media_admin_config_browser'),[m
[31m-    'access arguments' => array('administer media browser'),[m
[31m-    'file' => 'includes/media.admin.inc',[m
[31m-  );[m
[31m-[m
[31m-  // Administrative screens for managing media.[m
[31m-  $items['admin/content/file/thumbnails'] = array([m
[31m-    'title' => 'Thumbnails',[m
[31m-    'description' => 'Manage files used on your site.',[m
[31m-    'page callback' => 'drupal_get_form',[m
[31m-    'page arguments' => array('file_entity_admin_file'),[m
[31m-    'access arguments' => array('administer files'),[m
[31m-    'type' => MENU_LOCAL_TASK,[m
[31m-    'file' => 'file_entity.admin.inc',[m
[31m-    'file path' => drupal_get_path('module', 'file_entity'),[m
[31m-    'weight' => 10,[m
[31m-  );[m
[31m-[m
[31m-  $items['media/ajax'] = array([m
[31m-    'page callback' => 'media_ajax_upload',[m
[31m-    'delivery callback' => 'ajax_deliver',[m
[31m-    'access arguments' => array('access content'),[m
[31m-    'theme callback' => 'ajax_base_page_theme',[m
[31m-    'type' => MENU_CALLBACK,[m
[31m-  );[m
[31m-[m
[31m-  $items['media/browser'] = array([m
[31m-    'title' => 'Media browser',[m
[31m-    'description' => 'Media Browser for picking media and uploading new media',[m
[31m-    'page callback' => 'media_browser',[m
[31m-    'access arguments' => array('access media browser'),[m
[31m-    'type' => MENU_CALLBACK,[m
[31m-    'file' => 'includes/media.browser.inc',[m
[31m-    'theme callback' => 'media_dialog_get_theme_name',[m
[31m-  );[m
[31m-[m
[31m-  // A testbed to try out the media browser with different launch commands.[m
[31m-  $items['media/browser/testbed'] = array([m
[31m-    'title' => 'Media Browser test',[m
[31m-    'description' => 'Make it easier to test media browser',[m
[31m-    'page callback' => 'drupal_get_form',[m
[31m-    'page arguments' => array('media_browser_testbed'),[m
[31m-    'access arguments' => array('administer files'),[m
[31m-    'type' => MENU_CALLBACK,[m
[31m-    'file' => 'includes/media.browser.inc',[m
[31m-  );[m
[31m-[m
[31m-  // We could re-use the file/%file/edit path for the modal callback, but[m
[31m-  // it is just easier to use our own namespace here.[m
[31m-  $items['media/%file/edit/%ctools_js'] = array([m
[31m-    'title' => 'Edit',[m
[31m-    'page callback' => 'drupal_get_form',[m
[31m-    'page arguments' => array('media_file_edit_modal', 1, 3),[m
[31m-    'access callback' => 'file_entity_access',[m
[31m-    'access arguments' => array('update', 1),[m
[31m-    'theme callback' => 'ajax_base_page_theme',[m
[31m-    'file' => 'includes/media.pages.inc',[m
[31m-    'type' => MENU_CALLBACK,[m
[31m-  );[m
[31m-[m
[31m-  return $items;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_menu_local_tasks_alter().[m
[31m- */[m
[31m-function media_menu_local_tasks_alter(&$data, $router_item, $root_path) {[m
[31m-  // Add action link to 'file/add' on 'admin/content/file/thumbnails' page.[m
[31m-  if ($root_path == 'admin/content/file/thumbnails') {[m
[31m-    $item = menu_get_item('file/add');[m
[31m-    if (!empty($item['access'])) {[m
[31m-      $data['actions']['output'][] = array([m
[31m-        '#theme' => 'menu_local_action',[m
[31m-        '#link' => $item,[m
[31m-        '#weight' => $item['weight'],[m
[31m-      );[m
[31m-    }[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_admin_paths().[m
[31m- */[m
[31m-function media_admin_paths() {[m
[31m-  $paths['media/*/edit/*'] = TRUE;[m
[31m-  $paths['media/*/format-form'] = TRUE;[m
[31m-[m
[31m-  // If the media browser theme is set to the admin theme, ensure it gets set[m
[31m-  // as an admin path as well.[m
[31m-  $dialog_theme = variable_get('media_dialog_theme', '');[m
[31m-  if (empty($dialog_theme) || $dialog_theme == variable_get('admin_theme')) {[m
[31m-    $paths['media/browser'] = TRUE;[m
[31m-    $paths['media/browser/*'] = TRUE;[m
[31m-  }[m
[31m-[m
[31m-  return $paths;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_permission().[m
[31m- */[m
[31m-function media_permission() {[m
[31m-  return array([m
[31m-    'administer media browser' => array([m
[31m-      'title' => t('Administer media browser'),[m
[31m-      'description' => t('Access media browser settings.'),[m
[31m-    ),[m
[31m-    'access media browser' => array([m
[31m-      'title' => t('Use the media browser'),[m
[31m-    ),[m
[31m-  );[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_theme().[m
[31m- */[m
[31m-function media_theme() {[m
[31m-  return array([m
[31m-    // media.module.[m
[31m-    'media_element' => array([m
[31m-      'render element' => 'element',[m
[31m-    ),[m
[31m-[m
[31m-    // media.field.inc.[m
[31m-    'media_widget' => array([m
[31m-      'render element' => 'element',[m
[31m-    ),[m
[31m-    'media_widget_multiple' => array([m
[31m-      'render element' => 'element',[m
[31m-    ),[m
[31m-    'media_upload_help' => array([m
[31m-      'variables' => array('description' => NULL),[m
[31m-    ),[m
[31m-[m
[31m-    // media.theme.inc.[m
[31m-    'media_thumbnail' => array([m
[31m-      'render element' => 'element',[m
[31m-      'file' => 'includes/media.theme.inc',[m
[31m-    ),[m
[31m-    'media_formatter_large_icon' => array([m
[31m-      'variables' => array('file' => NULL, 'attributes' => array(), 'style_name' => 'media_thumbnail'),[m
[31m-      'file' => 'includes/media.theme.inc',[m
[31m-    ),[m
[31m-    'media_dialog_page' => array([m
[31m-      'render element' => 'page',[m
[31m-      'template' => 'templates/media-dialog-page',[m
[31m-      'file' => 'includes/media.theme.inc',[m
[31m-    ),[m
[31m-  );[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Menu callback; Shared Ajax callback for media attachment and deletions.[m
[31m- *[m
[31m- * This rebuilds the form element for a particular field item. As long as the[m
[31m- * form processing is properly encapsulated in the widget element the form[m
[31m- * should rebuild correctly using FAPI without the need for additional callbacks[m
[31m- * or processing.[m
[31m- */[m
[31m-function media_ajax_upload() {[m
[31m-  $form_parents = func_get_args();[m
[31m-  $form_build_id = (string) array_pop($form_parents);[m
[31m-[m
[31m-  if (empty($_POST['form_build_id']) || $form_build_id != $_POST['form_build_id']) {[m
[31m-    // Invalid request.[m
[31m-    drupal_set_message(t('An unrecoverable error occurred. The uploaded file likely exceeded the maximum file size (@size) that this server supports.', array('@size' => format_size(file_upload_max_size()))), 'error');[m
[31m-    $commands = array();[m
[31m-    $commands[] = ajax_command_replace(NULL, theme('status_messages'));[m
[31m-    return array('#type' => 'ajax', '#commands' => $commands);[m
[31m-  }[m
[31m-[m
[31m-  list($form, $form_state, $form_id, $form_build_id, $commands) = ajax_get_form();[m
[31m-[m
[31m-  if (!$form) {[m
[31m-    // Invalid form_build_id.[m
[31m-    drupal_set_message(t('An unrecoverable error occurred. Use of this form has expired. Try reloading the page and submitting again.'), 'error');[m
[31m-    $commands = array();[m
[31m-    $commands[] = ajax_command_replace(NULL, theme('status_messages'));[m
[31m-    return array('#type' => 'ajax', '#commands' => $commands);[m
[31m-  }[m
[31m-[m
[31m-  // Get the current element and count the number of files.[m
[31m-  $current_element = $form;[m
[31m-  foreach ($form_parents as $parent) {[m
[31m-    if (isset($current_element[$parent])) {[m
[31m-      $current_element = $current_element[$parent];[m
[31m-    }[m
[31m-    else {[m
[31m-      $current_element = NULL;[m
[31m-      break;[m
[31m-    }[m
[31m-  }[m
[31m-  $current_file_count = isset($current_element['#file_upload_delta']) ? $current_element['#file_upload_delta'] : 0;[m
[31m-[m
[31m-  // Process user input. $form and $form_state are modified in the process.[m
[31m-  drupal_process_form($form['#form_id'], $form, $form_state);[m
[31m-[m
[31m-  // Retrieve the element to be rendered.[m
[31m-  foreach ($form_parents as $parent) {[m
[31m-    $form = $form[$parent];[m
[31m-  }[m
[31m-[m
[31m-  // Add the special Ajax class if a new file was added.[m
[31m-  if (isset($form['#file_upload_delta']) && $current_file_count < $form['#file_upload_delta']) {[m
[31m-    $form[$current_file_count]['#attributes']['class'][] = 'ajax-new-content';[m
[31m-  }[m
[31m-  // Otherwise just add the new content class on a placeholder.[m
[31m-  else {[m
[31m-    $form['#suffix'] .= '<span class="ajax-new-content"></span>';[m
[31m-  }[m
[31m-[m
[31m-  $output = theme('status_messages') . drupal_render($form);[m
[31m-  $js = drupal_add_js();[m
[31m-  $settings = call_user_func_array('array_merge_recursive', $js['settings']['data']);[m
[31m-[m
[31m-  $commands[] = ajax_command_replace(NULL, $output, $settings);[m
[31m-  return array('#type' => 'ajax', '#commands' => $commands);[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_image_default_styles().[m
[31m- */[m
[31m-function media_image_default_styles() {[m
[31m-  $styles = array();[m
[31m-  $styles['media_thumbnail'] = array([m
[31m-    'label' => 'Media thumbnail (100x100)',[m
[31m-    'effects' => array([m
[31m-      array([m
[31m-        'name' => 'image_scale_and_crop',[m
[31m-        'data' => array('width' => 100, 'height' => 100),[m
[31m-        'weight' => 0,[m
[31m-      ),[m
[31m-    ),[m
[31m-  );[m
[31m-  return $styles;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_page_alter().[m
[31m- *[m
[31m- * This is used to use our alternate template when ?render=media-popup is passed[m
[31m- * in the URL.[m
[31m- */[m
[31m-function media_page_alter(&$page) {[m
[31m-  if (isset($_GET['render']) && $_GET['render'] == 'media-popup') {[m
[31m-    $page['#theme'] = 'media_dialog_page';[m
[31m-[m
[31m-    // Disable administration modules from adding output to the popup.[m
[31m-    // @see http://drupal.org/node/914786[m
[31m-    module_invoke_all('suppress', TRUE);[m
[31m-[m
[31m-    foreach (element_children($page) as $key) {[m
[31m-      if ($key != 'content') {[m
[31m-        unset($page[$key]);[m
[31m-      }[m
[31m-    }[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_form_FIELD_UI_FIELD_EDIT_FORM_alter().[m
[31m- *[m
[31m- * @todo: Respect field settings in 7.x-2.x and handle them in the media widget[m
[31m- * UI.[m
[31m- */[m
[31m-function media_form_field_ui_field_edit_form_alter(&$form, &$form_state) {[m
[31m-  // On file fields that use the media widget we need remove specific fields.[m
[31m-  if ($form['#field']['type'] == 'file' && $form['instance']['widget']['type']['#value'] == 'media_generic') {[m
[31m-    $form['instance']['settings']['file_extensions']['#title'] = t('Allowed file extensions for uploaded files');[m
[31m-    $form['instance']['settings']['file_extensions']['#maxlength'] = 255;[m
[31m-    $form['instance']['settings']['file_extensions']['#description'] .= '<br />' . t('If empty, the file extensions list will be composed automatically using the allowed file types.');[m
[31m-    $form['instance']['settings']['file_extensions']['#required'] = FALSE;[m
[31m-  }[m
[31m-[m
[31m-  // On image fields using the media widget we remove the alt/title fields.[m
[31m-  if ($form['#field']['type'] == 'image' && $form['instance']['widget']['type']['#value'] == 'media_generic') {[m
[31m-    $form['instance']['settings']['alt_field']['#access'] = FALSE;[m
[31m-    $form['instance']['settings']['title_field']['#access'] = FALSE;[m
[31m-    $form['instance']['settings']['file_extensions']['#title'] = t('Allowed file extensions for uploaded files');[m
[31m-    // Do not increase maxlength of file extensions for image fields, since[m
[31m-    // presumably they will not need a long list of extensions.[m
[31m-  }[m
[31m-[m
[31m-  // Add a validation function to any field instance which uses the media widget[m
[31m-  // to ensure that the upload destination scheme is one of the allowed schemes[m
[31m-  // if any defined by settings.[m
[31m-  if ($form['instance']['widget']['type']['#value'] == 'media_generic' && isset($form['#field']['settings']['uri_scheme'])) {[m
[31m-    $form['#validate'][] = 'media_field_instance_validate';[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Validation handler; ensure that the upload destination scheme is one of the[m
[31m- * allowed schemes.[m
[31m- */[m
[31m-function media_field_instance_validate($form, &$form_state) {[m
[31m-  $allowed_schemes = array_filter($form_state['values']['instance']['widget']['settings']['allowed_schemes']);[m
[31m-  $upload_destination = $form_state['values']['field']['settings']['uri_scheme'];[m
[31m-[m
[31m-  if (!empty($allowed_schemes) && !in_array($upload_destination, $allowed_schemes)) {[m
[31m-    form_set_error('allowed_schemes', t('The upload destination must be one of the allowed schemes.'));[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_form_alter().[m
[31m- */[m
[31m-function media_form_alter(&$form, &$form_state, $form_id) {[m
[31m-  // If we're in the media browser, set the #media_browser key to true[m
[31m-  // so that if an ajax request gets sent to a different path, the form[m
[31m-  // still uses the media_browser_form_submit callback.[m
[31m-  if (current_path() == 'media/browser') {[m
[31m-    if ($form_id == 'views_exposed_form') {[m
[31m-      $form['render'] = array('#type' => 'hidden', '#value' => 'media-popup');[m
[31m-      $form['#action'] = '/media/browser';[m
[31m-    } else {[m
[31m-      $form_state['#media_browser'] = TRUE;[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  // If the #media_browser key isset and is true we are using the browser[m
[31m-  // popup, so add the media_browser submit handler.[m
[31m-  if (!empty($form_state['#media_browser'])) {[m
[31m-    $form['#submit'][] = 'media_browser_form_submit';[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Submit handler; direction form submissions in the media browser.[m
[31m- */[m
[31m-function media_browser_form_submit($form, &$form_state) {[m
[31m-  $url = NULL;[m
[31m-  $parameters = array();[m
[31m-[m
[31m-  // Single upload.[m
[31m-  if (!empty($form_state['file'])) {[m
[31m-    $file = $form_state['file'];[m
[31m-    $url = 'media/browser';[m
[31m-    $parameters = array('query' => array('render' => 'media-popup', 'fid' => $file->fid));[m
[31m-  }[m
[31m-[m
[31m-  // If $url is set, we had some sort of upload, so redirect the form.[m
[31m-  if (!empty($url)) {[m
[31m-    $form_state['redirect'] = array($url, $parameters);[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_library().[m
[31m- */[m
[31m-function media_library() {[m
[31m-  $path = drupal_get_path('module', 'media');[m
[31m-  $info = system_get_info('module', 'media');[m
[31m-[m
[31m-  $common = array([m
[31m-    'website' => 'http://drupal.org/project/media',[m
[31m-    'version' => !empty($info['version']) ? $info['version'] : '7.x-2.x',[m
[31m-  );[m
[31m-[m
[31m-  // Contains libraries common to other media modules.[m
[31m-  $libraries['media_base'] = array([m
[31m-    'title' => 'Media base',[m
[31m-    'js' => array([m
[31m-      $path . '/js/media.core.js' => array('group' => JS_LIBRARY, 'weight' => -5),[m
[31m-      $path . '/js/util/json2.js' => array('group' => JS_LIBRARY),[m
[31m-      $path . '/js/util/ba-debug.min.js' => array('group' => JS_LIBRARY),[m
[31m-    ),[m
[31m-    'css' => array([m
[31m-      $path . '/css/media.css',[m
[31m-    ),[m
[31m-  );[m
[31m-[m
[31m-  // Includes resources needed to launch the media browser.  Should be included[m
[31m-  // on pages where the media browser needs to be launched from.[m
[31m-  $libraries['media_browser'] = array([m
[31m-    'title' => 'Media Browser popup libraries',[m
[31m-    'js' => array([m
[31m-      $path . '/js/media.popups.js' => array('group' => JS_DEFAULT),[m
[31m-    ),[m
[31m-    'dependencies' => array([m
[31m-      array('system', 'ui.resizable'),[m
[31m-      array('system', 'ui.draggable'),[m
[31m-      array('system', 'ui.dialog'),[m
[31m-      array('media', 'media_base'),[m
[31m-    ),[m
[31m-  );[m
[31m-[m
[31m-  // Resources needed in the media browser itself.[m
[31m-  $libraries['media_browser_page'] = array([m
[31m-    'title' => 'Media browser',[m
[31m-    'js' => array([m
[31m-      $path . '/js/media.browser.js'  => array('group' => JS_DEFAULT),[m
[31m-    ),[m
[31m-    'dependencies' => array([m
[31m-      array('system', 'ui.tabs'),[m
[31m-      array('system', 'ui.draggable'),[m
[31m-      array('system', 'ui.dialog'),[m
[31m-      array('media', 'media_base'),[m
[31m-    ),[m
[31m-  );[m
[31m-[m
[31m-  // Settings for the dialog etc.[m
[31m-  $settings = array([m
[31m-    'browserUrl' => url('media/browser', array([m
[31m-      'query' => array([m
[31m-        'render' => 'media-popup'[m
[31m-      ))[m
[31m-    ),[m
[31m-    'styleSelectorUrl' => url('media/-media_id-/format-form', array([m
[31m-      'query' => array([m
[31m-        'render' => 'media-popup'[m
[31m-      ))[m
[31m-    ),[m
[31m-    'dialogOptions' => array([m
[31m-      'dialogclass' => variable_get('media_dialogclass', 'media-wrapper'),[m
[31m-      'modal' => (boolean)variable_get('media_modal', TRUE),[m
[31m-      'draggable' => (boolean)variable_get('media_draggable', FALSE),[m
[31m-      'resizable' => (boolean)variable_get('media_resizable', FALSE),[m
[31m-      'minwidth' => (int)variable_get('media_minwidth', 500),[m
[31m-      'width' => (int)variable_get('media_width', 670),[m
[31m-      'height' => (int)variable_get('media_height', 280),[m
[31m-      'position' => variable_get('media_position', 'center'),[m
[31m-      'overlay' => array([m
[31m-        'backgroundcolor' => variable_get('media_backgroundcolor', '#000000'),[m
[31m-        'opacity' => (float)variable_get('media_opacity', 0.4),[m
[31m-      ),[m
[31m-      'zindex' => (int)variable_get('media_zindex', 10000),[m
[31m-    ),[m
[31m-  );[m
[31m-[m
[31m-  $libraries['media_browser_settings'] = array([m
[31m-    'title' => 'Media browser settings',[m
[31m-    'js' => array([m
[31m-      0 => array([m
[31m-        'data' => array([m
[31m-          'media' => $settings,[m
[31m-        ),[m
[31m-        'type' => 'setting',[m
[31m-      ),[m
[31m-    ),[m
[31m-  );[m
[31m-[m
[31m-  foreach ($libraries as &$library) {[m
[31m-    $library += $common;[m
[31m-  }[m
[31m-  return $libraries;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Theme callback used to identify when we are in a popup dialog.[m
[31m- *[m
[31m- * Generally the default theme will look terrible in the media browser. This[m
[31m- * will default to the administration theme, unless set otherwise.[m
[31m- */[m
[31m-function media_dialog_get_theme_name() {[m
[31m-  return variable_get('media_dialog_theme', variable_get('admin_theme'));[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * This will parse a url or embedded code into a unique URI.[m
[31m- *[m
[31m- * The function will call all modules implementing hook_media_parse($url),[m
[31m- * which should return either a string containing a parsed URI or NULL.[m
[31m- *[m
[31m- * @NOTE The implementing modules may throw an error, which will not be caught[m
[31m- * here; it's up to the calling function to catch any thrown errors.[m
[31m- *[m
[31m- * @NOTE In emfield, we originally also accepted an array of regex patterns[m
[31m- * to match against. However, that module used a registration for providers,[m
[31m- * and simply stored the match in the database keyed to the provider object.[m
[31m- * However, other than the stream wrappers, there is currently no formal[m
[31m- * registration for media handling. Additionally, few, if any, stream wrappers[m
[31m- * will choose to store a straight match from the parsed URL directly into[m
[31m- * the URI. Thus, we leave both the matching and the final URI result to the[m
[31m- * implementing module in this implementation.[m
[31m- *[m
[31m- * An alternative might be to do the regex pattern matching here, and pass a[m
[31m- * successful match back to the implementing module. However, that would[m
[31m- * require either an overloaded function or a new hook, which seems like more[m
[31m- * overhead than it's worth at this point.[m
[31m- *[m
[31m- * @TODO Once hook_module_implements_alter() is in core (see the issue at[m
[31m- * http://drupal.org/node/692950) we may want to implement media_media_parse()[m
[31m- * to ensure we were passed a valid URL, rather than an unsupported or[m
[31m- * malformed embed code that wasn't caught earlier. It will needed to be[m
[31m- * weighted so it's called after all other streams have a go, as the fallback,[m
[31m- * and will need to throw an error.[m
[31m- *[m
[31m- * @param string $url[m
[31m- *   The original URL or embed code to parse.[m
[31m- *[m
[31m- * @return string[m
[31m- *   The unique URI for the file, based on its stream wrapper, or NULL.[m
[31m- *[m
[31m- * @see media_parse_to_file()[m
[31m- * @see media_add_from_url_validate()[m
[31m- */[m
[31m-function media_parse_to_uri($url) {[m
[31m-  // Trim any whitespace before parsing.[m
[31m-  $url = trim($url);[m
[31m-  foreach (module_implements('media_parse') as $module) {[m
[31m-    $success = module_invoke($module, 'media_parse', $url);[m
[31m-    $context = array([m
[31m-      'url' => $url,[m
[31m-      'module' => $module,[m
[31m-    );[m
[31m-    drupal_alter('media_parse', $success, $context);[m
[31m-    if (isset($success)) {[m
[31m-      return $success;[m
[31m-    }[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Parse a URL or embed code and return a file object.[m
[31m- *[m
[31m- * If a remote stream doesn't claim the parsed URL in media_parse_to_uri(),[m
[31m- * then we'll copy the file locally.[m
[31m- *[m
[31m- * @NOTE The implementing modules may throw an error, which will not be caught[m
[31m- * here; it's up to the calling function to catch any thrown errors.[m
[31m- *[m
[31m- * @see media_parse_to_uri()[m
[31m- * @see media_add_from_url_submit()[m
[31m- */[m
[31m-function media_parse_to_file($url) {[m
[31m-  try {[m
[31m-    $uri = media_parse_to_uri($url);[m
[31m-  }[m
[31m-  catch (Exception $e) {[m
[31m-    // Pass the error along.[m
[31m-    throw $e;[m
[31m-    return;[m
[31m-  }[m
[31m-[m
[31m-  if (isset($uri)) {[m
[31m-    // Attempt to load an existing file from the unique URI.[m
[31m-    $select = db_select('file_managed', 'f')[m
[31m-    ->extend('PagerDefault')[m
[31m-    ->fields('f', array('fid'))[m
[31m-    ->condition('uri', $uri);[m
[31m-[m
[31m-    $fid = $select->execute()->fetchCol();[m
[31m-    if (!empty($fid)) {[m
[31m-      $file = file_load(array_pop($fid));[m
[31m-      return $file;[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  if (isset($uri)) {[m
[31m-    // The URL was successfully parsed to a URI, but does not yet have an[m
[31m-    // associated file: save it![m
[31m-    $file = file_uri_to_object($uri);[m
[31m-    file_save($file);[m
[31m-  }[m
[31m-  else {[m
[31m-    // The URL wasn't parsed. We'll try to save a remote file.[m
[31m-    // Copy to temporary first.[m
[31m-    $source_uri = file_stream_wrapper_uri_normalize('temporary://' . basename($url));[m
[31m-    if (!@copy(@$url, $source_uri)) {[m
[31m-      throw new Exception('Unable to add file ' . $url);[m
[31m-      return;[m
[31m-    }[m
[31m-    $source_file = file_uri_to_object($source_uri);[m
[31m-    $scheme = variable_get('file_default_scheme', 'public') . '://';[m
[31m-    $uri = file_stream_wrapper_uri_normalize($scheme . $source_file->filename);[m
[31m-    // Now to its new home.[m
[31m-    $file = file_move($source_file, $uri, FILE_EXISTS_RENAME);[m
[31m-  }[m
[31m-[m
[31m-  return $file;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Utility function to recursively run check_plain on an array.[m
[31m- *[m
[31m- * @todo There is probably something in core I am not aware of that does this.[m
[31m- */[m
[31m-function media_recursive_check_plain(&$value, $key) {[m
[31m-  $value = check_plain($value);[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_element_info().[m
[31m- */[m
[31m-function media_element_info() {[m
[31m-  $types['media'] = array([m
[31m-    '#input' => TRUE,[m
[31m-    '#process' => array('media_element_process'),[m
[31m-    '#value_callback' => 'media_file_value',[m
[31m-    '#element_validate' => array('media_element_validate'),[m
[31m-    '#pre_render' => array('media_element_pre_render'),[m
[31m-    '#theme' => 'media_element',[m
[31m-    '#theme_wrappers' => array('form_element'),[m
[31m-    '#size' => 22,[m
[31m-    '#extended' => FALSE,[m
[31m-    '#media_options' => array([m
[31m-      'global' => array([m
[31m-        // Example: array('image', 'audio');[m
[31m-        'types' => array(),[m
[31m-        // Example: array('http', 'ftp', 'flickr');[m
[31m-        'schemes' => array(),[m
[31m-      ),[m
[31m-    ),[m
[31m-    '#attached' => array([m
[31m-      'library' => array([m
[31m-        array('media', 'media_browser'),[m
[31m-      ),[m
[31m-    ),[m
[31m-  );[m
[31m-[m
[31m-  $setting = array();[m
[31m-  $setting['media']['global'] = $types['media']['#media_options'];[m
[31m-[m
[31m-  $types['media']['#attached']['js'][] = array([m
[31m-    'type' => 'setting',[m
[31m-    'data' => $setting,[m
[31m-  );[m
[31m-[m
[31m-  return $types;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Process callback for the media form element.[m
[31m- */[m
[31m-function media_element_process($element, &$form_state, $form) {[m
[31m-  ctools_include('modal');[m
[31m-  ctools_include('ajax');[m
[31m-  ctools_modal_add_js();[m
[31m-[m
[31m-  // Append the '-upload' to the #id so the field label's 'for' attribute[m
[31m-  // corresponds with the textfield element.[m
[31m-  $original_id = $element['#id'];[m
[31m-  $element['#id'] .= '-upload';[m
[31m-  $fid = isset($element['#value']['fid']) ? $element['#value']['fid'] : 0;[m
[31m-[m
[31m-  // Set some default element properties.[m
[31m-  $element['#file'] = $fid ? file_load($fid) : FALSE;[m
[31m-  $element['#tree'] = TRUE;[m
[31m-[m
[31m-  $ajax_settings = array([m
[31m-    'path' => 'media/ajax/' . implode('/', $element['#array_parents']) . '/' . $form['form_build_id']['#value'],[m
[31m-    'wrapper' => $original_id . '-ajax-wrapper',[m
[31m-    'effect' => 'fade',[m
[31m-  );[m
[31m-[m
[31m-  // Set up the buttons first since we need to check if they were clicked.[m
[31m-  $element['attach_button'] = array([m
[31m-    '#name' => implode('_', $element['#parents']) . '_attach_button',[m
[31m-    '#type' => 'submit',[m
[31m-    '#value' => t('Attach'),[m
[31m-    '#validate' => array(),[m
[31m-    '#submit' => array('media_file_submit'),[m
[31m-    '#limit_validation_errors' => array($element['#parents']),[m
[31m-    '#ajax' => $ajax_settings,[m
[31m-    '#attributes' => array('class' => array('attach')),[m
[31m-    '#weight' => -1,[m
[31m-  );[m
[31m-[m
[31m-  $element['preview'] = array([m
[31m-    'content' => array(),[m
[31m-    '#prefix' => '<div class="preview">',[m
[31m-    '#suffix' => '</div>',[m
[31m-    '#ajax' => $ajax_settings,[m
[31m-    '#weight' => -10,[m
[31m-  );[m
[31m-[m
[31m-  // Substitute the JS preview for a true file thumbnail once the file is[m
[31m-  // attached.[m
[31m-  if ($fid && $element['#file']) {[m
[31m-    $element['preview']['content'] = media_get_thumbnail_preview($element['#file']);[m
[31m-  }[m
[31m-[m
[31m-  // The file ID field itself.[m
[31m-  $element['upload'] = array([m
[31m-    '#name' => 'media[' . implode('_', $element['#parents']) . ']',[m
[31m-    '#type' => 'textfield',[m
[31m-    '#title' => t('Enter the ID of an existing file'),[m
[31m-    '#title_display' => 'invisible',[m
[31m-    '#field_prefix' => t('File ID'),[m
[31m-    '#size' => $element['#size'],[m
[31m-    '#theme_wrappers' => array(),[m
[31m-    '#attributes' => array('class' => array('upload')),[m
[31m-    '#weight' => -9,[m
[31m-  );[m
[31m-[m
[31m-  $element['browse_button'] = array([m
[31m-    '#type' => 'link',[m
[31m-    '#href' => '',[m
[31m-    '#title' => t('Browse'),[m
[31m-    '#attributes' => array('class' => array('button', 'browse', 'element-hidden')),[m
[31m-    '#options' => array('fragment' => FALSE, 'external' => TRUE),[m
[31m-    '#weight' => -8,[m
[31m-  );[m
[31m-[m
[31m-  // Force the progress indicator for the remove button to be either 'none' or[m
[31m-  // 'throbber', even if the upload button is using something else.[m
[31m-  $ajax_settings['progress']['type'] = 'throbber';[m
[31m-  $ajax_settings['progress']['message'] = NULL;[m
[31m-  $ajax_settings['effect'] = 'none';[m
[31m-  $element['edit'] = array([m
[31m-    '#type' => 'link',[m
[31m-    '#href' => 'media/' . $fid . '/edit/nojs',[m
[31m-    '#title' => t('Edit'),[m
[31m-    '#attributes' => array([m
[31m-      'class' => array([m
[31m-        // Required for CTools modal to work.[m
[31m-        'ctools-use-modal',[m
[31m-        'ctools-modal-media-file-edit', 'button', 'edit',[m
[31m-      ),[m
[31m-    ),[m
[31m-    '#weight' => 20,[m
[31m-    '#access' => $element['#file'] ? file_entity_access('update', $element['#file']) : FALSE,[m
[31m-  );[m
[31m-[m
[31m-  // If we have parent entity form/source langcodes, pass them in query. They[m
[31m-  // will be used in[m
[31m-  /* @see media_file_edit_modal() */[m
[31m-  if (!empty($element['#media_parent_entity_form_langcode'])) {[m
[31m-    $element['edit']['#options']['query']['media_parent_entity_form_langcode'] = $element['#media_parent_entity_form_langcode'];[m
[31m-    if (!empty($element['#media_parent_entity_source_langcode'])) {[m
[31m-      $element['edit']['#options']['query']['media_parent_entity_source_langcode'] = $element['#media_parent_entity_source_langcode'];[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  $element['remove_button'] = array([m
[31m-    '#name' => implode('_', $element['#parents']) . '_remove_button',[m
[31m-    '#type' => 'submit',[m
[31m-    '#value' => t('Remove'),[m
[31m-    '#validate' => array(),[m
[31m-    '#submit' => array('media_file_submit'),[m
[31m-    '#limit_validation_errors' => array($element['#parents']),[m
[31m-    '#ajax' => $ajax_settings,[m
[31m-    '#attributes' => array('class' => array('remove')),[m
[31m-    '#weight' => 0,[m
[31m-  );[m
[31m-[m
[31m-  $element['fid'] = array([m
[31m-    '#type' => 'hidden',[m
[31m-    '#value' => $fid,[m
[31m-    '#attributes' => array('class' => array('fid')),[m
[31m-  );[m
[31m-[m
[31m-  // Media browser attach code.[m
[31m-  $element['#attached']['js'][] = drupal_get_path('module', 'media') . '/js/media.js';[m
[31m-[m
[31m-  // Add the media options to the page as JavaScript settings.[m
[31m-  $element['browse_button']['#attached']['js'] = array([m
[31m-    array([m
[31m-      'type' => 'setting',[m
[31m-      'data' => array('media' => array('elements' => array('#' . $element['#id'] => $element['#media_options'])))[m
[31m-    )[m
[31m-  );[m
[31m-[m
[31m-  $element['#attached']['library'][] = array('media', 'media_browser');[m
[31m-  $element['#attached']['library'][] = array('media', 'media_browser_settings');[m
[31m-[m
[31m-  // Prefix and suffix used for Ajax replacement.[m
[31m-  $element['#prefix'] = '<div id="' . $original_id . '-ajax-wrapper">';[m
[31m-  $element['#suffix'] = '</div>';[m
[31m-[m
[31m-  return $element;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_form_FORM_ID_alter().[m
[31m- */[m
[31m-function media_form_file_entity_edit_alter(&$form, &$form_state) {[m
[31m-  // Make adjustments to the file edit form when used in a CTools modal.[m
[31m-  if (!empty($form_state['ajax'])) {[m
[31m-    // Remove the preview and the delete button.[m
[31m-    $form['preview']['#access'] = FALSE;[m
[31m-    $form['actions']['delete']['#access'] = FALSE;[m
[31m-[m
[31m-    // Convert the cancel link to a button which triggers a modal close.[m
[31m-    $form['actions']['cancel']['#attributes']['class'][] = 'button';[m
[31m-    $form['actions']['cancel']['#attributes']['class'][] = 'button-no';[m
[31m-    $form['actions']['cancel']['#attributes']['class'][] = 'ctools-close-modal';[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * The #value_callback for a media type element.[m
[31m- */[m
[31m-function media_file_value(&$element, $input = FALSE, $form_state = NULL) {[m
[31m-  $fid = 0;[m
[31m-[m
[31m-  // Find the current value of this field from the form state.[m
[31m-  $form_state_fid = $form_state['values'];[m
[31m-  foreach ($element['#parents'] as $parent) {[m
[31m-    $form_state_fid = isset($form_state_fid[$parent]) ? $form_state_fid[$parent] : 0;[m
[31m-  }[m
[31m-[m
[31m-  if ($element['#extended'] && isset($form_state_fid['fid'])) {[m
[31m-    $fid = $form_state_fid['fid'];[m
[31m-  }[m
[31m-  elseif (is_numeric($form_state_fid)) {[m
[31m-    $fid = $form_state_fid;[m
[31m-  }[m
[31m-[m
[31m-  // Process any input and attach files.[m
[31m-  if ($input !== FALSE) {[m
[31m-    $return = $input;[m
[31m-[m
[31m-    // Attachments take priority over all other values.[m
[31m-    if ($file = media_attach_file($element)) {[m
[31m-      $fid = $file->fid;[m
[31m-    }[m
[31m-    else {[m
[31m-      // Check for #filefield_value_callback values.[m
[31m-      // Because FAPI does not allow multiple #value_callback values like it[m
[31m-      // does for #element_validate and #process, this fills the missing[m
[31m-      // functionality to allow File fields to be extended through FAPI.[m
[31m-      if (isset($element['#file_value_callbacks'])) {[m
[31m-        foreach ($element['#file_value_callbacks'] as $callback) {[m
[31m-          $callback($element, $input, $form_state);[m
[31m-        }[m
[31m-      }[m
[31m-      // Load file if the FID has changed to confirm it exists.[m
[31m-      if (isset($input['fid']) && $file = file_load($input['fid'])) {[m
[31m-        $fid = $file->fid;[m
[31m-      }[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  // If there is no input, set the default value.[m
[31m-  else {[m
[31m-    if ($element['#extended']) {[m
[31m-      $default_fid = isset($element['#default_value']['fid']) ? $element['#default_value']['fid'] : 0;[m
[31m-      $return = isset($element['#default_value']) ? $element['#default_value'] : array('fid' => 0);[m
[31m-    }[m
[31m-    else {[m
[31m-      $default_fid = isset($element['#default_value']) ? $element['#default_value'] : 0;[m
[31m-      $return = array('fid' => 0);[m
[31m-    }[m
[31m-[m
[31m-    // Confirm that the file exists when used as a default value.[m
[31m-    if ($default_fid && $file = file_load($default_fid)) {[m
[31m-      $fid = $file->fid;[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  $return['fid'] = $fid;[m
[31m-[m
[31m-  return $return;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Validate media form elements.[m
[31m- *[m
[31m- * The file type is validated during the upload process, but this is necessary[m
[31m- * necessary in order to respect the #required property.[m
[31m- */[m
[31m-function media_element_validate(&$element, &$form_state) {[m
[31m-  $clicked_button = end($form_state['triggering_element']['#parents']);[m
[31m-[m
[31m-  // Check required property based on the FID.[m
[31m-  if ($element['#required'] && empty($element['fid']['#value']) && !in_array($clicked_button, array('attach_button', 'remove_button'))) {[m
[31m-    form_error($element['browse_button'], t('!name field is required.', array('!name' => $element['#title'])));[m
[31m-  }[m
[31m-[m
[31m-  // Consolidate the array value of this field to a single FID.[m
[31m-  if (!$element['#extended']) {[m
[31m-    form_set_value($element, $element['fid']['#value'], $form_state);[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Form submission handler for attach / remove buttons of media elements.[m
[31m- *[m
[31m- * @see media_element_process()[m
[31m- */[m
[31m-function media_file_submit($form, &$form_state) {[m
[31m-  // Determine whether it was the attach or remove button that was clicked, and[m
[31m-  // set $element to the managed_file element that contains that button.[m
[31m-  $parents = $form_state['triggering_element']['#array_parents'];[m
[31m-  $button_key = array_pop($parents);[m
[31m-  $element = drupal_array_get_nested_value($form, $parents);[m
[31m-[m
[31m-  // No action is needed here for the attach button, because all media[m
[31m-  // attachments on the form are processed by media_file_value() regardless of[m
[31m-  // which button was clicked. Action is needed here for the remove button,[m
[31m-  // because we only remove a file in response to its remove button being[m
[31m-  // clicked.[m
[31m-  if ($button_key == 'remove_button') {[m
[31m-    // If it's a temporary file we can safely remove it immediately, otherwise[m
[31m-    // it's up to the implementing module to clean up files that are in use.[m
[31m-    if ($element['#file'] && $element['#file']->status == 0) {[m
[31m-      file_delete($element['#file']);[m
[31m-    }[m
[31m-    // Update both $form_state['values'] and $form_state['input'] to reflect[m
[31m-    // that the file has been removed, so that the form is rebuilt correctly.[m
[31m-    // $form_state['values'] must be updated in case additional submit handlers[m
[31m-    // run, and for form building functions that run during the rebuild, such as[m
[31m-    // when the media element is part of a field widget.[m
[31m-    // $form_state['input'] must be updated so that media_file_value() has[m
[31m-    // correct information during the rebuild.[m
[31m-    $values_element = $element['#extended'] ? $element['fid'] : $element;[m
[31m-    form_set_value($values_element, NULL, $form_state);[m
[31m-    drupal_array_set_nested_value($form_state['input'], $values_element['#parents'], NULL);[m
[31m-  }[m
[31m-[m
[31m-  // Set the form to rebuild so that $form is correctly updated in response to[m
[31m-  // processing the file removal. Since this function did not change $form_state[m
[31m-  // if the upload button was clicked, a rebuild isn't necessary in that[m
[31m-  // situation and setting $form_state['redirect'] to FALSE would suffice.[m
[31m-  // However, we choose to always rebuild, to keep the form processing workflow[m
[31m-  // consistent between the two buttons.[m
[31m-  $form_state['rebuild'] = TRUE;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Attaches any files that have been referenced by a media element.[m
[31m- *[m
[31m- * @param $element[m
[31m- *   The FAPI element whose files are being attached.[m
[31m- *[m
[31m- * @return[m
[31m- *   The file object representing the file that was attached, or FALSE if no[m
[31m- *   file was attached.[m
[31m- */[m
[31m-function media_attach_file($element) {[m
[31m-  $upload_name = implode('_', $element['#parents']);[m
[31m-  if (empty($_POST['media'][$upload_name])) {[m
[31m-    return FALSE;[m
[31m-  }[m
[31m-[m
[31m-  if (!$file = file_load($_POST['media'][$upload_name])) {[m
[31m-    watchdog('file', 'The file upload failed. %upload', array('%upload' => $upload_name));[m
[31m-    form_set_error($upload_name, t('The file in the !name field was unable to be uploaded.', array('!name' => $element['#title'])));[m
[31m-    return FALSE;[m
[31m-  }[m
[31m-[m
[31m-  return $file;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Returns HTML for a managed file element.[m
[31m- *[m
[31m- * @param $variables[m
[31m- *   An associative array containing:[m
[31m- *   - element: A render element representing the file.[m
[31m- *[m
[31m- * @ingroup themeable[m
[31m- */[m
[31m-function theme_media_element($variables) {[m
[31m-  $element = $variables['element'];[m
[31m-[m
[31m-  $attributes = array();[m
[31m-  if (isset($element['#id'])) {[m
[31m-    $attributes['id'] = $element['#id'];[m
[31m-  }[m
[31m-  if (!empty($element['#attributes']['class'])) {[m
[31m-    $attributes['class'] = (array) $element['#attributes']['class'];[m
[31m-  }[m
[31m-  $attributes['class'][] = 'form-media';[m
[31m-[m
[31m-  // This wrapper is required to apply JS behaviors and CSS styling.[m
[31m-  $output = '';[m
[31m-  $output .= '<div' . drupal_attributes($attributes) . '>';[m
[31m-  $output .= drupal_render_children($element);[m
[31m-  $output .= '</div>';[m
[31m-  return $output;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * #pre_render callback to hide display of the browse/attach or remove controls.[m
[31m- *[m
[31m- * Browse/attach controls are hidden when a file is already attached.[m
[31m- * Remove controls are hidden when there is no file attached. Controls are[m
[31m- * hidden here instead of in media_element_process(), because #access for these[m
[31m- * buttons depends on the media element's #value. See the documentation of[m
[31m- * form_builder() for more detailed information about the relationship between[m
[31m- * #process, #value, and #access.[m
[31m- *[m
[31m- * Because #access is set here, it affects display only and does not prevent[m
[31m- * JavaScript or other untrusted code from submitting the form as though access[m
[31m- * were enabled. The form processing functions for these elements should not[m
[31m- * assume that the buttons can't be "clicked" just because they are not[m
[31m- * displayed.[m
[31m- *[m
[31m- * @see media_element_process()[m
[31m- * @see form_builder()[m
[31m- */[m
[31m-function media_element_pre_render($element) {[m
[31m-  // If we already have a file, we don't want to show the browse and attach[m
[31m-  // controls.[m
[31m-  if (!empty($element['#value']['fid'])) {[m
[31m-    $element['upload']['#access'] = FALSE;[m
[31m-    $element['browse_button']['#access'] = FALSE;[m
[31m-    $element['attach_button']['#access'] = FALSE;[m
[31m-  }[m
[31m-  // If we don't already have a file, there is nothing to remove.[m
[31m-  else {[m
[31m-    $element['remove_button']['#access'] = FALSE;[m
[31m-  }[m
[31m-  return $element;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Generates a thumbnail preview of a file.[m
[31m- *[m
[31m- * Provides default fallback images if an image of the file cannot be generated.[m
[31m- *[m
[31m- * @param object $file[m
[31m- *   A Drupal file object.[m
[31m- * @param boolean $link[m
[31m- *   (optional) Boolean indicating whether the thumbnail should be linked to the[m
[31m- *   file. Defaults to FALSE.[m
[31m- * @param string $view_mode[m
[31m- *   (optional) The view mode to use when rendering the thumbnail. Defaults to[m
[31m- *   'preview'.[m
[31m- *[m
[31m- * @return array[m
[31m- *   Renderable array suitable for drupal_render() with the necessary classes[m
[31m- *   and CSS to support a media thumbnail.[m
[31m- */[m
[31m-function media_get_thumbnail_preview($file, $link = FALSE, $view_mode = 'preview') {[m
[31m-  // If a file has an invalid type, allow file_view_file() to work.[m
[31m-  if (!file_type_is_enabled($file->type)) {[m
[31m-    $file->type = file_get_type($file);[m
[31m-  }[m
[31m-[m
[31m-  $preview = file_view_file($file, $view_mode);[m
[31m-  $preview['#show_names'] = TRUE;[m
[31m-  $preview['#add_link'] = $link;[m
[31m-  $preview['#theme_wrappers'][] = 'media_thumbnail';[m
[31m-  $preview['#attached']['css'][] = drupal_get_path('module', 'media') . '/css/media.css';[m
[31m-[m
[31m-  return $preview;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Check that the media is one of the selected types.[m
[31m- *[m
[31m- * @param object $file[m
[31m- *   A Drupal file object.[m
[31m- * @param array $types[m
[31m- *   An array of media type names[m
[31m- *[m
[31m- * @return array[m
[31m- *   If the file type is not allowed, it will contain an error message.[m
[31m- *[m
[31m- * @see hook_file_validate()[m
[31m- */[m
[31m-function media_file_validate_types($file, $types) {[m
[31m-  $errors = array();[m
[31m-  if (!in_array(file_get_type($file), $types)) {[m
[31m-    $errors[] = t('Only the following types of files are allowed to be uploaded: %types-allowed', array('%types-allowed' => implode(', ', $types)));[m
[31m-  }[m
[31m-[m
[31m-  return $errors;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_file_displays_alter().[m
[31m- */[m
[31m-function media_file_displays_alter(&$displays, $file, $view_mode) {[m
[31m-  if ($view_mode == 'preview' && empty($displays)) {[m
[31m-    // We re in the media browser and this file has no formatters enabled.[m
[31m-    // Instead of letting it go through theme_file_link(), pass it through[m
[31m-    // theme_media_formatter_large_icon() to get our cool file icon instead.[m
[31m-    $displays['file_field_media_large_icon'] = array([m
[31m-      'weight' => 0,[m
[31m-      'status' => 1,[m
[31m-      'settings' => NULL,[m
[31m-    );[m
[31m-  }[m
[31m-[m
[31m-  // Alt and title are special.[m
[31m-  // @see file_entity_file_load[m
[31m-  $alt = variable_get('file_entity_alt', '[file:field_file_image_alt_text]');[m
[31m-  $title = variable_get('file_entity_title', '[file:field_file_image_title_text]');[m
[31m-[m
[31m-  $replace_options = array([m
[31m-    'clear' => TRUE,[m
[31m-    'sanitize' => FALSE,[m
[31m-  );[m
[31m-[m
[31m-  // Load alt and title text from fields.[m
[31m-  if (!empty($alt)) {[m
[31m-    $file->alt = decode_entities(token_replace($alt, array('file' => $file), $replace_options));[m
[31m-  }[m
[31m-  if (!empty($title)) {[m
[31m-    $file->title = decode_entities(token_replace($title, array('file' => $file), $replace_options));[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * For sanity in grammar.[m
[31m- *[m
[31m- * @see media_set_browser_params()[m
[31m- */[m
[31m-function media_get_browser_params() {[m
[31m-  return media_set_browser_params();[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Provides a singleton of the params passed to the media browser.[m
[31m- *[m
[31m- * This is useful in situations like form alters because callers can pass[m
[31m- * id="wysiywg_form" or whatever they want, and a form alter could pick this up.[m
[31m- * We may want to change the hook_media_browser_plugin_view() implementations to[m
[31m- * use this function instead of being passed params for consistency.[m
[31m- *[m
[31m- * It also offers a chance for some meddler to meddle with them.[m
[31m- *[m
[31m- * @see media_browser()[m
[31m- */[m
[31m-function media_set_browser_params() {[m
[31m-  $params = &drupal_static(__FUNCTION__, array());[m
[31m-[m
[31m-  if (empty($params)) {[m
[31m-    // Build out browser settings. Permissions- and security-related behaviors[m
[31m-    // should not rely on these parameters, since they come from the HTTP query.[m
[31m-    // @TODO make sure we treat parameters as user input.[m
[31m-    $params = drupal_get_query_parameters() + array([m
[31m-        'types' => array(),[m
[31m-        'multiselect' => FALSE,[m
[31m-      );[m
[31m-[m
[31m-    // Transform text 'true' and 'false' to actual booleans.[m
[31m-    foreach ($params as $k => $v) {[m
[31m-      if ($v === 'true') {[m
[31m-        $params[$k] = TRUE;[m
[31m-      }[m
[31m-      elseif ($v === 'false') {[m
[31m-        $params[$k] = FALSE;[m
[31m-      }[m
[31m-    }[m
[31m-[m
[31m-    array_walk_recursive($params, 'media_recursive_check_plain');[m
[31m-[m
[31m-    // Allow modules to alter the parameters.[m
[31m-    drupal_alter('media_browser_params', $params);[m
[31m-  }[m
[31m-[m
[31m-  return $params;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_ctools_plugin_api().[m
[31m- *[m
[31m- * Lets CTools know which plugin APIs are implemented by Media module.[m
[31m- */[m
[31m-function media_ctools_plugin_api($module, $api) {[m
[31m-  if ($module == 'file_entity' && $api == 'file_default_displays') {[m
[31m-    return array([m
[31m-      'version' => 1,[m
[31m-    );[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_form_FORM_ID_alter().[m
[31m- *[m
[31m- * This alter enhances the default admin/content/file page, addding JS and CSS.[m
[31m- * It also makes modifications to the thumbnail view by replacing the existing[m
[31m- * checkboxes and table with thumbnails.[m
[31m- */[m
[31m-function media_form_file_entity_admin_file_alter(&$form, $form_state) {[m
[31m-  if (!empty($form_state['values']['operation'])) {[m
[31m-    // The form is being rebuilt because an operation requiring confirmation[m
[31m-    // We don't want to be messing with it in this case.[m
[31m-    return;[m
[31m-  }[m
[31m-[m
[31m-  // Add the "Add file" local action, and notify users if they have files[m
[31m-  // selected and they try to switch between the "Thumbnail" and "List" local[m
[31m-  // tasks.[m
[31m-  $path = drupal_get_path('module', 'media');[m
[31m-  $form['#attributes']['class'][] = 'file-entity-admin-file-form';[m
[31m-  $form['#attached']['js'][] = $path . '/js/media.admin.js';[m
[31m-  $form['#attached']['css'][] = $path . '/css/media.css';[m
[31m-[m
[31m-  // By default, this form contains a table select element called "files". For[m
[31m-  // the 'thumbnails' tab, Media generates a thumbnail for each file and[m
[31m-  // replaces the tableselect with a grid of thumbnails.[m
[31m-  if (arg(3) == 'thumbnails') {[m
[31m-    if (empty($form['admin']['files']['#options'])) {[m
[31m-      // Display empty text if there are no files.[m
[31m-      $form['admin']['files'] = array([m
[31m-        '#markup' => '<p>' . $form['admin']['files']['#empty'] . '</p>',[m
[31m-      );[m
[31m-    }[m
[31m-    else {[m
[31m-      $files = file_load_multiple(array_keys($form['admin']['files']['#options']));[m
[31m-[m
[31m-      $form['admin']['files'] = array([m
[31m-        '#tree' => TRUE,[m
[31m-        '#prefix' => '<div class="media-display-thumbnails media-clear clearfix"><ul id="media-browser-library-list" class="media-list-thumbnails">',[m
[31m-        '#suffix' => '</ul></div>',[m
[31m-      );[m
[31m-[m
[31m-      foreach ($files as $file) {[m
[31m-        $preview = media_get_thumbnail_preview($file, TRUE);[m
[31m-        $form['admin']['files'][$file->fid] = array([m
[31m-          '#type' => 'checkbox',[m
[31m-          '#title' => '',[m
[31m-          '#prefix' => '<li>' . drupal_render($preview),[m
[31m-          '#suffix' => '</li>',[m
[31m-        );[m
[31m-      }[m
[31m-    }[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_views_api().[m
[31m- */[m
[31m-function media_views_api() {[m
[31m-  return array([m
[31m-    'api' => 3,[m
[31m-    'path' => drupal_get_path('module', 'media'),[m
[31m-  );[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_views_default_views().[m
[31m- */[m
[31m-function media_views_default_views() {[m
[31m-  return media_load_all_exports('media', 'views', 'view.inc', 'view');[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Fetches an array of exportables from files.[m
[31m- *[m
[31m- * @param string $module[m
[31m- *   The module invoking this request. (Can be called by other modules.)[m
[31m- * @param string $directory[m
[31m- *   The subdirectory in the custom module.[m
[31m- * @param string $extension[m
[31m- *   The file extension.[m
[31m- * @param string $name[m
[31m- *   The name of the variable found in each file. Defaults to the same as[m
[31m- *   $extension.[m
[31m- *[m
[31m- * @return array[m
[31m- *   Array of $name objects.[m
[31m- */[m
[31m-function media_load_all_exports($module, $directory, $extension, $name = NULL) {[m
[31m-  if (!$name) {[m
[31m-    $name = $extension;[m
[31m-  }[m
[31m-[m
[31m-  $return = array();[m
[31m-  // Find all the files in the directory with the correct extension.[m
[31m-  $files = file_scan_directory(drupal_get_path('module', $module) . "/$directory", "/.$extension/");[m
[31m-  foreach ($files as $path => $file) {[m
[31m-    require $path;[m
[31m-    if (isset($$name)) {[m
[31m-      $return[$$name->name] = $$name;[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  return $return;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Returns metadata describing Media browser plugins.[m
[31m- *[m
[31m- * @return[m
[31m- *   An associative array of plugin information, keyed by plugin.[m
[31m- *[m
[31m- * @see hook_media_browser_plugin_info()[m
[31m- * @see hook_media_browser_plugin_info_alter()[m
[31m- */[m
[31m-function media_get_browser_plugin_info() {[m
[31m-  $info = &drupal_static(__FUNCTION__);[m
[31m-[m
[31m-  if (!isset($info)) {[m
[31m-    $info = module_invoke_all('media_browser_plugin_info');[m
[31m-    drupal_alter('media_browser_plugin_info', $info);[m
[31m-  }[m
[31m-[m
[31m-  return $info;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Gets the MIME type mapped to a given extension.[m
[31m- *[m
[31m- * @param string $extension[m
[31m- *   A file extension.[m
[31m- *[m
[31m- * @return string[m
[31m- *   The MIME type associated with the extension or FALSE if the extension does[m
[31m- *   not have an associated MIME type.[m
[31m- *[m
[31m- * @see file_mimetype_mapping()[m
[31m- */[m
[31m-function media_get_extension_mimetype($extension) {[m
[31m-  include_once DRUPAL_ROOT . '/includes/file.mimetypes.inc';[m
[31m-  $mimetype_mappings = file_mimetype_mapping();[m
[31m-[m
[31m-  if (isset($mimetype_mappings['extensions'][$extension])) {[m
[31m-    $id = $mimetype_mappings['extensions'][$extension];[m
[31m-    return $mimetype_mappings['mimetypes'][$id];[m
[31m-  }[m
[31m-  else {[m
[31m-    return FALSE;[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Helper function to get a list of local stream wrappers.[m
[31m- */[m
[31m-function media_get_local_stream_wrappers() {[m
[31m-  return file_get_stream_wrappers(STREAM_WRAPPERS_LOCAL_NORMAL);[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Helper function to get a list of remote stream wrappers.[m
[31m- */[m
[31m-function media_get_remote_stream_wrappers() {[m
[31m-  $wrappers = file_get_stream_wrappers();[m
[31m-  $wrappers = array_diff_key($wrappers, file_get_stream_wrappers(STREAM_WRAPPERS_LOCAL_NORMAL));[m
[31m-  $wrappers = array_diff_key($wrappers, file_get_stream_wrappers(STREAM_WRAPPERS_LOCAL_HIDDEN));[m
[31m-  return $wrappers;[m
[31m-}[m
[1mdiff --git a/sites/all/modules/contrib/media/media.views.inc b/sites/all/modules/contrib/media/media.views.inc[m
[1mdeleted file mode 100644[m
[1mindex c577f48..0000000[m
[1m--- a/sites/all/modules/contrib/media/media.views.inc[m
[1m+++ /dev/null[m
[36m@@ -1,141 +0,0 @@[m
[31m-<?php[m
[31m-[m
[31m-/**[m
[31m- * @file[m
[31m- * Provide Views data and handlers for media.module[m
[31m- */[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_views_plugins().[m
[31m- *[m
[31m- * Generate a list of which base-tables to enabled the plugins for.[m
[31m- */[m
[31m-function media_views_plugins() {[m
[31m-  $plugins = array();[m
[31m-[m
[31m-  // Always allow the actual file-table[m
[31m-  $base = array('file_managed');[m
[31m-[m
[31m-  if (module_exists('search_api')) {[m
[31m-    // If the Search API module exists, also allow indices of the file-entity[m
[31m-    // that has the fid field indexed.[m
[31m-    $indices = search_api_index_load_multiple(NULL);[m
[31m-    foreach ($indices as $machine_name => $index) {[m
[31m-      if ($index->item_type == 'file' && isset($index->options['fields']['fid'])) {[m
[31m-        $base[] = 'search_api_index_' . $machine_name;[m
[31m-      }[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  // Display plugin.[m
[31m-  $plugins['display']['media_browser'] = array([m
[31m-    'title' => t('Media browser tab'),[m
[31m-    'help' => t('Display as a tab in the media browser.'),[m
[31m-    'handler' => 'media_views_plugin_display_media_browser',[m
[31m-    'theme' => 'views_view',[m
[31m-    'base' => $base,[m
[31m-    'use ajax' => TRUE,[m
[31m-    'use pager' => TRUE,[m
[31m-    'accept attachments' => TRUE,[m
[31m-  );[m
[31m-[m
[31m-  // Style plugin.[m
[31m-  $plugins['style']['media_browser'] = array([m
[31m-    'title' => t('Media browser'),[m
[31m-    'help' => t('Displays rows as an HTML list.'),[m
[31m-    'handler' => 'media_views_plugin_style_media_browser',[m
[31m-    'theme' => 'media_views_view_media_browser',[m
[31m-    'base' => $base,[m
[31m-    'uses row plugin' => FALSE,[m
[31m-    'uses row class' => FALSE,[m
[31m-    'uses options' => FALSE,[m
[31m-    'uses fields' => FALSE,[m
[31m-    'type' => 'normal',[m
[31m-    'help topic' => 'style-media-browser',[m
[31m-  );[m
[31m-  return $plugins;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Display the view as a media browser.[m
[31m- */[m
[31m-function template_preprocess_media_views_view_media_browser(&$vars) {[m
[31m-  module_load_include('inc', 'media', 'includes/media.browser');[m
[31m-  // Load file objects for each View result.[m
[31m-  $fids = array();[m
[31m-  foreach ($vars['rows'] as $index => $row) {[m
[31m-    // The Search API module returns the row in a slightly different format,[m
[31m-    // so convert it to the format that the normal file_managed table returns.[m
[31m-    if (!empty($row->entity->fid)) {[m
[31m-      $vars['rows'][$index]->fid = $row->entity->fid;[m
[31m-    }[m
[31m-    $fids[$index] = $row->fid;[m
[31m-  }[m
[31m-  $files = file_load_multiple($fids);[m
[31m-[m
[31m-  // Render the preview for each file.[m
[31m-  $params = media_get_browser_params();[m
[31m-  $view_mode = isset($params['view_mode']) ? $params['view_mode'] : 'preview';[m
[31m-[m
[31m-  foreach ($vars['rows'] as $index => $row) {[m
[31m-[m
[31m-    // If the view result is cached, then the result may include fids that no[m
[31m-    // longer exist.[m
[31m-    if (!isset($files[$row->fid])) {[m
[31m-      unset($vars['rows'][$index]);[m
[31m-      continue;[m
[31m-    }[m
[31m-[m
[31m-    $file = $files[$row->fid];[m
[31m-    // Add url/preview to the file object.[m
[31m-    media_browser_build_media_item($file, $view_mode);[m
[31m-    $vars['rows'][$index] = $file;[m
[31m-    $vars['rows'][$index]->preview = $file->preview;[m
[31m-  }[m
[31m-[m
[31m-  // Add the files to JS so that they are accessible inside the browser.[m
[31m-  drupal_add_js(array('media' => array('files' => array_values($files))), 'setting');[m
[31m-[m
[31m-  // Add the browser parameters to the settings and that this display exists.[m
[31m-  drupal_add_js(array([m
[31m-    'media' => array([m
[31m-      'browser' => array([m
[31m-        'params' => media_get_browser_params(),[m
[31m-        'views' => array([m
[31m-          $vars['view']->name => array([m
[31m-            $vars['view']->current_display,[m
[31m-          ),[m
[31m-        ),[m
[31m-      ),[m
[31m-    ),[m
[31m-  ), 'setting');[m
[31m-[m
[31m-  // Add classes and wrappers from the style plugin.[m
[31m-  $handler = $vars['view']->style_plugin;[m
[31m-[m
[31m-  $class = explode(' ', $handler->options['class']);[m
[31m-  $class = array_map('drupal_clean_css_identifier', $class);[m
[31m-[m
[31m-  $wrapper_class = explode(' ', $handler->options['wrapper_class']);[m
[31m-  $wrapper_class = array_map('drupal_clean_css_identifier', $wrapper_class);[m
[31m-[m
[31m-  $vars['class'] = implode(' ', $class);[m
[31m-  $vars['wrapper_class'] = implode(' ', $wrapper_class);[m
[31m-  $vars['wrapper_prefix'] = '<div class="' . implode(' ', $wrapper_class) . '">';[m
[31m-  $vars['wrapper_suffix'] = '</div>';[m
[31m-  $vars['list_type_prefix'] = '<' . $handler->options['type'] . ' id="media-browser-library-list" class="' . implode(' ', $class) . '">';[m
[31m-  $vars['list_type_suffix'] = '</' . $handler->options['type'] . '>';[m
[31m-[m
[31m-  // Run theming variables through a standard Views preprocess function.[m
[31m-  template_preprocess_views_view_unformatted($vars);[m
[31m-[m
[31m-  // Add media browser JavaScript and CSS.[m
[31m-  drupal_add_js(drupal_get_path('module', 'media') . '/js/plugins/media.views.js');[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_views_invalidate_cache().[m
[31m- */[m
[31m-function media_views_invalidate_cache() {[m
[31m-  drupal_static_reset('media_get_browser_plugin_info');[m
[31m-}[m
[1mdiff --git a/sites/all/modules/contrib/media/modules/media_internet/includes/MediaBrowserInternet.inc b/sites/all/modules/contrib/media/modules/media_internet/includes/MediaBrowserInternet.inc[m
[1mdeleted file mode 100644[m
[1mindex b719dc9..0000000[m
[1m--- a/sites/all/modules/contrib/media/modules/media_internet/includes/MediaBrowserInternet.inc[m
[1m+++ /dev/null[m
[36m@@ -1,32 +0,0 @@[m
[31m-<?php[m
[31m-[m
[31m-/**[m
[31m- * @file[m
[31m- * Definition of MediaBrowserInternet.[m
[31m- */[m
[31m-[m
[31m-/**[m
[31m- * Media browser plugin for Media Internet sources.[m
[31m- */[m
[31m-class MediaBrowserInternet extends MediaBrowserPlugin {[m
[31m-  /**[m
[31m-   * Implements MediaBrowserPluginInterface::access().[m
[31m-   */[m
[31m-  public function access($account = NULL) {[m
[31m-    return media_internet_access($account);[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Implements MediaBrowserPlugin::view().[m
[31m-   */[m
[31m-  public function view() {[m
[31m-    module_load_include('inc', 'file_entity', 'file_entity.pages');[m
[31m-[m
[31m-    $build = array();[m
[31m-    $params = $this->params;[m
[31m-    $params['internet_media'] = TRUE;[m
[31m-    $build['form'] = drupal_get_form('media_internet_add_upload', $params);[m
[31m-[m
[31m-    return $build;[m
[31m-  }[m
[31m-}[m
[1mdiff --git a/sites/all/modules/contrib/media/modules/media_internet/media_internet.api.php b/sites/all/modules/contrib/media/modules/media_internet/media_internet.api.php[m
[1mdeleted file mode 100644[m
[1mindex 4a6afc5..0000000[m
[1m--- a/sites/all/modules/contrib/media/modules/media_internet/media_internet.api.php[m
[1m+++ /dev/null[m
[36m@@ -1,47 +0,0 @@[m
[31m-<?php[m
[31m-[m
[31m-/**[m
[31m- * @file[m
[31m- * Hooks provided by the media_internet module.[m
[31m- */[m
[31m-[m
[31m-/**[m
[31m- * Returns a list of Internet media providers for URL/embed code testing.[m
[31m- *[m
[31m- * @return array[m
[31m- *   A nested array of provider information, keyed by class name. This class[m
[31m- *   must implement a claim() method and may (should) extend the[m
[31m- *   @link MediaInternetBaseHandler MediaInternetBaseHandler @endlink class.[m
[31m- *   Each provider info array may have the following keys:[m
[31m- *   - title: (required) A name to be used when listing the currently supported[m
[31m- *     providers on the web tab of the media browser.[m
[31m- *   - hidden: (optional) Boolean to prevent the provider title from being[m
[31m- *     listed on the web tab of the media browser.[m
[31m- *   - weight: (optional) Integer to determine the tab order. Defaults to 0.[m
[31m- *[m
[31m- * @see hook_media_internet_providers_alter()[m
[31m- * @see media_internet_get_providers()[m
[31m- */[m
[31m-function hook_media_internet_providers() {[m
[31m-  return array([m
[31m-    'MyModuleYouTubeHandler' => array([m
[31m-      'title' => t('YouTube'),[m
[31m-      'hidden' => TRUE,[m
[31m-    ),[m
[31m-  );[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Alter the list of Internet media providers.[m
[31m- *[m
[31m- * @param array $providers[m
[31m- *   The associative array of Internet media provider definitions from[m
[31m- *   hook_media_internet_providers().[m
[31m- *[m
[31m- * @see hook_media_internet_providers()[m
[31m- * @see media_internet_get_providers()[m
[31m- */[m
[31m-function hook_media_internet_providers_alter(&$providers) {[m
[31m-  $providers['MyModuleYouTubeHandler']['title'] = t('Google video hosting');[m
[31m-  $providers['MyModuleYouTubeHandler']['weight'] = 42;[m
[31m-}[m
[1mdiff --git a/sites/all/modules/contrib/media/modules/media_internet/media_internet.info b/sites/all/modules/contrib/media/modules/media_internet/media_internet.info[m
[1mdeleted file mode 100644[m
[1mindex da328a1..0000000[m
[1m--- a/sites/all/modules/contrib/media/modules/media_internet/media_internet.info[m
[1m+++ /dev/null[m
[36m@@ -1,20 +0,0 @@[m
[31m-name = Media Internet Sources[m
[31m-description = Provides an API for accessing media on various internet services[m
[31m-package = Media[m
[31m-core = 7.x[m
[31m-[m
[31m-dependencies[] = media[m
[31m-[m
[31m-files[] = includes/MediaBrowserInternet.inc[m
[31m-files[] = includes/MediaInternetBaseHandler.inc[m
[31m-files[] = includes/MediaInternetFileHandler.inc[m
[31m-files[] = includes/MediaInternetNoHandlerException.inc[m
[31m-files[] = includes/MediaInternetValidationException.inc[m
[31m-files[] = tests/media_internet.test[m
[31m-[m
[31m-; Information added by Drupal.org packaging script on 2016-12-09[m
[31m-version = "7.x-2.0-beta14"[m
[31m-core = "7.x"[m
[31m-project = "media"[m
[31m-datestamp = "1481300289"[m
[31m-[m
[1mdiff --git a/sites/all/modules/contrib/media/modules/media_internet/media_internet.media.inc b/sites/all/modules/contrib/media/modules/media_internet/media_internet.media.inc[m
[1mdeleted file mode 100644[m
[1mindex 33f9539..0000000[m
[1m--- a/sites/all/modules/contrib/media/modules/media_internet/media_internet.media.inc[m
[1m+++ /dev/null[m
[36m@@ -1,35 +0,0 @@[m
[31m-<?php[m
[31m-[m
[31m-/**[m
[31m- * @file[m
[31m- * Media module integration for the Media internet module.[m
[31m- */[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_media_browser_plugin_info().[m
[31m- */[m
[31m-function media_internet_media_browser_plugin_info() {[m
[31m-  $info['media_internet'] = array([m
[31m-    'title' => t('Web'),[m
[31m-    'class' => 'MediaBrowserInternet',[m
[31m-  );[m
[31m-[m
[31m-  return $info;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_media_internet_providers().[m
[31m- *[m
[31m- * Provides a very basic handler which copies files from remote sources to the[m
[31m- * local files directory.[m
[31m- */[m
[31m-function media_internet_media_internet_providers() {[m
[31m-  return array([m
[31m-    'MediaInternetFileHandler' => array([m
[31m-      'title' => 'Files',[m
[31m-      'hidden' => TRUE,[m
[31m-      // Make it go last.[m
[31m-      'weight' => 10000,[m
[31m-    ),[m
[31m-  );[m
[31m-}[m
[1mdiff --git a/sites/all/modules/contrib/media/modules/media_internet/media_internet.module b/sites/all/modules/contrib/media/modules/media_internet/media_internet.module[m
[1mdeleted file mode 100644[m
[1mindex d94b479..0000000[m
[1m--- a/sites/all/modules/contrib/media/modules/media_internet/media_internet.module[m
[1m+++ /dev/null[m
[36m@@ -1,322 +0,0 @@[m
[31m-<?php[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_hook_info().[m
[31m- */[m
[31m-function media_internet_hook_info() {[m
[31m-  $hooks = array([m
[31m-    'media_internet_providers',[m
[31m-  );[m
[31m-[m
[31m-  return array_fill_keys($hooks, array('group' => 'media'));[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_menu().[m
[31m- */[m
[31m-function media_internet_menu() {[m
[31m-  $items['file/add/web'] = array([m
[31m-    'title' => 'Web',[m
[31m-    'description' => 'Add internet files to your media library.',[m
[31m-    'page callback' => 'drupal_get_form',[m
[31m-    'page arguments' => array('media_internet_add_upload'),[m
[31m-    'access callback' => 'media_internet_access',[m
[31m-    'type' => MENU_LOCAL_TASK,[m
[31m-    'file' => 'file_entity.pages.inc',[m
[31m-    'file path' => drupal_get_path('module', 'file_entity'),[m
[31m-  );[m
[31m-[m
[31m-  return $items;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Access callback for the media_internet media browser plugin.[m
[31m- */[m
[31m-function media_internet_access($account = NULL) {[m
[31m-  return user_access('administer files', $account) || user_access('add media from remote sources', $account);[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implement hook_permission().[m
[31m- */[m
[31m-function media_internet_permission() {[m
[31m-  return array([m
[31m-    'add media from remote sources' => array([m
[31m-      'title' => t('Add media from remote services'),[m
[31m-      'description' => t('Add media from remote sources such as other websites, YouTube, etc'),[m
[31m-    ),[m
[31m-  );[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_theme().[m
[31m- */[m
[31m-function media_internet_theme() {[m
[31m-  return array([m
[31m-    // media_internet.pages.inc.[m
[31m-    'media_internet_embed_help' => array([m
[31m-      'variables' => array('description' => NULL, 'supported_providers' => NULL),[m
[31m-    ),[m
[31m-  );[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Gets the list of Internet media providers.[m
[31m- *[m
[31m- * Each 'Provider' has a title and a class which can handle saving remote files.[m
[31m- * Providers are each given a turn at parsing a user-submitted URL or embed code[m
[31m- * and, if they recognize that it belongs to a service or protocol they support,[m
[31m- * they store a representation of it as a file object in file_managed.[m
[31m- *[m
[31m- * @return array[m
[31m- *   An associative array of provider information keyed by provider name.[m
[31m- */[m
[31m-function media_internet_get_providers() {[m
[31m-  $providers = &drupal_static(__FUNCTION__);[m
[31m-[m
[31m-  if (!isset($providers)) {[m
[31m-    foreach (module_implements('media_internet_providers') as $module) {[m
[31m-      foreach (module_invoke($module, 'media_internet_providers') as $class => $info) {[m
[31m-        $providers[$class] = $info;[m
[31m-[m
[31m-        // Store the name of the module which declared the provider.[m
[31m-        $providers[$class]['module'] = $module;[m
[31m-[m
[31m-        // Assign a default value to providers which don't specify a weight.[m
[31m-        if (!isset($providers[$class]['weight'])) {[m
[31m-          $providers[$class]['weight'] = 0;[m
[31m-        }[m
[31m-      }[m
[31m-    }[m
[31m-[m
[31m-    // Allow modules to alter the list of providers.[m
[31m-    drupal_alter('media_internet_providers', $providers);[m
[31m-[m
[31m-    // Sort the providers by weight.[m
[31m-    uasort($providers, 'drupal_sort_weight');[m
[31m-  }[m
[31m-[m
[31m-  return $providers;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Finds the appropriate provider for a given URL or embed_string[m
[31m- *[m
[31m- * Each provider has a claim() method which it uses to tell media_internet[m
[31m- * that it should handle this input.  We cycle through all providers to find[m
[31m- * the right one.[m
[31m- *[m
[31m- * @todo: Make this into a normal hook or something because we have to instantiate[m
[31m- * each class to test and that's not right.[m
[31m- */[m
[31m-function media_internet_get_provider($embed_string) {[m
[31m-  foreach (media_internet_get_providers() as $class_name => $nothing) {[m
[31m-    $p = new $class_name($embed_string);[m
[31m-    if ($p->claim($embed_string)) {[m
[31m-      return $p;[m
[31m-    }[m
[31m-  }[m
[31m-  throw new MediaInternetNoHandlerException(t('Unable to handle the provided embed string or URL.'));[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Returns HTML for help text based on supported internet media providers.[m
[31m- *[m
[31m- * @param $variables[m
[31m- *   An associative array containing:[m
[31m- *   - description: The normal description for this field, specified by the[m
[31m- *     user.[m
[31m- *   - supported_providers: A string of supported providers.[m
[31m- *[m
[31m- * @ingroup themeable[m
[31m- */[m
[31m-function theme_media_internet_embed_help($variables) {[m
[31m-  $description = $variables['description'];[m
[31m-  $supported_providers = $variables['supported_providers'];[m
[31m-[m
[31m-  $descriptions = array();[m
[31m-[m
[31m-  if (strlen($description)) {[m
[31m-    $descriptions[] = $description;[m
[31m-  }[m
[31m-  if (!empty($supported_providers)) {[m
[31m-    $descriptions[] = t('Supported internet media providers: !providers.', array('!providers' => '<strong>' . $supported_providers . '</strong>'));[m
[31m-  }[m
[31m-[m
[31m-  return implode('<br />', $descriptions);[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_forms().[m
[31m- */[m
[31m-function media_internet_forms($form_id, $args) {[m
[31m-  $forms = array();[m
[31m-[m
[31m-  // Create a copy of the upload wizard form for internet media.[m
[31m-  if ($form_id == 'media_internet_add_upload') {[m
[31m-    $forms[$form_id] = array([m
[31m-      'callback' => 'file_entity_add_upload',[m
[31m-    );[m
[31m-  }[m
[31m-[m
[31m-  return $forms;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_form_FORM_ID_alter().[m
[31m- */[m
[31m-function media_internet_form_file_entity_add_upload_alter(&$form, &$form_state, $form_id) {[m
[31m-  $step = $form['#step'];[m
[31m-  $options = $form['#options'];[m
[31m-[m
[31m-  // Swap the upload field for an embed field when on the first step of the web[m
[31m-  // tab.[m
[31m-  if ($form_id == 'media_internet_add_upload' && $step == 1) {[m
[31m-    unset($form['upload']);[m
[31m-[m
[31m-    $form['embed_code'] = array([m
[31m-      '#type' => 'textfield',[m
[31m-      '#title' => t('File URL'),[m
[31m-      '#description' => t('Enter a URL to a file.'),[m
[31m-      '#attributes' => array('class' => array('media-add-from-url')),[m
[31m-      // There is no standard specifying a maximum length for a URL. Internet[m
[31m-      // Explorer supports up to 2083 (http://support.microsoft.com/kb/208427)[m
[31m-      // so we assume publicly available media URLs are within this limit.[m
[31m-      '#maxlength' => 2083,[m
[31m-      '#required' => TRUE,[m
[31m-      '#default_value' => isset($form_state['storage']['embed_code']) ? $form_state['storage']['embed_code'] : NULL,[m
[31m-    );[m
[31m-[m
[31m-    // Create an array to hold potential Internet media providers.[m
[31m-    $providers = array();[m
[31m-[m
[31m-    // Determine if there are any visible providers.[m
[31m-    foreach (media_internet_get_providers() as $key => $provider) {[m
[31m-      if (empty($provider['hidden']) || $provider['hidden'] != TRUE) {[m
[31m-        $providers[] = check_plain($provider['title']);[m
[31m-      }[m
[31m-    }[m
[31m-[m
[31m-    $form['#providers'] = $providers;[m
[31m-[m
[31m-    // Notify the user of any available providers.[m
[31m-    if ($providers) {[m
[31m-      // If any providers are enabled it is assumed that some kind of embed is supported.[m
[31m-      $form['embed_code']['#title'] = t('File URL or media resource');[m
[31m-      $form['embed_code']['#description'] = t('Enter a URL to a file or media resource. Many media providers also support identifying media via the embed code used to embed the media into external websites.');[m
[31m-[m
[31m-      $form['embed_code']['#description'] = theme('media_internet_embed_help', array('description' => $form['embed_code']['#description'], 'supported_providers' => implode(', ', $providers)));[m
[31m-    }[m
[31m-[m
[31m-    $form['#validators'] = array();[m
[31m-[m
[31m-    if (!empty($options['types'])) {[m
[31m-      $form['#validators']['media_file_validate_types'] = array($options['types']);[m
[31m-    }[m
[31m-[m
[31m-    // Add validation and submission handlers to the form and ensure that they[m
[31m-    // run first.[m
[31m-    array_unshift($form['#validate'], 'media_internet_add_validate');[m
[31m-    array_unshift($form['#submit'], 'media_internet_add_submit');[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Allow stream wrappers to have their chance at validation.[m
[31m- *[m
[31m- * Any module that implements hook_media_parse will have an[m
[31m- * opportunity to validate this.[m
[31m- *[m
[31m- * @see media_parse_to_uri()[m
[31m- */[m
[31m-function media_internet_add_validate($form, &$form_state) {[m
[31m-  // Supporting providers can now claim this input. It might be a URL, but it[m
[31m-  // might be an embed code as well.[m
[31m-  $embed_code = $form_state['values']['embed_code'];[m
[31m-[m
[31m-  try {[m
[31m-    $provider = media_internet_get_provider($embed_code);[m
[31m-    $provider->validate();[m
[31m-  }[m
[31m-  catch (MediaInternetNoHandlerException $e) {[m
[31m-    form_set_error('embed_code', $e->getMessage());[m
[31m-    return;[m
[31m-  }[m
[31m-  catch (MediaInternetValidationException $e) {[m
[31m-    form_set_error('embed_code', $e->getMessage());[m
[31m-    return;[m
[31m-  }[m
[31m-[m
[31m-  $validators = $form['#validators'];[m
[31m-  $file = $provider->getFileObject();[m
[31m-[m
[31m-  if ($validators) {[m
[31m-    try {[m
[31m-      $file = $provider->getFileObject();[m
[31m-    }[m
[31m-    catch (Exception $e) {[m
[31m-      form_set_error('embed_code', $e->getMessage());[m
[31m-      return;[m
[31m-    }[m
[31m-[m
[31m-    // Check for errors. @see media_add_upload_validate calls file_save_upload().[m
[31m-    // this code is ripped from file_save_upload because we just want the validation part.[m
[31m-    // Call the validation functions specified by this function's caller.[m
[31m-    $errors = file_validate($file, $validators);[m
[31m-[m
[31m-    if (!empty($errors)) {[m
[31m-      $message = t('%url could not be added.', array('%url' => $embed_code));[m
[31m-      if (count($errors) > 1) {[m
[31m-        $message .= theme('item_list', array('items' => $errors));[m
[31m-      }[m
[31m-      else {[m
[31m-        $message .= ' ' . array_pop($errors);[m
[31m-      }[m
[31m-      form_set_error('embed_code', $message);[m
[31m-      return FALSE;[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  // @TODO: Validate that if we have no $uri that this is a valid file to[m
[31m-  // save. For instance, we may only be interested in images, and it would[m
[31m-  // be helpful to let the user know they passed the HTML page containing[m
[31m-  // the image accidentally. That would also save us from saving the file[m
[31m-  // in the submit step.[m
[31m-[m
[31m-  // This is kinda a hack of the same.[m
[31m-[m
[31m-  // This should use the file_validate routines that the upload form users.[m
[31m-  // We need to fix the media_parse_to_file routine to allow for a validation.[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Upload a file from a URL.[m
[31m- *[m
[31m- * This will copy a file from a remote location and store it locally.[m
[31m- *[m
[31m- * @see media_parse_to_uri()[m
[31m- * @see media_parse_to_file()[m
[31m- */[m
[31m-function media_internet_add_submit($form, &$form_state) {[m
[31m-  $embed_code = $form_state['values']['embed_code'];[m
[31m-[m
[31m-  try {[m
[31m-    // Save the remote file[m
[31m-    $provider = media_internet_get_provider($embed_code);[m
[31m-    // Providers decide if they need to save locally or somewhere else.[m
[31m-    // This method returns a file object[m
[31m-    $file = $provider->save();[m
[31m-  }[m
[31m-  catch (Exception $e) {[m
[31m-    form_set_error('embed_code', $e->getMessage());[m
[31m-    return;[m
[31m-  }[m
[31m-[m
[31m-  if (!$file->fid) {[m
[31m-    form_set_error('embed_code', t('The file %file could not be saved. An unknown error has occurred.', array('%file' => $embed_code)));[m
[31m-    return;[m
[31m-  }[m
[31m-  else {[m
[31m-    $form_state['storage']['upload'] = $file->fid;[m
[31m-  }[m
[31m-}[m
[1mdiff --git a/sites/all/modules/contrib/media/modules/media_wysiwyg_view_mode/media_wysiwyg_view_mode.info b/sites/all/modules/contrib/media/modules/media_wysiwyg_view_mode/media_wysiwyg_view_mode.info[m
[1mdeleted file mode 100644[m
[1mindex 24397a1..0000000[m
[1m--- a/sites/all/modules/contrib/media/modules/media_wysiwyg_view_mode/media_wysiwyg_view_mode.info[m
[1m+++ /dev/null[m
[36m@@ -1,11 +0,0 @@[m
[31m-name = Media WYSIWYG View Mode[m
[31m-description = DEPRECATED, this folder is only here so that the module can be uninstalled.[m
[31m-package = Media[m
[31m-core = 7.x[m
[31m-[m
[31m-; Information added by Drupal.org packaging script on 2016-12-09[m
[31m-version = "7.x-2.0-beta14"[m
[31m-core = "7.x"[m
[31m-project = "media"[m
[31m-datestamp = "1481300289"[m
[31m-[m
[1mdiff --git a/sites/all/modules/contrib/media/modules/media_wysiwyg_view_mode/media_wysiwyg_view_mode.install b/sites/all/modules/contrib/media/modules/media_wysiwyg_view_mode/media_wysiwyg_view_mode.install[m
[1mdeleted file mode 100644[m
[1mindex 8288736..0000000[m
[1m--- a/sites/all/modules/contrib/media/modules/media_wysiwyg_view_mode/media_wysiwyg_view_mode.install[m
[1m+++ /dev/null[m
[36m@@ -1,15 +0,0 @@[m
[31m-<?php[m
[31m-[m
[31m-/**[m
[31m- * @file[m
[31m- * Install, update and uninstall functions for the Media WYSIWYG View Mode module.[m
[31m- */[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_uninstall().[m
[31m- */[m
[31m-function media_wysiwyg_view_mode_uninstall() {[m
[31m- db_delete('variable')[m
[31m- ->condition('name', "media_wysiwyg_view_mode_%", "LIKE")[m
[31m- ->execute();[m
[31m-}[m
[1mdiff --git a/sites/all/modules/contrib/media/modules/media_wysiwyg_view_mode/media_wysiwyg_view_mode.module b/sites/all/modules/contrib/media/modules/media_wysiwyg_view_mode/media_wysiwyg_view_mode.module[m
[1mdeleted file mode 100644[m
[1mindex 49f21c2..0000000[m
[1m--- a/sites/all/modules/contrib/media/modules/media_wysiwyg_view_mode/media_wysiwyg_view_mode.module[m
[1m+++ /dev/null[m
[36m@@ -1,12 +0,0 @@[m
[31m-<?php[m
[31m-/***[m
[31m- * hook_help[m
[31m- */[m
[31m-function media_wysiwyg_view_mode_help($path, $arg) {[m
[31m-  switch ($path) {[m
[31m-    // Main module help for the block module[m
[31m-    case 'admin/help#media_wysiwyg_view_mode':[m
[31m-      return '<p>' . t('The code that was previously in this module was moved to media_wysiwyg however to uninstall this module this has to be here.') . '</p>';[m
[31m-[m
[31m-  }[m
[31m-}[m
[1mdiff --git a/sites/all/modules/contrib/media/modules/mediafield/mediafield.info b/sites/all/modules/contrib/media/modules/mediafield/mediafield.info[m
[1mdeleted file mode 100644[m
[1mindex d89481c..0000000[m
[1m--- a/sites/all/modules/contrib/media/modules/mediafield/mediafield.info[m
[1m+++ /dev/null[m
[36m@@ -1,12 +0,0 @@[m
[31m-name = Media Field[m
[31m-description = "Provides a field type that stores media-specific data. <em>Deprecated by the core File field type.</em>"[m
[31m-package = Media[m
[31m-core = 7.x[m
[31m-dependencies[] = media[m
[31m-[m
[31m-; Information added by Drupal.org packaging script on 2016-12-09[m
[31m-version = "7.x-2.0-beta14"[m
[31m-core = "7.x"[m
[31m-project = "media"[m
[31m-datestamp = "1481300289"[m
[31m-[m
[1mdiff --git a/sites/all/modules/contrib/media/modules/mediafield/mediafield.install b/sites/all/modules/contrib/media/modules/mediafield/mediafield.install[m
[1mdeleted file mode 100644[m
[1mindex 3e867b8..0000000[m
[1m--- a/sites/all/modules/contrib/media/modules/mediafield/mediafield.install[m
[1m+++ /dev/null[m
[36m@@ -1,43 +0,0 @@[m
[31m-<?php[m
[31m-[m
[31m-/**[m
[31m- * @file[m
[31m- * Install and schema hooks for mediafield.[m
[31m- */[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_field_schema().[m
[31m- */[m
[31m-function mediafield_field_schema($field) {[m
[31m-  return array([m
[31m-    'columns' => array([m
[31m-      'fid' => array([m
[31m-        'type' => 'int',[m
[31m-        'unsigned' => TRUE,[m
[31m-        'not null' => FALSE,[m
[31m-      ),[m
[31m-      'title' => array([m
[31m-        'type' => 'varchar',[m
[31m-        'length' => 255,[m
[31m-        'not null' => FALSE,[m
[31m-      ),[m
[31m-      'data' => array([m
[31m-        'type' => 'text',[m
[31m-        'not null' => FALSE,[m
[31m-        'size' => 'big',[m
[31m-        'serialize' => TRUE,[m
[31m-        // 'description' => 'Used for storing additional information.[m
[31m-        // Can be harnessed by widgets',[m
[31m-      ),[m
[31m-    ),[m
[31m-    'indexes' => array([m
[31m-      'fid' => array('fid'),[m
[31m-    ),[m
[31m-    'foreign keys' => array([m
[31m-      'file_managed' => array([m
[31m-        'table' => 'file_managed',[m
[31m-        'columns' => array('fid' => 'fid'),[m
[31m-      ),[m
[31m-    ),[m
[31m-  );[m
[31m-}[m
[1mdiff --git a/sites/all/modules/contrib/media/modules/mediafield/mediafield.module b/sites/all/modules/contrib/media/modules/mediafield/mediafield.module[m
[1mdeleted file mode 100644[m
[1mindex 2dd77f3..0000000[m
[1m--- a/sites/all/modules/contrib/media/modules/mediafield/mediafield.module[m
[1m+++ /dev/null[m
[36m@@ -1,323 +0,0 @@[m
[31m-<?php[m
[31m-[m
[31m-/**[m
[31m- * @file[m
[31m- * Provide a "Multimedia asset" field.[m
[31m- */[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_field_info().[m
[31m- */[m
[31m-function mediafield_field_info() {[m
[31m-  return array([m
[31m-    'media' => array([m
[31m-      'label' => t('Multimedia asset'),[m
[31m-      'description' => t('This field stores a reference to a multimedia asset.'),[m
[31m-      'settings' => array(),[m
[31m-      'instance_settings' => array([m
[31m-        'file_extensions' => variable_get('file_entity_default_allowed_extensions', 'jpg jpeg gif png txt doc docx xls xlsx pdf ppt pptx pps ppsx odt ods odp mp3 mov mp4 m4a m4v mpeg avi ogg oga ogv weba webp webm'),[m
[31m-      ),[m
[31m-      'default_widget' => 'media_generic',[m
[31m-      'default_formatter' => 'media',[m
[31m-      'property_type' => 'field_item_file',[m
[31m-      'property_callbacks' => array('entity_metadata_field_file_callback'),[m
[31m-    ),[m
[31m-  );[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_field_widget_info_alter().[m
[31m- *[m
[31m- * Alter the media file selector so it is available for media fields.[m
[31m- */[m
[31m-function mediafield_field_widget_info_alter(&$info) {[m
[31m-  $info['media_generic']['field types'][] = 'media';[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_field_instance_settings_form().[m
[31m- */[m
[31m-function mediafield_field_instance_settings_form($field, $instance) {[m
[31m-  $settings = $instance['settings'];[m
[31m-[m
[31m-  // Make the extension list a little more human-friendly by comma-separation.[m
[31m-  $extensions = str_replace(' ', ', ', $settings['file_extensions']);[m
[31m-  $form['file_extensions'] = array([m
[31m-    '#type' => 'textfield',[m
[31m-    '#title' => t('Allowed file extensions for uploaded files'),[m
[31m-    '#default_value' => $extensions,[m
[31m-    '#description' => t('Separate extensions with a space or comma and do not include the leading dot.'),[m
[31m-    '#element_validate' => array('_file_generic_settings_extensions'),[m
[31m-    // By making this field required, we prevent a potential security issue[m
[31m-    // that would allow files of any type to be uploaded.[m
[31m-    '#required' => TRUE,[m
[31m-    '#maxlength' => 255,[m
[31m-  );[m
[31m-[m
[31m-  return $form;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_field_is_empty().[m
[31m- */[m
[31m-function mediafield_field_is_empty($item, $field) {[m
[31m-  return empty($item['fid']);[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_field_formatter_info().[m
[31m- */[m
[31m-function mediafield_field_formatter_info() {[m
[31m-  $formatters = array([m
[31m-    'media' => array([m
[31m-      'label' => t('Media'),[m
[31m-      'field types' => array('media'),[m
[31m-      'settings' => array('file_view_mode' => 'default'),[m
[31m-    ),[m
[31m-  );[m
[31m-[m
[31m-  return $formatters;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_field_formatter_settings_form().[m
[31m- */[m
[31m-function mediafield_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {[m
[31m-  $display = $instance['display'][$view_mode];[m
[31m-  $settings = $display['settings'];[m
[31m-[m
[31m-  $element = array();[m
[31m-[m
[31m-  if ($display['type'] == 'media') {[m
[31m-    $entity_info = entity_get_info('file');[m
[31m-    $options = array('default' => t('Default'));[m
[31m-    foreach ($entity_info['view modes'] as $file_view_mode => $file_view_mode_info) {[m
[31m-      $options[$file_view_mode] = $file_view_mode_info['label'];[m
[31m-    }[m
[31m-    $element['file_view_mode'] = array([m
[31m-      '#title' => t('File view mode'),[m
[31m-      '#type' => 'select',[m
[31m-      '#default_value' => $settings['file_view_mode'],[m
[31m-      '#options' => $options,[m
[31m-    );[m
[31m-  }[m
[31m-[m
[31m-  return $element;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_field_formatter_settings_summary().[m
[31m- */[m
[31m-function mediafield_field_formatter_settings_summary($field, $instance, $view_mode) {[m
[31m-  $display = $instance['display'][$view_mode];[m
[31m-  $settings = $display['settings'];[m
[31m-[m
[31m-  $summary = '';[m
[31m-[m
[31m-  if ($display['type'] == 'media') {[m
[31m-    $entity_info = entity_get_info('file');[m
[31m-    $file_view_mode_label = isset($entity_info['view modes'][$settings['file_view_mode']]) ? $entity_info['view modes'][$settings['file_view_mode']]['label'] : t('Default');[m
[31m-    $summary = t('File view mode: @view_mode', array('@view_mode' => $file_view_mode_label));[m
[31m-  }[m
[31m-[m
[31m-  return $summary;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_field_formatter_view().[m
[31m- */[m
[31m-function mediafield_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {[m
[31m-  $element = array();[m
[31m-[m
[31m-  $files = array();[m
[31m-  foreach ($items as $delta => $item) {[m
[31m-    if (!empty($item['file'])) {[m
[31m-      $files[$item['fid']] = $item['file'];[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  if (!empty($files)) {[m
[31m-    $output = file_view_multiple($files, $display['settings']['file_view_mode'], 0, $langcode);[m
[31m-    // Remove the first level from the output array.[m
[31m-    $element = reset($output);[m
[31m-  }[m
[31m-[m
[31m-  return $element;[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_field_prepare_view().[m
[31m- */[m
[31m-function mediafield_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {[m
[31m-  // Collect all file IDs that need loading.[m
[31m-  $fids = array();[m
[31m-  foreach ($entities as $id => $entity) {[m
[31m-    // Load the files from the files table.[m
[31m-    foreach ($items[$id] as $delta => $item) {[m
[31m-      if (!empty($item['fid'])) {[m
[31m-        $fids[] = $item['fid'];[m
[31m-      }[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  // Load the file entities.[m
[31m-  $files = file_load_multiple($fids);[m
[31m-[m
[31m-  // Add the loaded file entities to the field item array.[m
[31m-  foreach ($entities as $id => $entity) {[m
[31m-    foreach ($items[$id] as $delta => $item) {[m
[31m-      // If the file does not exist, mark the entire item as empty.[m
[31m-      if (empty($files[$item['fid']])) {[m
[31m-        unset($items[$id][$delta]);[m
[31m-      }[m
[31m-      else {[m
[31m-        $items[$id][$delta]['file'] = $files[$item['fid']];[m
[31m-      }[m
[31m-    }[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_field_validate().[m
[31m- *[m
[31m- * Possible error codes:[m
[31m- * - 'media_remote_file_type_not_allowed': The remote file is not an allowed[m
[31m- *   file type.[m
[31m- */[m
[31m-function mediafield_field_validate($obj_type, $object, $field, $instance, $langcode, $items, &$errors) {[m
[31m-  $allowed_types = array_keys(array_filter($instance['widget']['settings']['allowed_types']));[m
[31m-[m
[31m-    // @TODO: merge in stuff from media_uri_value[m
[31m-  foreach ($items as $delta => $item) {[m
[31m-    if (empty($item['fid'])) {[m
[31m-      return TRUE;[m
[31m-      //@TODO: make support for submiting with just a URI here?[m
[31m-    }[m
[31m-[m
[31m-    $file = file_load($item['fid']);[m
[31m-[m
[31m-    // Only validate allowed types if the file is remote and not local.[m
[31m-    if (!file_entity_file_is_local($file)) {[m
[31m-      if (!in_array($file->type, $allowed_types)) {[m
[31m-        $errors[$field['field_name']][$langcode][$delta][] = array([m
[31m-          'error' => 'media_remote_file_type_not_allowed',[m
[31m-          'message' => t('%name: Only remote files with the following types are allowed: %types-allowed.', array('%name' => t($instance['label']), '%types-allowed' => !empty($allowed_types) ? implode(', ', $allowed_types) : t('no file types selected'))),[m
[31m-        );[m
[31m-      }[m
[31m-    }[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements_hook_field_widget_error().[m
[31m- */[m
[31m-function mediafield_field_widget_error($element, $error, $form, &$form_state) {[m
[31m-  form_error($element['fid'], $error['message']);[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * @todo The following hook_field_(insert|update|delete|delete_revision)[m
[31m- *   implementations are nearly identical to the File module implementations of[m
[31m- *   the same field hooks. The only differences are:[m
[31m- *   - We pass 'media' rather than 'file' as the module argument to the[m
[31m- *     file_usage_(add|delete)() functions.[m
[31m- *   - We do not delete the file / media entity when its usage count goes to 0.[m
[31m- *   We should submit a core patch to File module to make it flexible with[m
[31m- *   respect to the above, so that we can reuse its implementation rather than[m
[31m- *   duplicating it.[m
[31m- */[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_field_insert().[m
[31m- */[m
[31m-function mediafield_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {[m
[31m-  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);[m
[31m-[m
[31m-  // Add a new usage of each uploaded file.[m
[31m-  foreach ($items as $item) {[m
[31m-    $file = (object) $item;[m
[31m-    file_usage_add($file, 'mediafield', $entity_type, $id);[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_field_update().[m
[31m- *[m
[31m- * Checks for files that have been removed from the object.[m
[31m- */[m
[31m-function mediafield_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {[m
[31m-  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);[m
[31m-[m
[31m-  // On new revisions, all files are considered to be a new usage and no[m
[31m-  // deletion of previous file usages are necessary.[m
[31m-  if (!empty($entity->revision)) {[m
[31m-    foreach ($items as $item) {[m
[31m-      $file = (object) $item;[m
[31m-      file_usage_add($file, 'mediafield', $entity_type, $id);[m
[31m-    }[m
[31m-    return;[m
[31m-  }[m
[31m-[m
[31m-  // Build a display of the current FIDs.[m
[31m-  $current_fids = array();[m
[31m-  foreach ($items as $item) {[m
[31m-    $current_fids[] = $item['fid'];[m
[31m-  }[m
[31m-[m
[31m-  // Compare the original field values with the ones that are being saved.[m
[31m-  $original_fids = array();[m
[31m-  if (!empty($entity->original->{$field['field_name']}[$langcode])) {[m
[31m-    foreach ($entity->original->{$field['field_name']}[$langcode] as $original_item) {[m
[31m-      $original_fids[] = $original_item['fid'];[m
[31m-      if (isset($original_item['fid']) && !in_array($original_item['fid'], $current_fids)) {[m
[31m-        // Decrement the file usage count by 1.[m
[31m-        $file = (object) $original_item;[m
[31m-        file_usage_delete($file, 'mediafield', $entity_type, $id, 1);[m
[31m-      }[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  // Add new usage entries for newly added files.[m
[31m-  foreach ($items as $item) {[m
[31m-    if (!in_array($item['fid'], $original_fids)) {[m
[31m-      $file = (object) $item;[m
[31m-      file_usage_add($file, 'mediafield', $entity_type, $id);[m
[31m-    }[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_field_delete().[m
[31m- */[m
[31m-function mediafield_field_delete($entity_type, $entity, $field, $instance, $langcode, &$items) {[m
[31m-  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);[m
[31m-[m
[31m-  // Delete all file usages within this entity.[m
[31m-  foreach ($items as $delta => $item) {[m
[31m-    $file = (object) $item;[m
[31m-    file_usage_delete($file, 'mediafield', $entity_type, $id, 0);[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_field_delete_revision().[m
[31m- */[m
[31m-function mediafield_field_delete_revision($entity_type, $entity, $field, $instance, $langcode, &$items) {[m
[31m-  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);[m
[31m-  foreach ($items as $delta => $item) {[m
[31m-    // @TODO: Not sure if this is correct[m
[31m-    $file = (object)$item;[m
[31m-    if (file_usage_delete($file, 'mediafield', $entity_type, $id, 1)) {[m
[31m-      $items[$delta] = NULL;[m
[31m-    }[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_views_api().[m
[31m- */[m
[31m-function mediafield_views_api() {[m
[31m-  return array([m
[31m-    'api' => 3,[m
[31m-  );[m
[31m-}[m
[1mdiff --git a/sites/all/modules/contrib/media/modules/mediafield/mediafield.views.inc b/sites/all/modules/contrib/media/modules/mediafield/mediafield.views.inc[m
[1mdeleted file mode 100644[m
[1mindex bc1e240..0000000[m
[1m--- a/sites/all/modules/contrib/media/modules/mediafield/mediafield.views.inc[m
[1m+++ /dev/null[m
[36m@@ -1,25 +0,0 @@[m
[31m-<?php[m
[31m-[m
[31m-/**[m
[31m- * @file[m
[31m- * Provide Views data and handlers for mediafield.[m
[31m- */[m
[31m-[m
[31m-/**[m
[31m- * Implements hook_field_views_data().[m
[31m- */[m
[31m-function mediafield_field_views_data($field) {[m
[31m-  $data = field_views_field_default_views_data($field);[m
[31m-  foreach ($data as $table_name => $table_data) {[m
[31m-    // Add the relationship only on the fid field.[m
[31m-    $data[$table_name][$field['field_name'] . '_fid']['relationship'] = array([m
[31m-      'handler' => 'views_handler_relationship',[m
[31m-      'base' => 'file_managed',[m
[31m-      'entity type' => 'file',[m
[31m-      'base field' => 'fid',[m
[31m-      'label' => t('file from !field_name', array('!field_name' => $field['field_name'])),[m
[31m-    );[m
[31m-  }[m
[31m-[m
[31m-  return $data;[m
[31m-}[m
[1mdiff --git a/sites/all/modules/contrib/media/templates/media-dialog-page.tpl.php b/sites/all/modules/contrib/media/templates/media-dialog-page.tpl.php[m
[1mdeleted file mode 100644[m
[1mindex f779c1d..0000000[m
[1m--- a/sites/all/modules/contrib/media/templates/media-dialog-page.tpl.php[m
[1m+++ /dev/null[m
[36m@@ -1,91 +0,0 @@[m
[31m-<?php[m
[31m-[m
[31m-/**[m
[31m- * @file[m
[31m- * Default theme implementation to display a single Drupal page.[m
[31m- *[m
[31m- * Available variables:[m
[31m- *[m
[31m- * General utility variables:[m
[31m- * - $base_path: The base URL path of the Drupal installation. At the very[m
[31m- *   least, this will always default to /.[m
[31m- * - $directory: The directory the template is located in, e.g. modules/system[m
[31m- *   or themes/garland.[m
[31m- * - $is_front: TRUE if the current page is the front page.[m
[31m- * - $logged_in: TRUE if the user is registered and signed in.[m
[31m- * - $is_admin: TRUE if the user has permission to access administration pages.[m
[31m- *[m
[31m- * Site identity:[m
[31m- * - $front_page: The URL of the front page. Use this instead of $base_path,[m
[31m- *   when linking to the front page. This includes the language domain or[m
[31m- *   prefix.[m
[31m- * - $logo: The path to the logo image, as defined in theme configuration.[m
[31m- * - $site_name: The name of the site, empty when display has been disabled[m
[31m- *   in theme settings.[m
[31m- * - $site_slogan: The slogan of the site, empty when display has been disabled[m
[31m- *   in theme settings.[m
[31m- *[m
[31m- * Navigation:[m
[31m- * - $main_menu (array): An array containing the Main menu links for the[m
[31m- *   site, if they have been configured.[m
[31m- * - $secondary_menu (array): An array containing the Secondary menu links for[m
[31m- *   the site, if they have been configured.[m
[31m- * - $breadcrumb: The breadcrumb trail for the current page.[m
[31m- *[m
[31m- * Page content (in order of occurrence in the default page.tpl.php):[m
[31m- * - $title_prefix (array): An array containing additional output populated by[m
[31m- *   modules, intended to be displayed in front of the main title tag that[m
[31m- *   appears in the template.[m
[31m- * - $title: The page title, for use in the actual HTML content.[m
[31m- * - $title_suffix (array): An array containing additional output populated by[m
[31m- *   modules, intended to be displayed after the main title tag that appears in[m
[31m- *   the template.[m
[31m- * - $messages: HTML for status and error messages. Should be displayed[m
[31m- *   prominently.[m
[31m- * - $tabs (array): Tabs linking to any sub-pages beneath the current page[m
[31m- *   (e.g., the view and edit tabs when displaying a node).[m
[31m- * - $action_links (array): Actions local to the page, such as 'Add menu' on the[m
[31m- *   menu administration interface.[m
[31m- * - $feed_icons: A string of all feed icons for the current page.[m
[31m- * - $node: The node object, if there is an automatically-loaded node[m
[31m- *   associated with the page, and the node ID is the second argument[m
[31m- *   in the page's path (e.g. node/12345 and node/12345/revisions, but not[m
[31m- *   comment/reply/12345).[m
[31m- *[m
[31m- * Regions:[m
[31m- * - $page['help']: Dynamic help text, mostly for admin pages.[m
[31m- * - $page['highlight']: Items for the highlighted content region.[m
[31m- * - $page['content']: The main content of the current page.[m
[31m- * - $page['sidebar_first']: Items for the first sidebar.[m
[31m- * - $page['sidebar_second']: Items for the second sidebar.[m
[31m- * - $page['header']: Items for the header region.[m
[31m- * - $page['footer']: Items for the footer region.[m
[31m- *[m
[31m- * @see template_preprocess()[m
[31m- * @see template_preprocess_page()[m
[31m- * @see template_process()[m
[31m- */[m
[31m-?>[m
[31m-[m
[31m-<?php if (isset($messages)) { print $messages; } ?>[m
[31m-<div id="media-browser-page-wrapper">[m
[31m-  <div id="media-browser-page">[m
[31m-    <div id="media-browser-tabset">[m
[31m-      <div id="branding" class="clearfix">[m
[31m-        <div>[m
[31m-          <h1><?php print render($page['content']['system_main']['title']); ?></h1>[m
[31m-        </div>[m
[31m-        <div id="media-tabs-wrapper">[m
[31m-          <?php print render($page['content']['system_main']['tabset']['tabs']); ?>[m
[31m-        </div>[m
[31m-      </div>[m
[31m-      <?php print render($page['content']['system_main']['tabset']['panes']); ?>[m
[31m-    </div> <!-- /#media-tabs-set -->[m
[31m-  </div> <!--  /#media-browser-page -->[m
[31m-</div> <!-- /#media-browser-page-wrapper -->[m
[31m-[m
[31m-<?php[m
[31m-  hide($page['content']['system_main']['tabset']);[m
[31m-  hide($page['content']['system_main']['title']);[m
[31m-  print render($page['content']);[m
[31m-?>[m
[1mdiff --git a/sites/all/modules/contrib/media/tests/media.test b/sites/all/modules/contrib/media/tests/media.test[m
[1mdeleted file mode 100644[m
[1mindex a7f98c9..0000000[m
[1m--- a/sites/all/modules/contrib/media/tests/media.test[m
[1m+++ /dev/null[m
[36m@@ -1,1190 +0,0 @@[m
[31m-<?php[m
[31m-[m
[31m-/**[m
[31m- * @file[m
[31m- * Tests for media.module.[m
[31m- */[m
[31m-[m
[31m-/**[m
[31m- * Provides methods specifically for testing Media module's field handling.[m
[31m- */[m
[31m-class MediaFileFieldTestCase extends DrupalWebTestCase {[m
[31m-  protected $admin_user;[m
[31m-[m
[31m-  function setUp() {[m
[31m-    // Since this is a base class for many test cases, support the same[m
[31m-    // flexibility that DrupalWebTestCase::setUp() has for the modules to be[m
[31m-    // passed in as either an array or a variable number of string arguments.[m
[31m-    $modules = func_get_args();[m
[31m-    if (isset($modules[0]) && is_array($modules[0])) {[m
[31m-      $modules = $modules[0];[m
[31m-    }[m
[31m-    $modules[] = 'media';[m
[31m-    $modules[] = 'media_module_test';[m
[31m-    parent::setUp($modules);[m
[31m-    $this->admin_user = $this->drupalCreateUser(array('access content', 'view files', 'view own files', 'access media browser', 'access administration pages', 'administer site configuration', 'administer users', 'administer permissions', 'administer content types', 'administer nodes', 'administer files', 'bypass node access', 'bypass file access', 'administer fields'));[m
[31m-    $this->drupalLogin($this->admin_user);[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Retrieves a sample file of the specified type.[m
[31m-   */[m
[31m-  function getTestFile($type_name, $size = NULL) {[m
[31m-    // Get a file to upload.[m
[31m-    $file = current($this->drupalGetTestFiles($type_name, $size));[m
[31m-[m
[31m-    // Add a filesize property to files as would be read by file_load().[m
[31m-    $file->filesize = filesize($file->uri);[m
[31m-[m
[31m-    return $file;[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Creates a new file entity.[m
[31m-   *[m
[31m-   * @param $settings[m
[31m-   *   A list of settings that will be added to the entity defaults.[m
[31m-   */[m
[31m-  protected function createFileEntity($settings = array()) {[m
[31m-    $file = new stdClass();[m
[31m-[m
[31m-    // Populate defaults array.[m
[31m-    $settings += array([m
[31m-      'filepath' => 'Файл для тестирования ' . $this->randomName(), // Prefix with non-latin characters to ensure that all file-related tests work with international filenames.[m
[31m-      'filemime' => 'text/plain',[m
[31m-      'uid' => 1,[m
[31m-      'timestamp' => REQUEST_TIME,[m
[31m-      'status' => FILE_STATUS_PERMANENT,[m
[31m-      'contents' => "file_put_contents() doesn't seem to appreciate empty strings so let's put in some data.",[m
[31m-      'scheme' => file_default_scheme(),[m
[31m-      'type' => NULL,[m
[31m-    );[m
[31m-[m
[31m-    $filepath = $settings['scheme'] . '://' . $settings['filepath'];[m
[31m-[m
[31m-    file_put_contents($filepath, $settings['contents']);[m
[31m-    $this->assertTrue(is_file($filepath), t('The test file exists on the disk.'), 'Create test file');[m
[31m-[m
[31m-    $file = new stdClass();[m
[31m-    $file->uri = $filepath;[m
[31m-    $file->filename = drupal_basename($file->uri);[m
[31m-    $file->filemime = $settings['filemime'];[m
[31m-    $file->uid = $settings['uid'];[m
[31m-    $file->timestamp = $settings['timestamp'];[m
[31m-    $file->filesize = filesize($file->uri);[m
[31m-    $file->status = $settings['status'];[m
[31m-    $file->type = $settings['type'];[m
[31m-[m
[31m-    // The file type is used as a bundle key, and therefore, must not be NULL.[m
[31m-    if (!isset($file->type)) {[m
[31m-      $file->type = FILE_TYPE_NONE;[m
[31m-    }[m
[31m-[m
[31m-    // If the file isn't already assigned a real type, determine what type should[m
[31m-    // be assigned to it.[m
[31m-    if ($file->type === FILE_TYPE_NONE) {[m
[31m-      $type = file_get_type($file);[m
[31m-      if (isset($type)) {[m
[31m-        $file->type = $type;[m
[31m-      }[m
[31m-    }[m
[31m-[m
[31m-    // Write the record directly rather than calling file_save() so we don't[m
[31m-    // invoke the hooks.[m
[31m-    $this->assertNotIdentical(drupal_write_record('file_managed', $file), FALSE, t('The file was added to the database.'), 'Create test file');[m
[31m-[m
[31m-    return $file;[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Creates a new file field.[m
[31m-   *[m
[31m-   * @param $name[m
[31m-   *   The name of the new field (all lowercase), exclude the "field_" prefix.[m
[31m-   * @param $type_name[m
[31m-   *   The node type that this field will be added to.[m
[31m-   * @param $field_settings[m
[31m-   *   A list of field settings that will be added to the defaults.[m
[31m-   * @param $instance_settings[m
[31m-   *   A list of instance settings that will be added to the instance defaults.[m
[31m-   * @param $widget_settings[m
[31m-   *   A list of widget settings that will be added to the widget defaults.[m
[31m-   */[m
[31m-  function createFileField($name, $type_name, $field_settings = array(), $instance_settings = array(), $widget_settings = array()) {[m
[31m-    $field = array([m
[31m-      'field_name' => $name,[m
[31m-      'type' => 'file',[m
[31m-      'settings' => array(),[m
[31m-      'cardinality' => !empty($field_settings['cardinality']) ? $field_settings['cardinality'] : 1,[m
[31m-    );[m
[31m-    $field['settings'] = array_merge($field['settings'], $field_settings);[m
[31m-    field_create_field($field);[m
[31m-[m
[31m-    $this->attachFileField($name, 'node', $type_name, $instance_settings, $widget_settings);[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Attaches a file field to an entity.[m
[31m-   *[m
[31m-   * @param $name[m
[31m-   *   The name of the new field (all lowercase), exclude the "field_" prefix.[m
[31m-   * @param $entity_type[m
[31m-   *   The entity type this field will be added to.[m
[31m-   * @param $bundle[m
[31m-   *   The bundle this field will be added to.[m
[31m-   * @param $field_settings[m
[31m-   *   A list of field settings that will be added to the defaults.[m
[31m-   * @param $instance_settings[m
[31m-   *   A list of instance settings that will be added to the instance defaults.[m
[31m-   * @param $widget_settings[m
[31m-   *   A list of widget settings that will be added to the widget defaults.[m
[31m-   */[m
[31m-  function attachFileField($name, $entity_type, $bundle, $instance_settings = array(), $widget_settings = array()) {[m
[31m-    $instance = array([m
[31m-      'field_name' => $name,[m
[31m-      'label' => $name,[m
[31m-      'entity_type' => $entity_type,[m
[31m-      'bundle' => $bundle,[m
[31m-      'required' => !empty($instance_settings['required']),[m
[31m-      'settings' => array(),[m
[31m-      'widget' => array([m
[31m-        'type' => 'media_generic',[m
[31m-        'settings' => array(),[m
[31m-      ),[m
[31m-    );[m
[31m-    $instance['settings'] = array_merge($instance['settings'], $instance_settings);[m
[31m-    $instance['widget']['settings'] = array_merge($instance['widget']['settings'], $widget_settings);[m
[31m-    field_create_instance($instance);[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Attaches a file to a node.[m
[31m-   */[m
[31m-  function attachNodeFile($file, $field_name, $nid_or_type, $new_revision = TRUE, $extras = array()) {[m
[31m-    $langcode = LANGUAGE_NONE;[m
[31m-    $edit = array([m
[31m-      "title" => $this->randomName(),[m
[31m-      'revision' => (string) (int) $new_revision,[m
[31m-    );[m
[31m-[m
[31m-    if (is_numeric($nid_or_type)) {[m
[31m-      $nid = $nid_or_type;[m
[31m-    }[m
[31m-    else {[m
[31m-      // Add a new node.[m
[31m-      $extras['type'] = $nid_or_type;[m
[31m-      $node = $this->drupalCreateNode($extras);[m
[31m-      $nid = $node->nid;[m
[31m-      // Save at least one revision to better simulate a real site.[m
[31m-      $this->drupalCreateNode(get_object_vars($node));[m
[31m-      $node = node_load($nid, NULL, TRUE);[m
[31m-      $this->assertNotEqual($nid, $node->vid, 'Node revision exists.');[m
[31m-    }[m
[31m-[m
[31m-    // Attach a file to the node.[m
[31m-    $edit[$field_name . '[' . $langcode . '][0][fid]'] = $file->fid;[m
[31m-    $this->drupalPost("node/$nid/edit", $edit, t('Save'));[m
[31m-[m
[31m-    return $nid;[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Replaces a file within a node.[m
[31m-   */[m
[31m-  function replaceNodeFile($file, $field_name, $nid, $new_revision = TRUE) {[m
[31m-    $edit = array([m
[31m-      $field_name . '[' . LANGUAGE_NONE . '][0][fid]' => $file->fid,[m
[31m-      'revision' => (string) (int) $new_revision,[m
[31m-    );[m
[31m-[m
[31m-    $this->drupalPost('node/' . $nid . '/edit', array(), t('Remove'));[m
[31m-    $this->drupalPost(NULL, $edit, t('Save'));[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Asserts that a file exists physically on disk.[m
[31m-   */[m
[31m-  function assertFileExists($file, $message = NULL) {[m
[31m-    $message = isset($message) ? $message : format_string('File %file exists on the disk.', array('%file' => $file->uri));[m
[31m-    $this->assertTrue(is_file($file->uri), $message);[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Asserts that a file exists in the database.[m
[31m-   */[m
[31m-  function assertFileEntryExists($file, $message = NULL) {[m
[31m-    entity_get_controller('file')->resetCache();[m
[31m-    $db_file = file_load($file->fid);[m
[31m-    $message = isset($message) ? $message : format_string('File %file exists in database at the correct path.', array('%file' => $file->uri));[m
[31m-    $this->assertEqual($db_file->uri, $file->uri, $message);[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Asserts that a file does not exist on disk.[m
[31m-   */[m
[31m-  function assertFileNotExists($file, $message = NULL) {[m
[31m-    $message = isset($message) ? $message : format_string('File %file exists on the disk.', array('%file' => $file->uri));[m
[31m-    $this->assertFalse(is_file($file->uri), $message);[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Asserts that a file does not exist in the database.[m
[31m-   */[m
[31m-  function assertFileEntryNotExists($file, $message) {[m
[31m-    entity_get_controller('file')->resetCache();[m
[31m-    $message = isset($message) ? $message : format_string('File %file exists in database at the correct path.', array('%file' => $file->uri));[m
[31m-    $this->assertFalse(file_load($file->fid), $message);[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Asserts that a file's status is set to permanent in the database.[m
[31m-   */[m
[31m-  function assertFileIsPermanent($file, $message = NULL) {[m
[31m-    $message = isset($message) ? $message : format_string('File %file is permanent.', array('%file' => $file->uri));[m
[31m-    $this->assertTrue($file->status == FILE_STATUS_PERMANENT, $message);[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Tests the 'media' element type.[m
[31m- *[m
[31m- * @todo Create a MediaFileTestCase base class and move MediaFileFieldTestCase[m
[31m- *   methods that aren't related to fields into it.[m
[31m- */[m
[31m-class MediaElementTestCase extends MediaFileFieldTestCase {[m
[31m-  public static function getInfo() {[m
[31m-    return array([m
[31m-      'name' => 'Media element test',[m
[31m-      'description' => 'Tests the media element type.',[m
[31m-      'group' => 'Media',[m
[31m-    );[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Tests the media element type.[m
[31m-   */[m
[31m-  function testMedia() {[m
[31m-    // Check that $element['#size'] is passed to the child upload element.[m
[31m-    $this->drupalGet('media/test');[m
[31m-    $this->assertFieldByXpath('//input[@name="media[nested_media]" and @size="13"]', NULL, 'The custom #size attribute is passed to the child upload element.');[m
[31m-[m
[31m-    // Perform the tests with all permutations of $form['#tree'] and[m
[31m-    // $element['#extended'].[m
[31m-    foreach (array(0, 1) as $tree) {[m
[31m-      foreach (array(0, 1) as $extended) {[m
[31m-        $test_file = $this->getTestFile('text');[m
[31m-        $test_file->uid = $this->admin_user->uid;[m
[31m-        $test_file = file_save($test_file);[m
[31m-        $path = 'media/test/' . $tree . '/' . $extended;[m
[31m-        $input_base_name = $tree ? 'nested_media' : 'media';[m
[31m-[m
[31m-        // Submit without a file.[m
[31m-        $this->drupalPost($path, array(), t('Save'));[m
[31m-        $this->assertRaw(t('The file id is %fid.', array('%fid' => 0)), 'Submitted without a file.');[m
[31m-[m
[31m-        // Submit a new file, without using the Attach button.[m
[31m-        $edit = array('media[' . $input_base_name . ']' => $test_file->fid);[m
[31m-        $this->drupalPost($path, $edit, t('Save'));[m
[31m-        $this->assertRaw(t('The file id is %fid.', array('%fid' => $test_file->fid)), 'Submit handler has correct file info.');[m
[31m-[m
[31m-        // Now, test the Attach and Remove buttons, with and without Ajax.[m
[31m-        foreach (array(FALSE) as $ajax) {[m
[31m-          // Attach, then Submit.[m
[31m-          $this->drupalGet($path);[m
[31m-          $edit = array('media[' . $input_base_name . ']' => $test_file->fid);[m
[31m-          if ($ajax) {[m
[31m-            $this->drupalPostAJAX(NULL, $edit, $input_base_name . '_attach_button');[m
[31m-          }[m
[31m-          else {[m
[31m-            $this->drupalPost(NULL, $edit, t('Attach'));[m
[31m-          }[m
[31m-          $this->drupalPost(NULL, array(), t('Save'));[m
[31m-          $this->assertRaw(t('The file id is %fid.', array('%fid' => $test_file->fid)), 'Submit handler has correct file info.');[m
[31m-[m
[31m-          // Attach, then Remove, then Submit.[m
[31m-          $this->drupalGet($path);[m
[31m-          $edit = array('media[' . $input_base_name . ']' => $test_file->fid);[m
[31m-          if ($ajax) {[m
[31m-            $this->drupalPostAJAX(NULL, $edit, $input_base_name . '_attach_button');[m
[31m-            $this->drupalPostAJAX(NULL, array(), $input_base_name . '_remove_button');[m
[31m-          }[m
[31m-          else {[m
[31m-            $this->drupalPost(NULL, $edit, t('Attach'));[m
[31m-            $this->drupalPost(NULL, array(), t('Remove'));[m
[31m-          }[m
[31m-          $this->drupalPost(NULL, array(), t('Save'));[m
[31m-          $this->assertRaw(t('The file id is %fid.', array('%fid' => 0)), 'Submission after file attachment and removal was successful.');[m
[31m-        }[m
[31m-      }[m
[31m-    }[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Test media file administration page functionality.[m
[31m- */[m
[31m-class MediaAdminTestCase extends MediaFileFieldTestCase {[m
[31m-  public static function getInfo() {[m
[31m-    return array([m
[31m-      'name' => 'Media file administration',[m
[31m-      'description' => 'Test media file administration page functionality.',[m
[31m-      'group' => 'Media',[m
[31m-    );[m
[31m-  }[m
[31m-[m
[31m-  function setUp() {[m
[31m-    parent::setUp();[m
[31m-    // Remove the "view files" permission which is set[m
[31m-    // by default for all users so we can test this permission[m
[31m-    // correctly.[m
[31m-    $roles = user_roles();[m
[31m-    foreach ($roles as $rid => $role) {[m
[31m-      user_role_revoke_permissions($rid, array('view files'));[m
[31m-    }[m
[31m-[m
[31m-    $this->base_user_1 = $this->drupalCreateUser(array('administer files'));[m
[31m-    $this->base_user_2 = $this->drupalCreateUser(array('administer files', 'view own private files'));[m
[31m-    $this->base_user_3 = $this->drupalCreateUser(array('administer files', 'view private files'));[m
[31m-    $this->base_user_4 = $this->drupalCreateUser(array('administer files', 'edit any document files', 'delete any document files', 'edit any image files', 'delete any image files'));[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Tests that the table sorting works on the files admin pages.[m
[31m-   */[m
[31m-  function testFilesAdminSort() {[m
[31m-    $i = 0;[m
[31m-    foreach (array('dd', 'aa', 'DD', 'bb', 'cc', 'CC', 'AA', 'BB') as $prefix) {[m
[31m-      $this->createFileEntity(array('filepath' => $prefix . $this->randomName(6), 'timestamp' => $i));[m
[31m-      $i++;[m
[31m-    }[m
[31m-[m
[31m-    // Test that the default sort by file_managed.timestamp DESC actually fires properly.[m
[31m-    $files_query = db_select('file_managed', 'fm')[m
[31m-      ->fields('fm', array('fid'))[m
[31m-      ->orderBy('timestamp', 'DESC')[m
[31m-      ->execute()[m
[31m-      ->fetchCol();[m
[31m-[m
[31m-    $files_form = array();[m
[31m-    $this->drupalGet('admin/content/file/thumbnails');[m
[31m-    foreach ($this->xpath('//ul[@class="media-list-thumbnails"]/li/div[@data-fid]/@data-fid') as $input) {[m
[31m-      $files_form[] = $input;[m
[31m-    }[m
[31m-    $this->assertEqual($files_query, $files_form, 'Files are sorted in the form according to the default query.');[m
[31m-[m
[31m-    // Compare the rendered HTML node list to a query for the files ordered by[m
[31m-    // filename to account for possible database-dependent sort order.[m
[31m-    $files_query = db_select('file_managed', 'fm')[m
[31m-      ->fields('fm', array('fid'))[m
[31m-      ->orderBy('filename')[m
[31m-      ->execute()[m
[31m-      ->fetchCol();[m
[31m-[m
[31m-    $files_form = array();[m
[31m-    $this->drupalGet('admin/content/file/thumbnails', array('query' => array('sort' => 'asc', 'order' => 'Title')));[m
[31m-    foreach ($this->xpath('//ul[@class="media-list-thumbnails"]/li/div[@data-fid]/@data-fid') as $input) {[m
[31m-      $files_form[] = $input;[m
[31m-    }[m
[31m-    $this->assertEqual($files_query, $files_form, 'Files are sorted in the form the same as they are in the query.');[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Tests files overview with different user permissions.[m
[31m-   */[m
[31m-  function testFilesAdminPages() {[m
[31m-    $files['public_image'] = $this->createFileEntity(array('scheme' => 'public', 'uid' => $this->base_user_1->uid, 'type' => 'image'));[m
[31m-    $files['public_document'] = $this->createFileEntity(array('scheme' => 'public', 'uid' => $this->base_user_2->uid, 'type' => 'document'));[m
[31m-    $files['private_image'] = $this->createFileEntity(array('scheme' => 'private', 'uid' => $this->base_user_1->uid, 'type' => 'image'));[m
[31m-    $files['private_document'] = $this->createFileEntity(array('scheme' => 'private', 'uid' => $this->base_user_2->uid, 'type' => 'document'));[m
[31m-[m
[31m-    // Verify view and edit links for any file.[m
[31m-    $this->drupalGet('admin/content/file/thumbnails');[m
[31m-    $this->assertResponse(200);[m
[31m-    foreach ($files as $file) {[m
[31m-      $this->assertLinkByHref('file/' . $file->fid);[m
[31m-      $this->assertLinkByHref('file/' . $file->fid . '/edit');[m
[31m-      // Verify tableselect.[m
[31m-      $this->assertFieldByName('files[' . $file->fid . ']', '', t('Tableselect found.'));[m
[31m-    }[m
[31m-[m
[31m-    // Verify no operation links are displayed for regular users.[m
[31m-    $this->drupalLogout();[m
[31m-    $this->drupalLogin($this->base_user_1);[m
[31m-    $this->drupalGet('admin/content/file/thumbnails');[m
[31m-    $this->assertResponse(200);[m
[31m-    $this->assertLinkByHref('file/' . $files['public_image']->fid);[m
[31m-    $this->assertLinkByHref('file/' . $files['public_document']->fid);[m
[31m-    $this->assertNoLinkByHref('file/' . $files['public_image']->fid . '/edit');[m
[31m-    $this->assertNoLinkByHref('file/' . $files['public_document']->fid . '/edit');[m
[31m-[m
[31m-    // Verify no tableselect.[m
[31m-    $this->assertNoFieldByName('files[' . $files['public_image']->fid . ']', '', t('No tableselect found.'));[m
[31m-[m
[31m-    // Verify private file is displayed with permission.[m
[31m-    $this->drupalLogout();[m
[31m-    $this->drupalLogin($this->base_user_2);[m
[31m-    $this->drupalGet('admin/content/file/thumbnails');[m
[31m-    $this->assertResponse(200);[m
[31m-    $this->assertLinkByHref('file/' . $files['private_document']->fid);[m
[31m-    // Verify no operation links are displayed.[m
[31m-    $this->assertNoLinkByHref('file/' . $files['private_document']->fid . '/edit');[m
[31m-[m
[31m-    // Verify user cannot see private file of other users.[m
[31m-    $this->assertNoLinkByHref('file/' . $files['private_image']->fid);[m
[31m-    $this->assertNoLinkByHref('file/' . $files['private_image']->fid . '/edit');[m
[31m-[m
[31m-    // Verify no tableselect.[m
[31m-    $this->assertNoFieldByName('files[' . $files['private_document']->fid . ']', '', t('No tableselect found.'));[m
[31m-[m
[31m-    // Verify private file is displayed with permission.[m
[31m-    $this->drupalLogout();[m
[31m-    $this->drupalLogin($this->base_user_3);[m
[31m-    $this->drupalGet('admin/content/file/thumbnails');[m
[31m-    $this->assertResponse(200);[m
[31m-[m
[31m-    // Verify user can see private file of other users.[m
[31m-    $this->assertLinkByHref('file/' . $files['private_document']->fid);[m
[31m-    $this->assertLinkByHref('file/' . $files['private_image']->fid);[m
[31m-[m
[31m-    // Verify operation links are displayed for users with appropriate permission.[m
[31m-    $this->drupalLogout();[m
[31m-    $this->drupalLogin($this->base_user_4);[m
[31m-    $this->drupalGet('admin/content/file/thumbnails');[m
[31m-    $this->assertResponse(200);[m
[31m-    foreach ($files as $file) {[m
[31m-      $this->assertLinkByHref('file/' . $file->fid);[m
[31m-      $this->assertLinkByHref('file/' . $file->fid . '/edit');[m
[31m-    }[m
[31m-[m
[31m-    // Verify file access can be bypassed.[m
[31m-    $this->drupalLogout();[m
[31m-    $this->drupalLogin($this->admin_user);[m
[31m-    $this->drupalGet('admin/content/file/thumbnails');[m
[31m-    $this->assertResponse(200);[m
[31m-    foreach ($files as $file) {[m
[31m-      $this->assertLinkByHref('file/' . $file->fid);[m
[31m-      $this->assertLinkByHref('file/' . $file->fid . '/edit');[m
[31m-    }[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Tests the media hooks.[m
[31m- */[m
[31m-class MediaHooksTestCase extends MediaFileFieldTestCase {[m
[31m-  public static function getInfo() {[m
[31m-    return array([m
[31m-      'name' => 'Media hooks test',[m
[31m-      'description' => 'Tests the Media hooks.',[m
[31m-      'group' => 'Media',[m
[31m-    );[m
[31m-  }[m
[31m-[m
[31m-  function setUp() {[m
[31m-    parent::setUp();[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Tests that the media browser hooks.[m
[31m-   */[m
[31m-  function testMediaBrowserHooks() {[m
[31m-    // Enable media_module_test.module's hook_media_browser_plugin_info()[m
[31m-    // implementation and ensure it is working as designed.[m
[31m-    variable_set('media_module_test_media_browser_plugin_info', TRUE);[m
[31m-[m
[31m-    $this->drupalGet('media/browser');[m
[31m-    $this->assertRaw(t('Media module test'), 'Custom browser plugin found.');[m
[31m-[m
[31m-    // Enable media_module_test.module's hook_media_browser_plugin_info_alter()[m
[31m-    // implementation and ensure it is working as designed.[m
[31m-    variable_set('media_module_test_media_browser_plugin_info_alter', TRUE);[m
[31m-[m
[31m-    $this->drupalGet('media/browser');[m
[31m-    $this->assertRaw(t('Altered plugin title'), 'Custom browser plugin was successfully altered.');[m
[31m-[m
[31m-    // Enable media_module_test.module's hook_media_browser_plugins_alter()[m
[31m-    // implementation and ensure it is working as designed.[m
[31m-    variable_set('media_module_test_media_browser_plugins_alter', TRUE);[m
[31m-[m
[31m-    $this->drupalGet('media/browser');[m
[31m-    $this->assertRaw(t('Altered browser plugin output.'), 'Custom browser plugin was successfully altered before being rendered.');[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Tests the media browser 'Library' tab.[m
[31m- */[m
[31m-class MediaBrowserLibraryTestCase extends MediaFileFieldTestCase {[m
[31m-  public static function getInfo() {[m
[31m-    return array([m
[31m-      'name' => 'Media browser library test',[m
[31m-      'description' => 'Tests the media browser library tab.',[m
[31m-      'group' => 'Media',[m
[31m-    );[m
[31m-  }[m
[31m-[m
[31m-  function setUp() {[m
[31m-    parent::setUp();[m
[31m-    $this->base_user_1 = $this->drupalCreateUser(array('access media browser', 'create files', 'administer files'));[m
[31m-    $this->base_user_2 = $this->drupalCreateUser(array('access media browser', 'create files', 'administer files', 'view own private files'));[m
[31m-    $this->base_user_3 = $this->drupalCreateUser(array('access media browser', 'create files', 'administer files', 'view private files'));[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Tests that the views sorting works on the media browser 'Library' tab.[m
[31m-   */[m
[31m-  function testFilesBrowserSort() {[m
[31m-    // Load only the 'Library' tab of the media browser.[m
[31m-    $options = array([m
[31m-      'query' => array([m
[31m-        'enabledPlugins' => array([m
[31m-          'media_default--media_browser_1' => 'media_default--media_browser_1',[m
[31m-        ),[m
[31m-      ),[m
[31m-    );[m
[31m-[m
[31m-    $i = 0;[m
[31m-    foreach (array('dd', 'aa', 'DD', 'bb', 'cc', 'CC', 'AA', 'BB') as $prefix) {[m
[31m-      $this->createFileEntity(array('filepath' => $prefix . $this->randomName(6), 'timestamp' => $i));[m
[31m-      $i++;[m
[31m-    }[m
[31m-[m
[31m-    // Test that the default sort by file_managed.timestamp DESC actually fires properly.[m
[31m-    $files_query = db_select('file_managed', 'fm')[m
[31m-      ->fields('fm', array('fid'))[m
[31m-      ->orderBy('timestamp', 'DESC')[m
[31m-      ->execute()[m
[31m-      ->fetchCol();[m
[31m-[m
[31m-    $files_form = array();[m
[31m-    $this->drupalGet('media/browser', $options);[m
[31m-    foreach ($this->xpath('//ul[@class="media-list-thumbnails"]/li/div[@data-fid]/@data-fid') as $input) {[m
[31m-      $files_form[] = $input;[m
[31m-    }[m
[31m-    $this->assertEqual($files_query, $files_form, 'Files are sorted in the form according to the default query.');[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Tests media browser 'Library' tab with different user permissions.[m
[31m-   */[m
[31m-  function testFilesBrowserLibrary() {[m
[31m-    // Load only the 'Library' tab of the media browser.[m
[31m-    $options = array([m
[31m-      'query' => array([m
[31m-        'enabledPlugins' => array([m
[31m-          'media_default--media_browser_1' => 'media_default--media_browser_1',[m
[31m-        ),[m
[31m-      ),[m
[31m-    );[m
[31m-[m
[31m-    $files['public_image'] = $this->createFileEntity(array('scheme' => 'public', 'uid' => $this->base_user_1->uid, 'type' => 'image'));[m
[31m-    $files['public_document'] = $this->createFileEntity(array('scheme' => 'public', 'uid' => $this->base_user_2->uid, 'type' => 'document'));[m
[31m-    $files['private_image'] = $this->createFileEntity(array('scheme' => 'private', 'uid' => $this->base_user_1->uid, 'type' => 'image'));[m
[31m-    $files['private_document'] = $this->createFileEntity(array('scheme' => 'private', 'uid' => $this->base_user_2->uid, 'type' => 'document'));[m
[31m-[m
[31m-    // Verify all files are displayed for administrators.[m
[31m-    $this->drupalGet('media/browser', $options);[m
[31m-    $this->assertResponse(200);[m
[31m-    foreach ($files as $file) {[m
[31m-      $xpath = $this->buildXPathQuery('//ul[@class="media-list-thumbnails"]/li/div[@data-fid=:fid]/@data-fid', array([m
[31m-        ':fid' => $file->fid,[m
[31m-      ));[m
[31m-      $this->assertFieldByXPath($xpath, TRUE, format_string('File with file ID %fid found.', array('%fid' => $file->fid)));[m
[31m-    }[m
[31m-[m
[31m-    // Verify public files are displayed.[m
[31m-    $this->drupalLogout();[m
[31m-    $this->drupalLogin($this->base_user_1);[m
[31m-    $this->drupalGet('media/browser', $options);[m
[31m-    $this->assertResponse(200);[m
[31m-    $xpath = $this->buildXPathQuery('//ul[@class="media-list-thumbnails"]/li/div[@data-fid=:fid]/@data-fid', array([m
[31m-      ':fid' => $files['public_image']->fid,[m
[31m-    ));[m
[31m-    $this->assertFieldByXPath($xpath, TRUE, format_string('File with file ID %fid found.', array('%fid' => $files['public_image']->fid)));[m
[31m-    $xpath = $this->buildXPathQuery('//ul[@class="media-list-thumbnails"]/li/div[@data-fid=:fid]/@data-fid', array([m
[31m-      ':fid' => $files['public_document']->fid,[m
[31m-    ));[m
[31m-    $this->assertFieldByXPath($xpath, TRUE, format_string('File with file ID %fid found.', array('%fid' => $files['public_document']->fid)));[m
[31m-[m
[31m-    // Verify private file is displayed with permission.[m
[31m-    $this->drupalLogout();[m
[31m-    $this->drupalLogin($this->base_user_2);[m
[31m-    $this->drupalGet('media/browser', $options);[m
[31m-    $this->assertResponse(200);[m
[31m-    $xpath = $this->buildXPathQuery('//ul[@class="media-list-thumbnails"]/li/div[@data-fid=:fid]/@data-fid', array([m
[31m-      ':fid' => $files['private_document']->fid,[m
[31m-    ));[m
[31m-    $this->assertFieldByXPath($xpath, TRUE, format_string('File with file ID %fid found.', array('%fid' => $files['private_document']->fid)));[m
[31m-[m
[31m-    // Verify user cannot see private file of other users.[m
[31m-    $xpath = $this->buildXPathQuery('//ul[@class="media-list-thumbnails"]/li/div[@data-fid=:fid]/@data-fid', array([m
[31m-      ':fid' => $files['private_image']->fid,[m
[31m-    ));[m
[31m-    $this->assertNoFieldByXPath($xpath, TRUE, format_string('File with file ID %fid not found.', array('%fid' => $files['private_image']->fid)));[m
[31m-[m
[31m-    // Verify private file is displayed with permission.[m
[31m-    $this->drupalLogout();[m
[31m-    $this->drupalLogin($this->base_user_3);[m
[31m-    $this->drupalGet('media/browser', $options);[m
[31m-    $this->assertResponse(200);[m
[31m-[m
[31m-    // Verify user can see private file of other users.[m
[31m-    $xpath = $this->buildXPathQuery('//ul[@class="media-list-thumbnails"]/li/div[@data-fid=:fid]/@data-fid', array([m
[31m-      ':fid' => $files['private_document']->fid,[m
[31m-    ));[m
[31m-    $this->assertFieldByXPath($xpath, TRUE, format_string('File with file ID %fid found.', array('%fid' => $files['private_document']->fid)));[m
[31m-    $xpath = $this->buildXPathQuery('//ul[@class="media-list-thumbnails"]/li/div[@data-fid=:fid]/@data-fid', array([m
[31m-      ':fid' => $files['private_image']->fid,[m
[31m-    ));[m
[31m-    $this->assertFieldByXPath($xpath, TRUE, format_string('File with file ID %fid found.', array('%fid' => $files['private_image']->fid)));[m
[31m-[m
[31m-    // Verify file access can be bypassed.[m
[31m-    $this->drupalLogout();[m
[31m-    $this->drupalLogin($this->admin_user);[m
[31m-    $this->drupalGet('media/browser', $options);[m
[31m-    $this->assertResponse(200);[m
[31m-    foreach ($files as $file) {[m
[31m-      $xpath = $this->buildXPathQuery('//ul[@class="media-list-thumbnails"]/li/div[@data-fid=:fid]/@data-fid', array([m
[31m-        ':fid' => $file->fid,[m
[31m-      ));[m
[31m-      $this->assertFieldByXPath($xpath, TRUE, format_string('File with file ID %fid found.', array('%fid' => $file->fid)));[m
[31m-    }[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Tests the media browser settings.[m
[31m- */[m
[31m-class MediaBrowserSettingsTestCase extends MediaFileFieldTestCase {[m
[31m-  public static function getInfo() {[m
[31m-    return array([m
[31m-      'name' => 'Media browser settings test',[m
[31m-      'description' => 'Tests the media browser settings.',[m
[31m-      'group' => 'Media',[m
[31m-    );[m
[31m-  }[m
[31m-[m
[31m-  function setUp() {[m
[31m-    parent::setUp('file_test');[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Tests the media browser settings.[m
[31m-   */[m
[31m-  function testBrowserSettings() {[m
[31m-    $settings = array([m
[31m-      'scheme' => array('public', 'private'),[m
[31m-      'type' => array('image', 'document'),[m
[31m-      'extension' => array('jpg', 'txt'),[m
[31m-    );[m
[31m-[m
[31m-    // Perform the tests with unique permutations of $scheme, $type and[m
[31m-    // $extension.[m
[31m-    foreach ($settings['scheme'] as $scheme) {[m
[31m-      foreach ($settings['type'] as $type) {[m
[31m-        foreach ($settings['extension'] as $extension) {[m
[31m-          $file = $this->createFileEntity(array('scheme' => $scheme, 'uid' => $this->admin_user->uid, 'type' => $type, 'filemime' => media_get_extension_mimetype($extension)));[m
[31m-[m
[31m-          $options = array([m
[31m-            'query' => array([m
[31m-              'enabledPlugins' => array([m
[31m-                'media_default--media_browser_1' => 'media_default--media_browser_1',[m
[31m-              ),[m
[31m-              'schemes' => array($scheme),[m
[31m-              'types' => array($type),[m
[31m-              'file_extensions' => $extension,[m
[31m-            ),[m
[31m-          );[m
[31m-[m
[31m-          // Verify that the file is displayed.[m
[31m-          $this->drupalGet('media/browser', $options);[m
[31m-          $this->assertResponse(200);[m
[31m-          $xpath = $this->buildXPathQuery('//ul[@class="media-list-thumbnails"]/li/div[@data-fid=:fid]/@data-fid', array([m
[31m-            ':fid' => $file->fid,[m
[31m-          ));[m
[31m-          $this->assertFieldByXPath($xpath, TRUE, format_string('File with file ID %fid found.', array('%fid' => $file->fid)));[m
[31m-[m
[31m-          // Verify that no other files are also displayed.[m
[31m-          $files = $this->xpath('//ul[@class="media-list-thumbnails"]/li/div[@data-fid]');[m
[31m-          $this->assertEqual(count($files), 1, 'There is only one file that matches the current browser configuration.');[m
[31m-        }[m
[31m-      }[m
[31m-    }[m
[31m-[m
[31m-    // Perform the tests with none and all of the restrictions.[m
[31m-    foreach (array('none', 'all') as $restrictions) {[m
[31m-      $options = array([m
[31m-        'query' => array([m
[31m-          'enabledPlugins' => array([m
[31m-            'media_default--media_browser_1' => 'media_default--media_browser_1',[m
[31m-          ),[m
[31m-        ),[m
[31m-      );[m
[31m-[m
[31m-      switch ($restrictions) {[m
[31m-        case 'none':[m
[31m-          $options['query']['schemes'] = array();[m
[31m-          $options['query']['types'] = array();[m
[31m-          $options['query']['file_extensions'] = array();[m
[31m-          break;[m
[31m-        case 'all':[m
[31m-          $options['query']['schemes'] = $settings['scheme'];[m
[31m-          $options['query']['types'] = $settings['type'];[m
[31m-          $options['query']['file_extensions'] = implode(' ', $settings['extension']);[m
[31m-          break;[m
[31m-      }[m
[31m-[m
[31m-      // Verify that all of the files are displayed.[m
[31m-      $this->drupalGet('media/browser', $options);[m
[31m-      $this->assertResponse(200);[m
[31m-      $files = $this->xpath('//ul[@class="media-list-thumbnails"]/li/div[@data-fid]');[m
[31m-      $this->assertEqual(count($files), 8, format_string('All of the files were displayed when %restrictions of the restrictions were enabled.', array('%restrictions' => $restrictions)));[m
[31m-    }[m
[31m-[m
[31m-    // Verify that extension restrictions do not affect remote files.[m
[31m-    $scheme = 'dummy-remote';[m
[31m-    $type = 'video';[m
[31m-    $extension = 'mp4';[m
[31m-[m
[31m-    $file = $this->createFileEntity(array('scheme' => $scheme, 'uid' => $this->admin_user->uid, 'type' => $type, 'filemime' => media_get_extension_mimetype($extension)));[m
[31m-[m
[31m-    $options = array([m
[31m-      'query' => array([m
[31m-        'enabledPlugins' => array([m
[31m-          'media_default--media_browser_1' => 'media_default--media_browser_1',[m
[31m-        ),[m
[31m-        'schemes' => array($scheme, 'public'), // Include a local stream wrapper in order to trigger extension restrictions.[m
[31m-        'types' => array($type),[m
[31m-        'file_extensions' => 'fake', // Use an invalid file extension to ensure that it does not affect restrictions.[m
[31m-      ),[m
[31m-    );[m
[31m-[m
[31m-    // Verify that the file is displayed.[m
[31m-    $this->drupalGet('media/browser', $options);[m
[31m-    $this->assertResponse(200);[m
[31m-    $xpath = $this->buildXPathQuery('//ul[@class="media-list-thumbnails"]/li/div[@data-fid=:fid]/@data-fid', array([m
[31m-      ':fid' => $file->fid,[m
[31m-    ));[m
[31m-    $this->assertFieldByXPath($xpath, TRUE, format_string('File with file ID %fid found.', array('%fid' => $file->fid)));[m
[31m-[m
[31m-    // Verify that no other files are also displayed.[m
[31m-    $files = $this->xpath('//ul[@class="media-list-thumbnails"]/li/div[@data-fid]');[m
[31m-    $this->assertEqual(count($files), 1, 'There is only one file that matches the current browser configuration.');[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Tests the media browser 'My files' tab.[m
[31m- */[m
[31m-class MediaBrowserMyFilesTestCase extends MediaFileFieldTestCase {[m
[31m-  public static function getInfo() {[m
[31m-    return array([m
[31m-      'name' => 'Media browser my files test',[m
[31m-      'description' => 'Tests the media browser my files tab.',[m
[31m-      'group' => 'Media',[m
[31m-    );[m
[31m-  }[m
[31m-[m
[31m-  function setUp() {[m
[31m-    parent::setUp();[m
[31m-    $this->base_user_1 = $this->drupalCreateUser(array('access media browser', 'create files', 'administer files'));[m
[31m-    $this->base_user_2 = $this->drupalCreateUser(array('access media browser', 'create files', 'administer files', 'view own files'));[m
[31m-    $this->base_user_3 = $this->drupalCreateUser(array('access media browser', 'create files', 'administer files', 'view own files', 'view own private files'));[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Tests media browser 'My files' tab with different user permissions.[m
[31m-   */[m
[31m-  function testFilesBrowserMyFiles() {[m
[31m-    // Load only the 'My files' tab of the media browser.[m
[31m-    $options = array([m
[31m-      'query' => array([m
[31m-        'enabledPlugins' => array([m
[31m-          'media_default--media_browser_my_files' => 'media_default--media_browser_my_files',[m
[31m-        ),[m
[31m-      ),[m
[31m-    );[m
[31m-[m
[31m-    $files['public_image'] = $this->createFileEntity(array('scheme' => 'public', 'uid' => $this->base_user_2->uid, 'type' => 'image'));[m
[31m-    $files['public_document'] = $this->createFileEntity(array('scheme' => 'public', 'uid' => $this->base_user_3->uid, 'type' => 'document'));[m
[31m-    $files['private_image'] = $this->createFileEntity(array('scheme' => 'private', 'uid' => $this->base_user_2->uid, 'type' => 'image'));[m
[31m-    $files['private_document'] = $this->createFileEntity(array('scheme' => 'private', 'uid' => $this->base_user_3->uid, 'type' => 'document'));[m
[31m-[m
[31m-    // Verify administrators do not have any special access to files.[m
[31m-    $this->drupalGet('media/browser', $options);[m
[31m-    $this->assertResponse(200);[m
[31m-    foreach ($files as $file) {[m
[31m-      $xpath = $this->buildXPathQuery('//ul[@class="media-list-thumbnails"]/li/div[@data-fid=:fid]/@data-fid', array([m
[31m-        ':fid' => $file->fid,[m
[31m-      ));[m
[31m-      $this->assertNoFieldByXPath($xpath, TRUE, format_string('File with file ID %fid not found.', array('%fid' => $file->fid)));[m
[31m-    }[m
[31m-[m
[31m-    // Verify users require the 'view own files' permission in order to access[m
[31m-    // the 'My files' tab.[m
[31m-    $this->drupalLogout();[m
[31m-    $this->drupalLogin($this->base_user_1);[m
[31m-    $this->drupalGet('media/browser', $options);[m
[31m-    $this->assertResponse(200);[m
[31m-    $xpath = $this->buildXPathQuery('//div[@class="media_default--media_browser_my_files"]');[m
[31m-    $this->assertNoFieldByXPath($xpath, TRUE, 'User with insufficient permissions was unable to view the My files tab.');[m
[31m-[m
[31m-    // Verify own public files are displayed.[m
[31m-    $this->drupalLogout();[m
[31m-    $this->drupalLogin($this->base_user_2);[m
[31m-    $this->drupalGet('media/browser', $options);[m
[31m-    $this->assertResponse(200);[m
[31m-    $xpath = $this->buildXPathQuery('//ul[@class="media-list-thumbnails"]/li/div[@data-fid=:fid]/@data-fid', array([m
[31m-      ':fid' => $files['public_image']->fid,[m
[31m-    ));[m
[31m-    $this->assertFieldByXPath($xpath, TRUE, format_string('File with file ID %fid found.', array('%fid' => $files['public_image']->fid)));[m
[31m-[m
[31m-    // Verify own private file is displayed with permission.[m
[31m-    $this->drupalLogout();[m
[31m-    $this->drupalLogin($this->base_user_3);[m
[31m-    $this->drupalGet('media/browser', $options);[m
[31m-    $this->assertResponse(200);[m
[31m-    $xpath = $this->buildXPathQuery('//ul[@class="media-list-thumbnails"]/li/div[@data-fid=:fid]/@data-fid', array([m
[31m-      ':fid' => $files['private_document']->fid,[m
[31m-    ));[m
[31m-    $this->assertFieldByXPath($xpath, TRUE, format_string('File with file ID %fid found.', array('%fid' => $files['private_document']->fid)));[m
[31m-[m
[31m-    // Verify user cannot see files of other users.[m
[31m-    $xpath = $this->buildXPathQuery('//ul[@class="media-list-thumbnails"]/li/div[@data-fid=:fid]/@data-fid', array([m
[31m-      ':fid' => $files['public_image']->fid,[m
[31m-    ));[m
[31m-    $this->assertNoFieldByXPath($xpath, TRUE, format_string('File with file ID %fid not found.', array('%fid' => $files['public_image']->fid)));[m
[31m-    $xpath = $this->buildXPathQuery('//ul[@class="media-list-thumbnails"]/li/div[@data-fid=:fid]/@data-fid', array([m
[31m-      ':fid' => $files['private_image']->fid,[m
[31m-    ));[m
[31m-    $this->assertNoFieldByXPath($xpath, TRUE, format_string('File with file ID %fid not found.', array('%fid' => $files['private_image']->fid)));[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Tests the 'media' element type settings.[m
[31m- */[m
[31m-class MediaElementSettingsTestCase extends MediaFileFieldTestCase {[m
[31m-  public static function getInfo() {[m
[31m-    return array([m
[31m-      'name' => 'Media element settings test',[m
[31m-      'description' => 'Tests the media element type JavaScript settings.',[m
[31m-      'group' => 'Media',[m
[31m-    );[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Tests the media element type settings.[m
[31m-   */[m
[31m-  function testElementSettings() {[m
[31m-    $form = array([m
[31m-      '#type' => 'media',[m
[31m-    );[m
[31m-    drupal_render($form);[m
[31m-    $javascript = drupal_get_js();[m
[31m-    $global = array([m
[31m-      'media' => array([m
[31m-        'global' => array([m
[31m-          'global' => array([m
[31m-            'types' => array(),[m
[31m-            'schemes' => array(),[m
[31m-          ),[m
[31m-        ),[m
[31m-      ),[m
[31m-    );[m
[31m-    $settings = drupal_json_encode(drupal_array_merge_deep_array($global));[m
[31m-    $this->assertTrue(strpos($javascript, $settings) > 0, 'Rendered media element adds the global settings.');[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Tests the media file field widget settings.[m
[31m-   */[m
[31m-  function testWidgetSettings() {[m
[31m-    // Use 'page' instead of 'article', so that the 'article' image field does[m
[31m-    // not conflict with this test. If in the future the 'page' type gets its[m
[31m-    // own default file or image field, this test can be made more robust by[m
[31m-    // using a custom node type.[m
[31m-    $type_name = 'page';[m
[31m-    $field_name = strtolower($this->randomName());[m
[31m-    $this->createFileField($field_name, $type_name);[m
[31m-    $field = field_info_field($field_name);[m
[31m-    $instance = field_info_instance('node', $field_name, $type_name);[m
[31m-[m
[31m-    $javascript = $this->drupalGet("node/add/$type_name");[m
[31m-[m
[31m-    $multiselect = ($field['cardinality'] > 1 || $field['cardinality'] == FIELD_CARDINALITY_UNLIMITED);[m
[31m-    $field_widget = array([m
[31m-        'elements' => array([m
[31m-          '#edit-' . $field_name . '-' . LANGUAGE_NONE . '-0-upload' => array([m
[31m-            'global' => array([m
[31m-              'types' => array([m
[31m-                'image' => 'image',[m
[31m-              ),[m
[31m-              'enabledPlugins' => array(),[m
[31m-              'schemes' => array([m
[31m-                'public' => 'public',[m
[31m-              ),[m
[31m-              'file_directory' => '',[m
[31m-              'file_extensions' => 'txt',[m
[31m-              'max_filesize' => '',[m
[31m-              'uri_scheme' => 'public',[m
[31m-              'multiselect' => $multiselect,[m
[31m-            ),[m
[31m-          ),[m
[31m-        ),[m
[31m-    );[m
[31m-    $settings = drupal_json_encode(drupal_array_merge_deep_array($field_widget));[m
[31m-    $this->assertTrue(strpos($javascript, $settings) > 0, 'Media file field widget adds element-specific settings.');[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Tests file handling with node revisions.[m
[31m- */[m
[31m-class MediaFileFieldRevisionTestCase extends MediaFileFieldTestCase {[m
[31m-  public static function getInfo() {[m
[31m-    return array([m
[31m-      'name' => 'Media file field revision test',[m
[31m-      'description' => 'Test creating and deleting revisions with files attached.',[m
[31m-      'group' => 'Media',[m
[31m-    );[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Tests creating multiple revisions of a node and managing attached files.[m
[31m-   *[m
[31m-   * Expected behaviors:[m
[31m-   *  - Adding a new revision will make another entry in the field table, but[m
[31m-   *    the original file will not be duplicated.[m
[31m-   *  - Deleting a revision should not delete the original file if the file[m
[31m-   *    is in use by another revision.[m
[31m-   *  - When the last revision that uses a file is deleted, the original file[m
[31m-   *    should be deleted also.[m
[31m-   */[m
[31m-  function testRevisions() {[m
[31m-    $type_name = 'article';[m
[31m-    $field_name = strtolower($this->randomName());[m
[31m-    $this->createFileField($field_name, $type_name);[m
[31m-    $field = field_info_field($field_name);[m
[31m-    $instance = field_info_instance('node', $field_name, $type_name);[m
[31m-[m
[31m-    // Attach the same fields to users.[m
[31m-    $this->attachFileField($field_name, 'user', 'user');[m
[31m-[m
[31m-    $test_file = $this->getTestFile('text');[m
[31m-    $test_file->uid = $this->admin_user->uid;[m
[31m-    $test_file = file_save($test_file);[m
[31m-[m
[31m-    // Create a new node with the uploaded file.[m
[31m-    $nid = $this->attachNodeFile($test_file, $field_name, $type_name);[m
[31m-[m
[31m-    // Check that the file exists on disk and in the database.[m
[31m-    $node = node_load($nid, NULL, TRUE);[m
[31m-    $node_file_r1 = (object) $node->{$field_name}[LANGUAGE_NONE][0];[m
[31m-    $node_vid_r1 = $node->vid;[m
[31m-    $this->assertFileExists($node_file_r1, 'New file saved to disk on node creation.');[m
[31m-    $this->assertFileEntryExists($node_file_r1, 'File entry exists in database on node creation.');[m
[31m-    $this->assertFileIsPermanent($node_file_r1, 'File is permanent.');[m
[31m-[m
[31m-    // Upload another file to the same node in a new revision.[m
[31m-    $this->replaceNodeFile($test_file, $field_name, $nid);[m
[31m-    $node = node_load($nid, NULL, TRUE);[m
[31m-    $node_file_r2 = (object) $node->{$field_name}[LANGUAGE_NONE][0];[m
[31m-    $node_vid_r2 = $node->vid;[m
[31m-    $this->assertFileExists($node_file_r2, 'Replacement file exists on disk after creating new revision.');[m
[31m-    $this->assertFileEntryExists($node_file_r2, 'Replacement file entry exists in database after creating new revision.');[m
[31m-    $this->assertFileIsPermanent($node_file_r2, 'Replacement file is permanent.');[m
[31m-[m
[31m-    // Check that the original file is still in place on the first revision.[m
[31m-    $node = node_load($nid, $node_vid_r1, TRUE);[m
[31m-    $this->assertEqual($node_file_r1, (object) $node->{$field_name}[LANGUAGE_NONE][0], 'Original file still in place after replacing file in new revision.');[m
[31m-    $this->assertFileExists($node_file_r1, 'Original file still in place after replacing file in new revision.');[m
[31m-    $this->assertFileEntryExists($node_file_r1, 'Original file entry still in place after replacing file in new revision');[m
[31m-    $this->assertFileIsPermanent($node_file_r1, 'Original file is still permanent.');[m
[31m-[m
[31m-    // Save a new version of the node without any changes.[m
[31m-    // Check that the file is still the same as the previous revision.[m
[31m-    $this->drupalPost('node/' . $nid . '/edit', array('revision' => '1'), t('Save'));[m
[31m-    $node = node_load($nid, NULL, TRUE);[m
[31m-    $node_file_r3 = (object) $node->{$field_name}[LANGUAGE_NONE][0];[m
[31m-    $node_vid_r3 = $node->vid;[m
[31m-    $this->assertEqual($node_file_r2, $node_file_r3, 'Previous revision file still in place after creating a new revision without a new file.');[m
[31m-    $this->assertFileIsPermanent($node_file_r3, 'New revision file is permanent.');[m
[31m-[m
[31m-    // Revert to the first revision and check that the original file is active.[m
[31m-    $this->drupalPost('node/' . $nid . '/revisions/' . $node_vid_r1 . '/revert', array(), t('Revert'));[m
[31m-    $node = node_load($nid, NULL, TRUE);[m
[31m-    $node_file_r4 = (object) $node->{$field_name}[LANGUAGE_NONE][0];[m
[31m-    $node_vid_r4 = $node->vid;[m
[31m-    $this->assertEqual($node_file_r1, $node_file_r4, 'Original revision file still in place after reverting to the original revision.');[m
[31m-    $this->assertFileIsPermanent($node_file_r4, 'Original revision file still permanent after reverting to the original revision.');[m
[31m-[m
[31m-    // Delete the second revision and check that the file is kept (since it is[m
[31m-    // still being used by the third revision).[m
[31m-    $this->drupalPost('node/' . $nid . '/revisions/' . $node_vid_r2 . '/delete', array(), t('Delete'));[m
[31m-    $this->assertFileExists($node_file_r3, 'Second file is still available after deleting second revision, since it is being used by the third revision.');[m
[31m-    $this->assertFileEntryExists($node_file_r3, 'Second file entry is still available after deleting second revision, since it is being used by the third revision.');[m
[31m-    $this->assertFileIsPermanent($node_file_r3, 'Second file entry is still permanent after deleting second revision, since it is being used by the third revision.');[m
[31m-[m
[31m-    // Attach the second file to a user.[m
[31m-    $user = $this->drupalCreateUser();[m
[31m-    $edit = (array) $user;[m
[31m-    $edit[$field_name][LANGUAGE_NONE][0] = (array) $node_file_r3;[m
[31m-    user_save($user, $edit);[m
[31m-    $this->drupalGet('user/' . $user->uid . '/edit');[m
[31m-[m
[31m-    // Delete the third revision and check that the file is not deleted yet.[m
[31m-    $this->drupalPost('node/' . $nid . '/revisions/' . $node_vid_r3 . '/delete', array(), t('Delete'));[m
[31m-    $this->assertFileExists($node_file_r3, 'Second file is still available after deleting third revision, since it is being used by the user.');[m
[31m-    $this->assertFileEntryExists($node_file_r3, 'Second file entry is still available after deleting third revision, since it is being used by the user.');[m
[31m-    $this->assertFileIsPermanent($node_file_r3, 'Second file entry is still permanent after deleting third revision, since it is being used by the user.');[m
[31m-[m
[31m-    // Delete the user and check that the file still exists.[m
[31m-    user_delete($user->uid);[m
[31m-    // TODO: This seems like a bug in File API. Clearing the stat cache should[m
[31m-    // not be necessary here. The file really exists, but stream wrappers[m
[31m-    // doesn't seem to think so unless we clear the PHP file stat() cache.[m
[31m-    clearstatcache();[m
[31m-    // @todo Files referenced from entity revisions cannot currently be deleted after the entity is deleted.[m
[31m-    // @see https://drupal.org/node/1613290[m
[31m-    // $this->assertFileNotExists($node_file_r3, 'Second file is now deleted after deleting third revision, since it is no longer being used by any other nodes.');[m
[31m-    // $this->assertFileEntryNotExists($node_file_r3, 'Second file entry is now deleted after deleting third revision, since it is no longer being used by any other nodes.');[m
[31m-[m
[31m-    // Delete the entire node and check that the original file is deleted.[m
[31m-    $this->drupalPost('node/' . $nid . '/delete', array(), t('Delete'));[m
[31m-    $this->assertFileNotExists($node_file_r1, 'Original file is deleted after deleting the entire node with two revisions remaining.');[m
[31m-    $this->assertFileEntryNotExists($node_file_r1, 'Original file entry is deleted after deleting the entire node with two revisions remaining.');[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Tests various validations.[m
[31m- */[m
[31m-class MediaFileFieldValidateTestCase extends MediaFileFieldTestCase {[m
[31m-  protected $field;[m
[31m-[m
[31m-  public static function getInfo() {[m
[31m-    return array([m
[31m-      'name' => 'Media file field validation tests',[m
[31m-      'description' => 'Tests validation functions such as required.',[m
[31m-      'group' => 'Media',[m
[31m-    );[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Tests the required property on file fields.[m
[31m-   */[m
[31m-  function testRequired() {[m
[31m-    $type_name = 'article';[m
[31m-    $field_name = strtolower($this->randomName());[m
[31m-    $this->createFileField($field_name, $type_name, array(), array('required' => '1'));[m
[31m-    $field = field_info_field($field_name);[m
[31m-    $instance = field_info_instance('node', $field_name, $type_name);[m
[31m-[m
[31m-    $test_file = $this->getTestFile('text');[m
[31m-    $test_file->uid = $this->admin_user->uid;[m
[31m-    $test_file = file_save($test_file);[m
[31m-[m
[31m-    // Try to post a new node without attaching a file.[m
[31m-    $langcode = LANGUAGE_NONE;[m
[31m-    $edit = array("title" => $this->randomName());[m
[31m-    $this->drupalPost('node/add/' . $type_name, $edit, t('Save'));[m
[31m-    $this->assertRaw(t('!title field is required.', array('!title' => $instance['label'])), 'Node save failed when required file field was empty.');[m
[31m-[m
[31m-    // Create a new node with the attached file.[m
[31m-    $nid = $this->attachNodeFile($test_file, $field_name, $type_name);[m
[31m-    $this->assertTrue($nid !== FALSE, format_string('attachNodeFile(@test_file, @field_name, @type_name) succeeded', array('@test_file' => $test_file->uri, '@field_name' => $field_name, '@type_name' => $type_name)));[m
[31m-[m
[31m-    $node = node_load($nid, NULL, TRUE);[m
[31m-[m
[31m-    $node_file = (object) $node->{$field_name}[LANGUAGE_NONE][0];[m
[31m-    $this->assertFileExists($node_file, 'File exists after attaching to the required field.');[m
[31m-    $this->assertFileEntryExists($node_file, 'File entry exists after attaching to the required field.');[m
[31m-[m
[31m-    // Try again with a multiple value field.[m
[31m-    field_delete_field($field_name);[m
[31m-    $this->createFileField($field_name, $type_name, array('cardinality' => FIELD_CARDINALITY_UNLIMITED), array('required' => '1'));[m
[31m-[m
[31m-    // Try to post a new node without attaching a file in the multivalue field.[m
[31m-    $edit = array('title' => $this->randomName());[m
[31m-    $this->drupalPost('node/add/' . $type_name, $edit, t('Save'));[m
[31m-    $this->assertRaw(t('!title field is required.', array('!title' => $instance['label'])), 'Node save failed when required multiple value file field was empty.');[m
[31m-[m
[31m-    // Create a new node with the attached file into the multivalue field.[m
[31m-    $nid = $this->attachNodeFile($test_file, $field_name, $type_name);[m
[31m-    $node = node_load($nid, NULL, TRUE);[m
[31m-    $node_file = (object) $node->{$field_name}[LANGUAGE_NONE][0];[m
[31m-    $this->assertFileExists($node_file, 'File exists after attaching to the required multiple value field.');[m
[31m-    $this->assertFileEntryExists($node_file, 'File entry exists after attaching to the required multiple value field.');[m
[31m-[m
[31m-    // Remove our file field.[m
[31m-    field_delete_field($field_name);[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-/**[m
[31m- * Tests that formatters are working properly.[m
[31m- */[m
[31m-class MediaFileFieldDisplayTestCase extends MediaFileFieldTestCase {[m
[31m-  public static function getInfo() {[m
[31m-    return array([m
[31m-      'name' => 'Media file field display tests',[m
[31m-      'description' => 'Test the display of file fields in node and views.',[m
[31m-      'group' => 'Media',[m
[31m-    );[m
[31m-  }[m
[31m-[m
[31m-  /**[m
[31m-   * Tests normal formatter display on node display.[m
[31m-   */[m
[31m-  function testNodeDisplay() {[m
[31m-    $field_name = strtolower($this->randomName());[m
[31m-    $type_name = 'article';[m
[31m-    $field_settings = array([m
[31m-      'display_field' => '1',[m
[31m-      'display_default' => '1',[m
[31m-    );[m
[31m-    $instance_settings = array([m
[31m-      'description_field' => '1',[m
[31m-    );[m
[31m-    $widget_settings = array();[m
[31m-    $this->createFileField($field_name, $type_name, $field_settings, $instance_settings, $widget_settings);[m
[31m-    $field = field_info_field($field_name);[m
[31m-    $instance = field_info_instance('node', $field_name, $type_name);[m
[31m-[m
[31m-    // Create a new node *without* the file field set, and check that the field[m
[31m-    // is not shown for each node display.[m
[31m-    $node = $this->drupalCreateNode(array('type' => $type_name));[m
[31m-    $file_formatters = array('file_default', 'file_table', 'file_url_plain', 'hidden');[m
[31m-    foreach ($file_formatters as $formatter) {[m
[31m-      $edit = array([m
[31m-        "fields[$field_name][type]" => $formatter,[m
[31m-      );[m
[31m-      $this->drupalPost("admin/structure/types/manage/$type_name/display", $edit, t('Save'));[m
[31m-      $this->drupalGet('node/' . $node->nid);[m
[31m-      $this->assertNoText($field_name, format_string('Field label is hidden when no file attached for formatter %formatter', array('%formatter' => $formatter)));[m
[31m-    }[m
[31m-[m
[31m-    $test_file = $this->getTestFile('text');[m
[31m-    $test_file->uid = $this->admin_user->uid;[m
[31m-    $test_file = file_save($test_file);[m
[31m-[m
[31m-    // Create a new node with the attached file.[m
[31m-    $nid = $this->attachNodeFile($test_file, $field_name, $type_name);[m
[31m-    $this->drupalGet('node/' . $nid . '/edit');[m
[31m-[m
[31m-    // Check that the media thumbnail is displaying with the file name.[m
[31m-    $node = node_load($nid, NULL, TRUE);[m
[31m-    $node_file = (object) $node->{$field_name}[LANGUAGE_NONE][0];[m
[31m-    $thumbnail = media_get_thumbnail_preview($node_file);[m
[31m-    $default_output = drupal_render($thumbnail);[m
[31m-    $this->assertRaw($default_output, 'Default formatter displaying correctly on full node view.');[m
[31m-[m
[31m-    // Turn the "display" option off and check that the file is no longer displayed.[m
[31m-    $edit = array($field_name . '[' . LANGUAGE_NONE . '][0][display]' => FALSE);[m
[31m-    $this->drupalPost('node/' . $nid . '/edit', $edit, t('Save'));[m
[31m-[m
[31m-    $this->assertNoRaw($default_output, 'Field is hidden when "display" option is unchecked.');[m
[31m-[m
[31m-  }[m
[31m-}[m
[1mdiff --git a/sites/all/modules/contrib/media/views/media_default.view.inc b/sites/all/modules/contrib/media/views/media_default.view.inc[m
[1mdeleted file mode 100644[m
[1mindex 5407465..0000000[m
[1m--- a/sites/all/modules/contrib/media/views/media_default.view.inc[m
[1m+++ /dev/null[m
[36m@@ -1,171 +0,0 @@[m
[31m-<?php[m
[31m-[m
[31m-/**[m
[31m- * @file[m
[31m- * The default view for the media browser library tab.[m
[31m- */[m
[31m-[m
[31m-$view = new view();[m
[31m-$view->name = 'media_default';[m
[31m-$view->description = 'Default view for the media browser library tab.';[m
[31m-$view->tag = 'media, default';[m
[31m-$view->base_table = 'file_managed';[m
[31m-$view->human_name = 'Media browser';[m
[31m-$view->core = 7;[m
[31m-$view->api_version = '3.0';[m
[31m-$view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */[m
[31m-[m
[31m-/* Display: Master */[m
[31m-$handler = $view->new_display('default', 'Master', 'default');[m
[31m-$handler->display->display_options['use_ajax'] = TRUE;[m
[31m-$handler->display->display_options['use_more_always'] = FALSE;[m
[31m-$handler->display->display_options['group_by'] = TRUE;[m
[31m-$handler->display->display_options['access']['type'] = 'perm';[m
[31m-$handler->display->display_options['access']['perm'] = 'view files';[m
[31m-$handler->display->display_options['cache']['type'] = 'none';[m
[31m-$handler->display->display_options['query']['type'] = 'views_query';[m
[31m-$handler->display->display_options['query']['options']['query_tags'] = array([m
[31m-  0 => 'media_browser',[m
[31m-);[m
[31m-$handler->display->display_options['exposed_form']['type'] = 'basic';[m
[31m-$handler->display->display_options['exposed_form']['options']['reset_button'] = FALSE;[m
[31m-$handler->display->display_options['pager']['type'] = 'full';[m
[31m-$handler->display->display_options['pager']['options']['items_per_page'] = '25';[m
[31m-$handler->display->display_options['pager']['options']['offset'] = '0';[m
[31m-$handler->display->display_options['pager']['options']['id'] = '0';[m
[31m-$handler->display->display_options['style_plugin'] = 'media_browser';[m
[31m-/* No results behavior: Global: Text area */[m
[31m-$handler->display->display_options['empty']['area']['id'] = 'area';[m
[31m-$handler->display->display_options['empty']['area']['table'] = 'views';[m
[31m-$handler->display->display_options['empty']['area']['field'] = 'area';[m
[31m-$handler->display->display_options['empty']['area']['content'] = 'No files available.';[m
[31m-$handler->display->display_options['empty']['area']['format'] = filter_fallback_format();[m
[31m-/* Field: File: Name */[m
[31m-$handler->display->display_options['fields']['filename']['id'] = 'filename';[m
[31m-$handler->display->display_options['fields']['filename']['table'] = 'file_managed';[m
[31m-$handler->display->display_options['fields']['filename']['field'] = 'filename';[m
[31m-$handler->display->display_options['fields']['filename']['label'] = '';[m
[31m-$handler->display->display_options['fields']['filename']['alter']['word_boundary'] = FALSE;[m
[31m-$handler->display->display_options['fields']['filename']['alter']['ellipsis'] = FALSE;[m
[31m-$handler->display->display_options['fields']['filename']['link_to_file'] = TRUE;[m
[31m-/* Sort criterion: File: Upload date */[m
[31m-$handler->display->display_options['sorts']['timestamp']['id'] = 'timestamp';[m
[31m-$handler->display->display_options['sorts']['timestamp']['table'] = 'file_managed';[m
[31m-$handler->display->display_options['sorts']['timestamp']['field'] = 'timestamp';[m
[31m-$handler->display->display_options['sorts']['timestamp']['order'] = 'DESC';[m
[31m-$handler->display->display_options['sorts']['timestamp']['exposed'] = TRUE;[m
[31m-$handler->display->display_options['sorts']['timestamp']['expose']['label'] = 'Upload date';[m
[31m-/* Sort criterion: SUM(File Usage: Use count) */[m
[31m-$handler->display->display_options['sorts']['count']['id'] = 'count';[m
[31m-$handler->display->display_options['sorts']['count']['table'] = 'file_usage';[m
[31m-$handler->display->display_options['sorts']['count']['field'] = 'count';[m
[31m-$handler->display->display_options['sorts']['count']['group_type'] = 'sum';[m
[31m-$handler->display->display_options['sorts']['count']['exposed'] = TRUE;[m
[31m-$handler->display->display_options['sorts']['count']['expose']['label'] = 'Use count';[m
[31m-/* Filter criterion: File: Status */[m
[31m-$handler->display->display_options['filters']['status']['id'] = 'status';[m
[31m-$handler->display->display_options['filters']['status']['table'] = 'file_managed';[m
[31m-$handler->display->display_options['filters']['status']['field'] = 'status';[m
[31m-$handler->display->display_options['filters']['status']['value'] = array([m
[31m-  1 => '1',[m
[31m-);[m
[31m-/* Filter criterion: File: Name */[m
[31m-$handler->display->display_options['filters']['filename']['id'] = 'filename';[m
[31m-$handler->display->display_options['filters']['filename']['table'] = 'file_managed';[m
[31m-$handler->display->display_options['filters']['filename']['field'] = 'filename';[m
[31m-$handler->display->display_options['filters']['filename']['operator'] = 'contains';[m
[31m-$handler->display->display_options['filters']['filename']['exposed'] = TRUE;[m
[31m-$handler->display->display_options['filters']['filename']['expose']['operator_id'] = 'filename_op';[m
[31m-$handler->display->display_options['filters']['filename']['expose']['label'] = 'File name';[m
[31m-$handler->display->display_options['filters']['filename']['expose']['operator'] = 'filename_op';[m
[31m-$handler->display->display_options['filters']['filename']['expose']['identifier'] = 'filename';[m
[31m-/* Filter criterion: File: Type */[m
[31m-$handler->display->display_options['filters']['type']['id'] = 'type';[m
[31m-$handler->display->display_options['filters']['type']['table'] = 'file_managed';[m
[31m-$handler->display->display_options['filters']['type']['field'] = 'type';[m
[31m-$handler->display->display_options['filters']['type']['exposed'] = TRUE;[m
[31m-$handler->display->display_options['filters']['type']['expose']['operator_id'] = 'type_op';[m
[31m-$handler->display->display_options['filters']['type']['expose']['label'] = 'Type';[m
[31m-$handler->display->display_options['filters']['type']['expose']['operator'] = 'type_op';[m
[31m-$handler->display->display_options['filters']['type']['expose']['identifier'] = 'type';[m
[31m-[m
[31m-/* Display: Media browser */[m
[31m-$handler = $view->new_display('media_browser', 'Media browser', 'media_browser_1');[m
[31m-$handler->display->display_options['defaults']['title'] = FALSE;[m
[31m-$handler->display->display_options['title'] = 'Library';[m
[31m-$handler->display->display_options['defaults']['hide_admin_links'] = FALSE;[m
[31m-[m
[31m-/* Display: My files */[m
[31m-$handler = $view->new_display('media_browser', 'My files', 'media_browser_my_files');[m
[31m-$handler->display->display_options['defaults']['title'] = FALSE;[m
[31m-$handler->display->display_options['title'] = 'My files';[m
[31m-$handler->display->display_options['defaults']['hide_admin_links'] = FALSE;[m
[31m-$handler->display->display_options['defaults']['access'] = FALSE;[m
[31m-$handler->display->display_options['access']['type'] = 'perm';[m
[31m-$handler->display->display_options['access']['perm'] = 'view own files';[m
[31m-$handler->display->display_options['defaults']['relationships'] = FALSE;[m
[31m-/* Relationship: File: User who uploaded */[m
[31m-$handler->display->display_options['relationships']['uid']['id'] = 'uid';[m
[31m-$handler->display->display_options['relationships']['uid']['table'] = 'file_managed';[m
[31m-$handler->display->display_options['relationships']['uid']['field'] = 'uid';[m
[31m-$handler->display->display_options['relationships']['uid']['required'] = TRUE;[m
[31m-$handler->display->display_options['defaults']['arguments'] = FALSE;[m
[31m-$handler->display->display_options['defaults']['filter_groups'] = FALSE;[m
[31m-$handler->display->display_options['defaults']['filters'] = FALSE;[m
[31m-/* Filter criterion: File: Status */[m
[31m-$handler->display->display_options['filters']['status']['id'] = 'status';[m
[31m-$handler->display->display_options['filters']['status']['table'] = 'file_managed';[m
[31m-$handler->display->display_options['filters']['status']['field'] = 'status';[m
[31m-$handler->display->display_options['filters']['status']['value'] = array([m
[31m-  1 => '1',[m
[31m-);[m
[31m-/* Filter criterion: File: Name */[m
[31m-$handler->display->display_options['filters']['filename']['id'] = 'filename';[m
[31m-$handler->display->display_options['filters']['filename']['table'] = 'file_managed';[m
[31m-$handler->display->display_options['filters']['filename']['field'] = 'filename';[m
[31m-$handler->display->display_options['filters']['filename']['operator'] = 'contains';[m
[31m-$handler->display->display_options['filters']['filename']['exposed'] = TRUE;[m
[31m-$handler->display->display_options['filters']['filename']['expose']['operator_id'] = 'filename_op';[m
[31m-$handler->display->display_options['filters']['filename']['expose']['label'] = 'File name';[m
[31m-$handler->display->display_options['filters']['filename']['expose']['operator'] = 'filename_op';[m
[31m-$handler->display->display_options['filters']['filename']['expose']['identifier'] = 'filename';[m
[31m-/* Filter criterion: File: Type */[m
[31m-$handler->display->display_options['filters']['type']['id'] = 'type';[m
[31m-$handler->display->display_options['filters']['type']['table'] = 'file_managed';[m
[31m-$handler->display->display_options['filters']['type']['field'] = 'type';[m
[31m-$handler->display->display_options['filters']['type']['exposed'] = TRUE;[m
[31m-$handler->display->display_options['filters']['type']['expose']['operator_id'] = 'type_op';[m
[31m-$handler->display->display_options['filters']['type']['expose']['label'] = 'Type';[m
[31m-$handler->display->display_options['filters']['type']['expose']['operator'] = 'type_op';[m
[31m-$handler->display->display_options['filters']['type']['expose']['identifier'] = 'type';[m
[31m-/* Filter criterion: User: Current */[m
[31m-$handler->display->display_options['filters']['uid_current']['id'] = 'uid_current';[m
[31m-$handler->display->display_options['filters']['uid_current']['table'] = 'users';[m
[31m-$handler->display->display_options['filters']['uid_current']['field'] = 'uid_current';[m
[31m-$handler->display->display_options['filters']['uid_current']['relationship'] = 'uid';[m
[31m-$handler->display->display_options['filters']['uid_current']['value'] = '1';[m
[31m-$translatables['media_default'] = array([m
[31m-  t('Master'),[m
[31m-  t('more'),[m
[31m-  t('Apply'),[m
[31m-  t('Reset'),[m
[31m-  t('Sort by'),[m
[31m-  t('Asc'),[m
[31m-  t('Desc'),[m
[31m-  t('Items per page'),[m
[31m-  t('- All -'),[m
[31m-  t('Offset'),[m
[31m-  t('« first'),[m
[31m-  t('‹ previous'),[m
[31m-  t('next ›'),[m
[31m-  t('last »'),[m
[31m-  t('No files available.'),[m
[31m-  t('Upload date'),[m
[31m-  t('Use count'),[m
[31m-  t('File name'),[m
[31m-  t('Type'),[m
[31m-  t('Media browser'),[m
[31m-  t('Library'),[m
[31m-  t('My files'),[m
[31m-  t('User who uploaded'),[m
[31m-);[m
[1mdiff --git a/sites/all/modules/contrib/media_youtube/includes/MediaYouTubeBrowser.inc b/sites/all/modules/contrib/media_youtube/includes/MediaYouTubeBrowser.inc[m
[1mindex af9ebc8..c1f2c56 100644[m
[1m--- a/sites/all/modules/contrib/media_youtube/includes/MediaYouTubeBrowser.inc[m
[1m+++ b/sites/all/modules/contrib/media_youtube/includes/MediaYouTubeBrowser.inc[m
[36m@@ -16,7 +16,7 @@[m [mclass MediaYouTubeBrowser extends MediaBrowserPlugin {[m
   public function access($account = NULL) {[m
     // @TODO: media_access() is a wrapper for file_entity_access(). Switch to the[m
     // new function when Media 1.x is deprecated.[m
[31m-    return media_access('create', $account);[m
[32m+[m[32m//    return media_access('create', $account);[m
   }[m
 [m
   /**[m
